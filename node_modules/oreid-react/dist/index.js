(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('react')) :
	typeof define === 'function' && define.amd ? define(['exports', 'react'], factory) :
	(global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global["oreid-react"] = {}, global.React));
})(this, (function (exports, React) { 'use strict';

	function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

	var React__default = /*#__PURE__*/_interopDefaultLegacy(React);

	var OreIdContext = React.createContext({
	    //@ts-ignore
	    oreId: undefined,
	    user: undefined,
	    setUser: function () { return undefined; },
	    isLoggedIn: false,
	    setIsLoggedIn: function () { return undefined; },
	    accessToken: undefined,
	    setAccessToken: function () { return undefined; },
	});

	// @ts-nocheck
	var Observables = function () {
	    var _a = React.useContext(OreIdContext), oreId = _a.oreId, setUser = _a.setUser, setAccessToken = _a.setAccessToken, setIsLoggedIn = _a.setIsLoggedIn;
	    var _b = React.useState(oreId.auth.user), authUser = _b[0], setAuthUser = _b[1];
	    var updateUserState = React.useCallback(function (newUser) {
	        try {
	            setUser(newUser === null || newUser === void 0 ? void 0 : newUser.data);
	        }
	        catch (err) {
	            setUser(undefined);
	        }
	    }, [setUser]);
	    var updateOreIdState = React.useCallback(function (auth) {
	        setAuthUser(auth === null || auth === void 0 ? void 0 : auth.user);
	        setIsLoggedIn(auth.isLoggedIn);
	        setAccessToken(auth.accessToken);
	    }, [setAuthUser, setIsLoggedIn, setAccessToken]);
	    React.useEffect(function () {
	        oreId.auth.subscribe(updateOreIdState);
	        return function () {
	            oreId.auth.unsubscribe(updateOreIdState);
	        };
	    }, [oreId, updateOreIdState]);
	    React.useEffect(function () {
	        if (!authUser)
	            return;
	        authUser.subscribe(updateUserState);
	        authUser.getData().catch(function () {
	            // ! If it fails, nothing needs to be done.
	            // ! This function should stay here to prevent the error alert from appearing in the console
	        });
	        return function () {
	            authUser.unsubscribe(updateUserState);
	        };
	    }, [authUser]);
	    return null;
	};

	var OreidProvider = function (_a) {
	    var children = _a.children, oreId = _a.oreId;
	    var _b = React.useState(undefined), user = _b[0], setUser = _b[1];
	    var _c = React.useState(false), isLoggedIn = _c[0], setIsLoggedIn = _c[1];
	    var _d = React.useState(undefined), accessToken = _d[0], setAccessToken = _d[1];
	    React.useEffect(function () {
	        if (typeof window === "undefined") {
	            return;
	        }
	        if (!oreId.isInitialized) {
	            oreId.init();
	        }
	    }, []);
	    return (React__default["default"].createElement(OreIdContext.Provider, { value: {
	            oreId: oreId,
	            user: user,
	            setUser: setUser,
	            isLoggedIn: isLoggedIn,
	            setIsLoggedIn: setIsLoggedIn,
	            accessToken: accessToken,
	            setAccessToken: setAccessToken,
	        } },
	        React__default["default"].createElement(Observables, null),
	        children));
	};

	var useIsLoggedIn = function () {
	    var isLoggedIn = React.useContext(OreIdContext).isLoggedIn;
	    return isLoggedIn;
	};

	var useOreId = function () {
	    var oreId = React.useContext(OreIdContext).oreId;
	    return oreId;
	};

	var useUser = function () {
	    var user = React.useContext(OreIdContext).user;
	    return user;
	};

	exports.OreidProvider = OreidProvider;
	exports.useIsLoggedIn = useIsLoggedIn;
	exports.useOreId = useOreId;
	exports.useUser = useUser;

	Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=index.js.map
