import OreIdContext from '../../core/IOreidContext';
import { AccountName, ChainAccount, ChainNetwork, TransactionData } from '../../models';
import { ApiResultWithErrorCode } from '../models';
export declare type ApiSignTransactionParams = {
    autoSign?: boolean;
    transactionData: TransactionData;
};
export declare type ApiSignTransactionBodyParams = {
    account: AccountName;
    allow_chain_account_selection?: boolean;
    auto_sign?: boolean;
    broadcast?: boolean;
    chain_account: ChainAccount;
    chain_network: ChainNetwork;
    expire_seconds?: number;
    generate_auto_sign_credential?: boolean;
    multisig_chain_accounts?: string;
    return_signed_transaction?: boolean;
    signed_transaction?: string;
    transaction?: string;
    transaction_chain_acccount?: ChainAccount;
    transaction_record_id?: string;
    user_password?: string;
    user_password_encrypted?: string;
};
export declare type ApiSignTransactionResult = {
    signedTransaction?: string;
    transactionId?: string;
} & ApiResultWithErrorCode;
/** Call api transaction/sign - to sign a transaction for a user
 * Can only sign a transaction if autoSign specified (and previously enabled by user)
 * OR if OreId is managing a private key it can sign with (e.g. most often an account in multiSigChainAccounts)
 * For autoSign param, requires an apiKey with the autoSign right
 * Returns: stringified signedTransaction (and transactionId if available)
 *          OR errorCode, errorDescription, message - if any issues
 * */
export declare function callApiSignTransaction(oreIdContext: OreIdContext, params: ApiSignTransactionParams): Promise<ApiSignTransactionResult>;
/** Call api custodial/sign - for signing a transaction on behalf of a user
 * Requires wallet password: either user_password or user_password_encrypted param (used to decrypt user's key)
 * Requires an apiKey with the proxySign right
 * Returns: stringified signedTransaction (and transactionId if available)
 *          OR errorCode, errorDescription, message - if any issues
 * */
export declare function callApiCustodialSignTransaction(oreIdContext: OreIdContext, params: ApiSignTransactionParams): Promise<ApiSignTransactionResult>;
