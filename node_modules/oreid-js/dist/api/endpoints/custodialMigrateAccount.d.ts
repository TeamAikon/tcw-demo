import OreIdContext from '../../core/IOreidContext';
import { AccountName, AccountType, ChainAccount, ChainNetwork } from '../../models';
import { ApiResultWithErrorCode } from '../models';
export declare type ApiCustodialMigrateAccountParams = {
    account: AccountName;
    chainAccount: ChainAccount;
    chainNetwork: ChainNetwork;
    toType: AccountType;
    userPassword: string;
    userPasswordEncrypted: string;
};
export declare type ApiCustodialMigrateAccountBodyParams = {
    account: AccountName;
    chain_account: ChainAccount;
    chain_network: ChainNetwork;
    to_type: AccountType;
    user_password?: string;
    user_password_encrypted?: string;
};
export declare type ApiCustodialMigrateAccountResult = {
    account: AccountName;
} & ApiResultWithErrorCode;
/** Call the custodial/migrate-user api
 * Converts a user account to a new account type
 * Usually used to convert a virtal account to a native account (on-chain)
 * .. and expects the account to be a managed (custodial) account
 * Requires a wallet password (userPassword) on behalf of the user
 * Requires an apiKey with the accountMigration right
 * Returns: account name of migrated account
 *       OR errorCode, errorMessage, and message if any problems */
export declare function callApiCustodialMigrateAccount(oreIdContext: OreIdContext, params: ApiCustodialMigrateAccountParams): Promise<ApiCustodialMigrateAccountResult>;
