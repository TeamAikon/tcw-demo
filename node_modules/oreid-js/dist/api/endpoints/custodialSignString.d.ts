import OreIdContext from '../../core/IOreidContext';
import { SignStringMethod } from '../../models';
import { ApiResultWithErrorCode } from '../models';
export declare type ApiCustodialSignStringParams = {
    chainAccount: string;
    chainNetwork: string;
    permission?: string;
    stringToSign: string;
    /** optional - alternative method of signing (chain-specific) */
    signMethod?: SignStringMethod;
    userPassword?: string;
    userPasswordEncrypted?: string;
};
export declare type ApiCustodialSignStringBodyParams = {
    chain_account: string;
    chain_network: string;
    permission?: string;
    string_to_sign: string;
    sign_method?: SignStringMethod;
    user_password?: string;
    user_password_encrypted?: string;
};
export declare type ApiCustodialSignStringResult = {
    signature: string;
} & ApiResultWithErrorCode;
/** Call the custoidal/sign-string api
 * Signs a string (aka message) using the user's private key
 * Requires a wallet password (userPassword) on behalf of the user
 * Requires an apiKey with the createUser right
 * Optional: options - designates the method of signing to perform (e.g. ethereum.eth_sign, ethereum.eth_signTypedData) and related metadata (e.g. ERC712 types)
 * Returns: signature
 *       OR errorCode, errorMessage, and message if any problems */
export declare function callApiCustodialSignString(oreIdContext: OreIdContext, params: ApiCustodialSignStringParams): Promise<ApiCustodialSignStringResult>;
