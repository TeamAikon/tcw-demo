import OreIdContext from '../../core/IOreidContext';
import { AccountName, ChainAccount, ChainNetwork, ExternalWalletType, PublicKey } from '../../models';
import { ApiMessageResult } from '../models';
export declare type ApiAddPermissionParams = {
    account: AccountName;
    chainAccount: ChainAccount;
    chainNetwork: ChainNetwork;
    parentPermission?: PermissionName;
    permission: PermissionName;
    provider?: ExternalWalletType;
    publicKey: PublicKey;
};
/**
 *  Call api account/addPermission
 *  Adds a public key to a user account with a specific permission name
 * The permission name must be one defined in the App Registration record (Which defines its parent permission as well as preventing adding rougue permissions)
 * This feature allows your app to hold private keys locally (for certain actions enabled by the permission) while having the associated public key in the user's account
 * chainAccount = name of the account on the chain - 12/13-digit string on EOS and Ethereum Address on ETH - it may be the same as the account
 * chainNetwork = one of the valid options defined by the system - Ex: 'eos_main', 'eos_jungle', 'eos_kylin", 'ore_main', 'eos_test', etc.
 * */
export declare function callApiAddPermission(oreIdContext: OreIdContext, params: ApiAddPermissionParams): Promise<ApiMessageResult>;
