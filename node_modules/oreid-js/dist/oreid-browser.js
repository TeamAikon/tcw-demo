(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["oreidJs"] = factory();
	else
		root["oreidJs"] = factory();
})(self, () => {
return /******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ([
/* 0 */,
/* 1 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Auth": () => (/* binding */ Auth)
/* harmony export */ });
/* harmony import */ var _api__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2);
/* harmony import */ var _core_urlGenerators__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(40);
/* harmony import */ var _transit_TransitHelper__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(41);
/* harmony import */ var _ual_UalHelper__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(72);
/* harmony import */ var _user_user__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(74);
/* harmony import */ var _utils_helpers__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(17);
/* harmony import */ var _utils_observable__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(75);
/* harmony import */ var _accessTokenHelper__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(77);
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, $Symbol = "function" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, ""); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return generator._invoke = function (innerFn, self, context) { var state = "suspendedStart"; return function (method, arg) { if ("executing" === state) throw new Error("Generator is already running"); if ("completed" === state) { if ("throw" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) { if ("suspendedStart" === state) throw state = "completed", context.arg; context.dispatchException(context.arg); } else "return" === context.method && context.abrupt("return", context.arg); state = "executing"; var record = tryCatch(innerFn, self, context); if ("normal" === record.type) { if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg); } }; }(innerFn, self, context), generator; } function tryCatch(fn, obj, arg) { try { return { type: "normal", arg: fn.call(obj, arg) }; } catch (err) { return { type: "throw", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { ["next", "throw", "return"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if ("throw" !== record.type) { var result = record.arg, value = result.value; return value && "object" == _typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke("next", value, resolve, reject); }, function (err) { invoke("throw", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke("throw", error, resolve, reject); }); } reject(record.arg); } var previousPromise; this._invoke = function (method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); }; } function maybeInvokeDelegate(delegate, context) { var method = delegate.iterator[context.method]; if (undefined === method) { if (context.delegate = null, "throw" === context.method) { if (delegate.iterator["return"] && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method)) return ContinueSentinel; context.method = "throw", context.arg = new TypeError("The iterator does not provide a 'throw' method"); } return ContinueSentinel; } var record = tryCatch(method, delegate.iterator, context.arg); if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = "normal", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: "root" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if ("function" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, "constructor", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) { var ctor = "function" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, "toString", function () { return "[object Generator]"; }), exports.keys = function (object) { var keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if ("throw" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if ("root" === entry.tryLoc) return handle("end"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error("try statement without catch or finally"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if ("throw" === record.type) throw record.arg; return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, "catch": function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if ("throw" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, "next" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _get() { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get.bind(); } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }









var Auth = /*#__PURE__*/function (_Observable) {
  _inherits(Auth, _Observable);

  var _super = _createSuper(Auth);

  function Auth(args) {
    var _this;

    _classCallCheck(this, Auth);

    _this = _super.call(this);

    _defineProperty(_assertThisInitialized(_this), "onUpdateAccessTokenHelper", function (newAccessTokenHelper) {
      // save new access token
      _this.saveAccessTokenAndNotifySubscribers(_this._accessTokenHelper.accessToken);
    });

    _this._oreIdContext = args.oreIdContext;
    _this._localState = _this._oreIdContext.localState;
    _this._transitHelper = new _transit_TransitHelper__WEBPACK_IMPORTED_MODULE_2__["default"]({
      oreIdContext: _this._oreIdContext,
      user: _this._user
    });
    _this._ualHelper = new _ual_UalHelper__WEBPACK_IMPORTED_MODULE_3__["default"]({
      oreIdContext: _this._oreIdContext,
      user: _this._user
    });

    _this.initAccessTokenHelper();

    return _this;
  }

  _createClass(Auth, [{
    key: "accessTokenHelper",
    get:
    /** User's OreID (accountName) */
    function get() {
      return this._accessTokenHelper;
    }
  }, {
    key: "initAccessTokenHelper",
    value: function initAccessTokenHelper() {
      var _this$_localState;

      this._accessTokenHelper = new _accessTokenHelper__WEBPACK_IMPORTED_MODULE_7__.AccessTokenHelper();
      var savedToken = (_this$_localState = this._localState) === null || _this$_localState === void 0 ? void 0 : _this$_localState.accessToken;
      this.accessToken = savedToken;
      this.saveAccessTokenAndNotifySubscribers(savedToken); // if savedToken is expired, it will be not set here
      // listen for future changes to accessTokenHelper

      this._accessTokenHelper.subscribe(this.onUpdateAccessTokenHelper);
    }
    /** User's OreID (accountName) */

  }, {
    key: "accountName",
    get: function get() {
      var _this$_accessTokenHel, _this$_accessTokenHel2;

      return (_this$_accessTokenHel = this._accessTokenHelper) !== null && _this$_accessTokenHel !== void 0 && _this$_accessTokenHel.accessToken ? (_this$_accessTokenHel2 = this._accessTokenHelper) === null || _this$_accessTokenHel2 === void 0 ? void 0 : _this$_accessTokenHel2.accountName : null;
    }
  }, {
    key: "idToken",
    get: function get() {
      var _this$_accessTokenHel3;

      return (_this$_accessTokenHel3 = this._accessTokenHelper) === null || _this$_accessTokenHel3 === void 0 ? void 0 : _this$_accessTokenHel3.idToken;
    }
    /** retrieve accessToken saved in local storage - is automatically deleted when token expires */

  }, {
    key: "accessToken",
    get: function get() {
      var _this$_accessTokenHel4;

      return (_this$_accessTokenHel4 = this._accessTokenHelper) === null || _this$_accessTokenHel4 === void 0 ? void 0 : _this$_accessTokenHel4.accessToken;
    }
    /** Sets the access token in local storage (and in accessTokenHelper)
     * this token will be used to call ORE ID APIs (on behalf of the user)
     * This token is user-specific - call logout to clear it upon user log-out
     * When the accessToken token expires, it will be deleted from local storage and user will be cleared
     */
    ,
    set: function set(accessToken) {
      try {
        // decodes and validates accessToken is a valid token
        // if incoming token has expired, _accessTokenHelper will throw (and token wont be saved)
        this._accessTokenHelper.setAccessToken(accessToken); // NOTE: We dont save the access token to local storage here as that will happen when onUpdateAccessTokenHelper is called

      } catch (error) {
        console.log('Cant set accessToken.', error.message);
      }
    }
    /** set private variable and save to localState
     * NOTE: This is called every time this._accessTokenHelper.accessToken changes (or expires)
     */

  }, {
    key: "saveAccessTokenAndNotifySubscribers",
    value: function saveAccessTokenAndNotifySubscribers(accessToken) {
      var _this$_localState2;

      if (((_this$_localState2 = this._localState) === null || _this$_localState2 === void 0 ? void 0 : _this$_localState2.accessToken) !== accessToken) {
        this._localState.saveAccessToken(accessToken);

        this._user = null;
      }

      _get(_getPrototypeOf(Auth.prototype), "callSubscribers", this).call(this);
    }
    /** Returns user object matching current accessToken
     *  A newly created object object won't have user.info populated, call user.getData() to retrieve
     */

  }, {
    key: "user",
    get: function get() {
      if (!this._user) {
        this._user = new _user_user__WEBPACK_IMPORTED_MODULE_4__.User({
          oreIdContext: this._oreIdContext,
          accessTokenHelper: this._accessTokenHelper,
          // accessToken helper
          accountName: this.accountName // accountName

        });
      }

      return this._user;
    }
    /** We have a valid access token for the current user */

  }, {
    key: "isLoggedIn",
    get: function get() {
      return !!this.accessToken;
    }
    /** runs when accessTokenHelper changes */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars

  }, {
    key: "clearAccessToken",
    value: function clearAccessToken() {
      // clear accessToken and user
      this._localState.clearAccessToken();

      this._accessTokenHelper.clearAccessToken();

      _get(_getPrototypeOf(Auth.prototype), "callSubscribers", this).call(this);
    }
    /** Calls the 'connect' function on a external wallet (e.g. Metamask)
     *  For most, however, this function returns the chainAccount selected by the user in the wallet app
     *  Different wallets have different behavior. Some do not support this feature. */

  }, {
    key: "connectWithWallet",
    value: function () {
      var _connectWithWallet = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(loginOptions) {
        var walletType;
        return _regeneratorRuntime().wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                walletType = loginOptions.walletType;

                if (this._oreIdContext.walletHelper.isAValidExternalWalletType(walletType)) {
                  _context.next = 3;
                  break;
                }

                throw new Error("loginWithWallet not supported for external wallet type: ".concat(walletType));

              case 3:
                return _context.abrupt("return", this.connectToWalletProvider(loginOptions));

              case 4:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function connectWithWallet(_x) {
        return _connectWithWallet.apply(this, arguments);
      }

      return connectWithWallet;
    }()
    /** Connect to the wallet provider
     *  For some wallet types, this will include an unlock and 'login' flow to select a chain account
     *  If a chainAccount is selected, it and it's associated publicKey (if available) will be saved to the user's OreId wallet as an 'external key' */

  }, {
    key: "connectToWalletProvider",
    value: function () {
      var _connectToWalletProvider = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(loginOptions) {
        return _regeneratorRuntime().wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                return _context2.abrupt("return", this._oreIdContext.walletHelper.connectToWalletProvider(loginOptions));

              case 1:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function connectToWalletProvider(_x2) {
        return _connectToWalletProvider.apply(this, arguments);
      }

      return connectToWalletProvider;
    }()
    /** Calls the account/convert-oauth api
     * Converts OAuth tokens from some 3rd-party source to OREID Oauth tokens
     * The third-party (e.g. Auth0 or Google) must be registered in the AppRegistration.oauthSettings
     * Returns: OreId issued accessToken and idToken
     * */

  }, {
    key: "convertOauthTokens",
    value: function () {
      var _convertOauthTokens = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(parms) {
        return _regeneratorRuntime().wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                return _context3.abrupt("return", (0,_api__WEBPACK_IMPORTED_MODULE_0__.callApiConvertOauthTokens)(this._oreIdContext, parms));

              case 1:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function convertOauthTokens(_x3) {
        return _convertOauthTokens.apply(this, arguments);
      }

      return convertOauthTokens;
    }()
    /**
     * Converts OAuth accessToken or idToken from some 3rd-party source (e.g. Google) to OreId OAuth accessToken
     * The third-party (e.g. Auth0 or Google) must be registered in the App Registration's oauthSettings
     * If a user does not curently exist that matches the info in the incoming idToken, an error is thrown
     * Does not requires a user to be logged-in (no current accessToken) or apiKey
     * Returns: OreId issued accessToken
     * */

  }, {
    key: "loginWithToken",
    value: function () {
      var _loginWithToken = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(loginOptions) {
        var _yield$this$loginWith, accessToken, error, processId;

        return _regeneratorRuntime().wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                if (!(!(loginOptions !== null && loginOptions !== void 0 && loginOptions.idToken) && !(loginOptions !== null && loginOptions !== void 0 && loginOptions.accessToken))) {
                  _context4.next = 2;
                  break;
                }

                throw new Error('Cant loginWithToken - missing required parameter: accessToken OR idToken');

              case 2:
                _context4.next = 4;
                return this.loginWithAccessOrIdTokenToken(loginOptions);

              case 4:
                _yield$this$loginWith = _context4.sent;
                accessToken = _yield$this$loginWith.accessToken;
                error = _yield$this$loginWith.error;
                processId = _yield$this$loginWith.processId;

                if (error) {
                  _context4.next = 12;
                  break;
                }

                this.accessToken = accessToken; // saves in cache and in local storage

                _context4.next = 12;
                return this.user.getData();

              case 12:
                return _context4.abrupt("return", {
                  accessToken: accessToken,
                  errors: error,
                  processId: processId
                });

              case 13:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      function loginWithToken(_x4) {
        return _loginWithToken.apply(this, arguments);
      }

      return loginWithToken;
    }()
    /** Converts OAuth idToken from some 3rd-party source to OREID Oauth accessTokens
     * The third-party (e.g. Auth0 or Google) must be registered in the AppRegistration.oauthSettings
     * Creates a new OreId user and account from info in the incoming idToken
     * If a matching user already exist, and error is returned
     * Requires a valid idToken but no current accessToken or apiKey
     * Returns: OreId issued accessToken
     * */

  }, {
    key: "newUserWithToken",
    value: function () {
      var _newUserWithToken = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(userOptions) {
        var _yield$this$newAccoun, accessToken, error, processId;

        return _regeneratorRuntime().wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                _context5.next = 2;
                return this.newAccountWithIdToken(userOptions);

              case 2:
                _yield$this$newAccoun = _context5.sent;
                accessToken = _yield$this$newAccoun.accessToken;
                error = _yield$this$newAccoun.error;
                processId = _yield$this$newAccoun.processId;

                if (error) {
                  _context5.next = 10;
                  break;
                }

                this.accessToken = accessToken; // saves in cache and in local storage

                _context5.next = 10;
                return this.user.getData();

              case 10:
                return _context5.abrupt("return", {
                  accessToken: accessToken,
                  errors: error,
                  processId: processId
                });

              case 11:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      function newUserWithToken(_x5) {
        return _newUserWithToken.apply(this, arguments);
      }

      return newUserWithToken;
    }()
    /** Calls api account/login-user-with-token for loginWithToken() (after checking for valid token */

  }, {
    key: "loginWithAccessOrIdTokenToken",
    value:
    /** Calls api account/login-user-with-token for loginWithToken() (after checking for valid token */
    function () {
      var _loginWithAccessOrIdTokenToken = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(params) {
        var accessToken, idToken, tokenCheckError, response;
        return _regeneratorRuntime().wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                accessToken = params.accessToken, idToken = params.idToken;

                // check valid JWT tokens (Note: accessToken can be a JWT or not)
                if (accessToken && _utils_helpers__WEBPACK_IMPORTED_MODULE_5__["default"].jwtDecodeSafe(accessToken)) {
                  tokenCheckError = accessToken ? Auth.checkJwtTokenAndReturnError(accessToken) : null;
                } else {
                  tokenCheckError = idToken ? Auth.checkJwtTokenAndReturnError(idToken) : null;
                }

                if (!tokenCheckError) {
                  _context6.next = 4;
                  break;
                }

                return _context6.abrupt("return", _objectSpread({
                  accessToken: null
                }, tokenCheckError));

              case 4:
                _context6.next = 6;
                return (0,_api__WEBPACK_IMPORTED_MODULE_0__.callApiLoginUserWithToken)(this._oreIdContext, params);

              case 6:
                response = _context6.sent;

                if (!(response !== null && response !== void 0 && response.errorCode)) {
                  this.setAuthResult({
                    accessToken: response === null || response === void 0 ? void 0 : response.accessToken
                  });
                }

                return _context6.abrupt("return", {
                  accessToken: response.accessToken,
                  error: response === null || response === void 0 ? void 0 : response.errorCode,
                  message: response === null || response === void 0 ? void 0 : response.errorMessage,
                  processId: response === null || response === void 0 ? void 0 : response.processId
                });

              case 9:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6, this);
      }));

      function loginWithAccessOrIdTokenToken(_x6) {
        return _loginWithAccessOrIdTokenToken.apply(this, arguments);
      }

      return loginWithAccessOrIdTokenToken;
    }()
    /** Calls api account/new-user-with-token for newUserWithToken() (after checking for valid token */

  }, {
    key: "newAccountWithIdToken",
    value: function () {
      var _newAccountWithIdToken = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7(params) {
        var idToken, idTokenCheckError, response;
        return _regeneratorRuntime().wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                idToken = params.idToken; // check valid ifToken

                idTokenCheckError = idToken ? Auth.checkJwtTokenAndReturnError(idToken) : null;

                if (!idTokenCheckError) {
                  _context7.next = 4;
                  break;
                }

                return _context7.abrupt("return", _objectSpread({
                  accessToken: null
                }, idTokenCheckError));

              case 4:
                _context7.next = 6;
                return (0,_api__WEBPACK_IMPORTED_MODULE_0__.callApiNewUserWithToken)(this._oreIdContext, params);

              case 6:
                response = _context7.sent;

                if (!(response !== null && response !== void 0 && response.errorCode)) {
                  this.setAuthResult({
                    accessToken: response === null || response === void 0 ? void 0 : response.accessToken
                  });
                }

                return _context7.abrupt("return", {
                  accessToken: response.accessToken,
                  error: response === null || response === void 0 ? void 0 : response.errorCode,
                  message: response === null || response === void 0 ? void 0 : response.errorMessage,
                  processId: response === null || response === void 0 ? void 0 : response.processId
                });

              case 9:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee7, this);
      }));

      function newAccountWithIdToken(_x7) {
        return _newAccountWithIdToken.apply(this, arguments);
      }

      return newAccountWithIdToken;
    }()
    /** clear accessToken and user */

  }, {
    key: "logout",
    value: function logout() {
      this.clearAccessToken();
      this._user = null;
    }
    /** Returns a fully formed url to redirect the user's browser to login using ORE ID
     *  This function calls the /auth web endpoint
     *  Returns: Callback returns account, and optionally accessToken and/or idToken for user */

  }, {
    key: "getLoginUrl",
    value: function () {
      var _getLoginUrl = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8(loginOptions) {
        var _ref, code, email, idToken, phone, provider, state, linkToAccount, returnAccessToken, returnIdToken, _this$_oreIdContext$o, authCallbackUrl, backgroundColor, args, loginUrl;

        return _regeneratorRuntime().wrap(function _callee8$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                _ref = loginOptions || {}, code = _ref.code, email = _ref.email, idToken = _ref.idToken, phone = _ref.phone, provider = _ref.provider, state = _ref.state, linkToAccount = _ref.linkToAccount, returnAccessToken = _ref.returnAccessToken, returnIdToken = _ref.returnIdToken;
                _this$_oreIdContext$o = this._oreIdContext.options, authCallbackUrl = _this$_oreIdContext$o.authCallbackUrl, backgroundColor = _this$_oreIdContext$o.backgroundColor;
                args = {
                  code: code,
                  email: email,
                  idToken: idToken,
                  phone: phone,
                  provider: provider,
                  backgroundColor: backgroundColor,
                  callbackUrl: authCallbackUrl,
                  state: state,
                  linkToAccount: linkToAccount,
                  returnAccessToken: _utils_helpers__WEBPACK_IMPORTED_MODULE_5__["default"].isNullOrEmpty(returnAccessToken) ? true : returnAccessToken,
                  // if returnAccessToken not specified, default to true
                  returnIdToken: returnIdToken
                };
                _context8.next = 5;
                return (0,_core_urlGenerators__WEBPACK_IMPORTED_MODULE_1__.getOreIdAuthUrl)(this._oreIdContext, args);

              case 5:
                loginUrl = _context8.sent;
                return _context8.abrupt("return", {
                  loginUrl: loginUrl,
                  errors: null
                });

              case 7:
              case "end":
                return _context8.stop();
            }
          }
        }, _callee8, this);
      }));

      function getLoginUrl(_x8) {
        return _getLoginUrl.apply(this, arguments);
      }

      return getLoginUrl;
    }()
    /** Extracts and returns the response parameters on the /auth callback URL string
     *  Applies accessToken and idToken (if included on the url) to local state
     */

  }, {
    key: "handleAuthCallback",
    value: function handleAuthCallback(callbackUrlString) {
      // Parses error codes and returns an errors array
      // (if there is an error_code param sent back - can have more than one error code - seperated by a ‘&’ delimeter
      var _Helpers$extractDataF = _utils_helpers__WEBPACK_IMPORTED_MODULE_5__["default"].extractDataFromCallbackUrl(callbackUrlString),
          accessToken = _Helpers$extractDataF.access_token,
          account = _Helpers$extractDataF.account,
          idToken = _Helpers$extractDataF.id_token,
          errors = _Helpers$extractDataF.errors,
          processId = _Helpers$extractDataF.process_id,
          state = _Helpers$extractDataF.state;

      var response = {
        account: account
      };
      if (errors) response.errors = errors;
      if (processId) response.processId = processId;
      if (state) response.state = state;
      if (accessToken) response.accessToken = accessToken;
      if (idToken) response.idToken = idToken;

      if (!errors) {
        this.setAuthResult(response);
      } // clear the busy indicator now that we've finsihed the auth flow


      this._oreIdContext.setIsBusy(false);

      return response;
    }
    /** store response from auth flow (accountName, accessToken, idToken) in localState */

  }, {
    key: "setAuthResult",
    value: function setAuthResult(authResponse) {
      var accessToken = authResponse.accessToken,
          idToken = authResponse.idToken;
      if (!accessToken) throw Error('Cant setAuthResult. accessToken is missing');

      this._accessTokenHelper.setIdToken(null); // clear the existing idToken first (so set accessToken wont throw a mismatch when set)


      this.accessToken = accessToken; // saves the token to localstorage

      if (idToken) {
        this._accessTokenHelper.setIdToken(idToken);
      }
    }
  }], [{
    key: "checkJwtTokenAndReturnError",
    value: function checkJwtTokenAndReturnError(jwtTokenString) {
      try {
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        var accessTokenHelper = new _accessTokenHelper__WEBPACK_IMPORTED_MODULE_7__.AccessTokenHelper(jwtTokenString, true);
      } catch (error) {
        return {
          error: 'token_invalid',
          message: 'token invalid or corrupt - must be a JWT Oauth2 token'
        };
      }

      return null;
    }
  }]);

  return Auth;
}(_utils_observable__WEBPACK_IMPORTED_MODULE_6__.Observable);

/***/ }),
/* 2 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ApiEndpoint": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_2__.ApiEndpoint),
/* harmony export */   "RequestType": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_2__.RequestType),
/* harmony export */   "assertHasAccessToken": () => (/* reexport safe */ _helpers__WEBPACK_IMPORTED_MODULE_1__.assertHasAccessToken),
/* harmony export */   "assertHasApiKey": () => (/* reexport safe */ _helpers__WEBPACK_IMPORTED_MODULE_1__.assertHasApiKey),
/* harmony export */   "assertHasApiKeyOrAccessToken": () => (/* reexport safe */ _helpers__WEBPACK_IMPORTED_MODULE_1__.assertHasApiKeyOrAccessToken),
/* harmony export */   "assertHeaderhasRequiredValues": () => (/* reexport safe */ _helpers__WEBPACK_IMPORTED_MODULE_1__.assertHeaderhasRequiredValues),
/* harmony export */   "assertParamsHaveAtLeastOneOfValues": () => (/* reexport safe */ _helpers__WEBPACK_IMPORTED_MODULE_1__.assertParamsHaveAtLeastOneOfValues),
/* harmony export */   "assertParamsHaveOnlyOneOfValues": () => (/* reexport safe */ _helpers__WEBPACK_IMPORTED_MODULE_1__.assertParamsHaveOnlyOneOfValues),
/* harmony export */   "assertParamsHaveRequiredValues": () => (/* reexport safe */ _helpers__WEBPACK_IMPORTED_MODULE_1__.assertParamsHaveRequiredValues),
/* harmony export */   "callApiAddPermission": () => (/* reexport safe */ _endpoints__WEBPACK_IMPORTED_MODULE_0__.callApiAddPermission),
/* harmony export */   "callApiCanAutosignTransaction": () => (/* reexport safe */ _endpoints__WEBPACK_IMPORTED_MODULE_0__.callApiCanAutosignTransaction),
/* harmony export */   "callApiConvertOauthTokens": () => (/* reexport safe */ _endpoints__WEBPACK_IMPORTED_MODULE_0__.callApiConvertOauthTokens),
/* harmony export */   "callApiCustodialMigrateAccount": () => (/* reexport safe */ _endpoints__WEBPACK_IMPORTED_MODULE_0__.callApiCustodialMigrateAccount),
/* harmony export */   "callApiCustodialNewAccount": () => (/* reexport safe */ _endpoints__WEBPACK_IMPORTED_MODULE_0__.callApiCustodialNewAccount),
/* harmony export */   "callApiCustodialSignString": () => (/* reexport safe */ _endpoints__WEBPACK_IMPORTED_MODULE_0__.callApiCustodialSignString),
/* harmony export */   "callApiCustodialSignTransaction": () => (/* reexport safe */ _endpoints__WEBPACK_IMPORTED_MODULE_0__.callApiCustodialSignTransaction),
/* harmony export */   "callApiDeleteTestUser": () => (/* reexport safe */ _endpoints__WEBPACK_IMPORTED_MODULE_0__.callApiDeleteTestUser),
/* harmony export */   "callApiGetAppToken": () => (/* reexport safe */ _endpoints__WEBPACK_IMPORTED_MODULE_0__.callApiGetAppToken),
/* harmony export */   "callApiGetConfig": () => (/* reexport safe */ _endpoints__WEBPACK_IMPORTED_MODULE_0__.callApiGetConfig),
/* harmony export */   "callApiGetUser": () => (/* reexport safe */ _endpoints__WEBPACK_IMPORTED_MODULE_0__.callApiGetUser),
/* harmony export */   "callApiLoginUserWithToken": () => (/* reexport safe */ _endpoints__WEBPACK_IMPORTED_MODULE_0__.callApiLoginUserWithToken),
/* harmony export */   "callApiNewUserWithToken": () => (/* reexport safe */ _endpoints__WEBPACK_IMPORTED_MODULE_0__.callApiNewUserWithToken),
/* harmony export */   "callApiPasswordLessSendCode": () => (/* reexport safe */ _endpoints__WEBPACK_IMPORTED_MODULE_0__.callApiPasswordLessSendCode),
/* harmony export */   "callApiPasswordLessVerifyCode": () => (/* reexport safe */ _endpoints__WEBPACK_IMPORTED_MODULE_0__.callApiPasswordLessVerifyCode),
/* harmony export */   "callApiSignTransaction": () => (/* reexport safe */ _endpoints__WEBPACK_IMPORTED_MODULE_0__.callApiSignTransaction),
/* harmony export */   "extractProcessIdFromData": () => (/* reexport safe */ _helpers__WEBPACK_IMPORTED_MODULE_1__.extractProcessIdFromData)
/* harmony export */ });
/* harmony import */ var _endpoints__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(3);
/* harmony import */ var _helpers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(16);
/* harmony import */ var _models__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(6);




/***/ }),
/* 3 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "callApiAddPermission": () => (/* reexport safe */ _addPermission__WEBPACK_IMPORTED_MODULE_0__.callApiAddPermission),
/* harmony export */   "callApiCanAutosignTransaction": () => (/* reexport safe */ _canAutoSign__WEBPACK_IMPORTED_MODULE_2__.callApiCanAutosignTransaction),
/* harmony export */   "callApiConvertOauthTokens": () => (/* reexport safe */ _convertOauth__WEBPACK_IMPORTED_MODULE_3__.callApiConvertOauthTokens),
/* harmony export */   "callApiCustodialMigrateAccount": () => (/* reexport safe */ _custodialMigrateAccount__WEBPACK_IMPORTED_MODULE_4__.callApiCustodialMigrateAccount),
/* harmony export */   "callApiCustodialNewAccount": () => (/* reexport safe */ _custodialNewAccount__WEBPACK_IMPORTED_MODULE_5__.callApiCustodialNewAccount),
/* harmony export */   "callApiCustodialSignString": () => (/* reexport safe */ _custodialSignString__WEBPACK_IMPORTED_MODULE_6__.callApiCustodialSignString),
/* harmony export */   "callApiCustodialSignTransaction": () => (/* reexport safe */ _signTransaction__WEBPACK_IMPORTED_MODULE_14__.callApiCustodialSignTransaction),
/* harmony export */   "callApiDeleteTestUser": () => (/* reexport safe */ _deleteTestUser__WEBPACK_IMPORTED_MODULE_7__.callApiDeleteTestUser),
/* harmony export */   "callApiGetAppToken": () => (/* reexport safe */ _appToken__WEBPACK_IMPORTED_MODULE_1__.callApiGetAppToken),
/* harmony export */   "callApiGetConfig": () => (/* reexport safe */ _getConfig__WEBPACK_IMPORTED_MODULE_8__.callApiGetConfig),
/* harmony export */   "callApiGetUser": () => (/* reexport safe */ _getUser__WEBPACK_IMPORTED_MODULE_9__.callApiGetUser),
/* harmony export */   "callApiLoginUserWithToken": () => (/* reexport safe */ _loginUserWithToken__WEBPACK_IMPORTED_MODULE_10__.callApiLoginUserWithToken),
/* harmony export */   "callApiNewUserWithToken": () => (/* reexport safe */ _newUserWithToken__WEBPACK_IMPORTED_MODULE_11__.callApiNewUserWithToken),
/* harmony export */   "callApiPasswordLessSendCode": () => (/* reexport safe */ _passwordLessSendCode__WEBPACK_IMPORTED_MODULE_12__.callApiPasswordLessSendCode),
/* harmony export */   "callApiPasswordLessVerifyCode": () => (/* reexport safe */ _passwordLessVerifyCode__WEBPACK_IMPORTED_MODULE_13__.callApiPasswordLessVerifyCode),
/* harmony export */   "callApiSignTransaction": () => (/* reexport safe */ _signTransaction__WEBPACK_IMPORTED_MODULE_14__.callApiSignTransaction)
/* harmony export */ });
/* harmony import */ var _addPermission__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(4);
/* harmony import */ var _appToken__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(26);
/* harmony import */ var _canAutoSign__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(27);
/* harmony import */ var _convertOauth__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(28);
/* harmony import */ var _custodialMigrateAccount__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(29);
/* harmony import */ var _custodialNewAccount__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(30);
/* harmony import */ var _custodialSignString__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(31);
/* harmony import */ var _deleteTestUser__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(32);
/* harmony import */ var _getConfig__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(33);
/* harmony import */ var _getUser__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(34);
/* harmony import */ var _loginUserWithToken__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(35);
/* harmony import */ var _newUserWithToken__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(36);
/* harmony import */ var _passwordLessSendCode__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(37);
/* harmony import */ var _passwordLessVerifyCode__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(38);
/* harmony import */ var _signTransaction__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(39);
















/***/ }),
/* 4 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "callApiAddPermission": () => (/* binding */ callApiAddPermission)
/* harmony export */ });
/* harmony import */ var _models__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(5);
/* harmony import */ var _helpers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(16);
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, $Symbol = "function" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, ""); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return generator._invoke = function (innerFn, self, context) { var state = "suspendedStart"; return function (method, arg) { if ("executing" === state) throw new Error("Generator is already running"); if ("completed" === state) { if ("throw" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) { if ("suspendedStart" === state) throw state = "completed", context.arg; context.dispatchException(context.arg); } else "return" === context.method && context.abrupt("return", context.arg); state = "executing"; var record = tryCatch(innerFn, self, context); if ("normal" === record.type) { if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg); } }; }(innerFn, self, context), generator; } function tryCatch(fn, obj, arg) { try { return { type: "normal", arg: fn.call(obj, arg) }; } catch (err) { return { type: "throw", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { ["next", "throw", "return"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if ("throw" !== record.type) { var result = record.arg, value = result.value; return value && "object" == _typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke("next", value, resolve, reject); }, function (err) { invoke("throw", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke("throw", error, resolve, reject); }); } reject(record.arg); } var previousPromise; this._invoke = function (method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); }; } function maybeInvokeDelegate(delegate, context) { var method = delegate.iterator[context.method]; if (undefined === method) { if (context.delegate = null, "throw" === context.method) { if (delegate.iterator["return"] && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method)) return ContinueSentinel; context.method = "throw", context.arg = new TypeError("The iterator does not provide a 'throw' method"); } return ContinueSentinel; } var record = tryCatch(method, delegate.iterator, context.arg); if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = "normal", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: "root" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if ("function" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, "constructor", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) { var ctor = "function" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, "toString", function () { return "[object Generator]"; }), exports.keys = function (object) { var keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if ("throw" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if ("root" === entry.tryLoc) return handle("end"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error("try statement without catch or finally"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if ("throw" === record.type) throw record.arg; return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, "catch": function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if ("throw" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, "next" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }




/**
 *  Call api account/addPermission
 *  Adds a public key to a user account with a specific permission name
 * The permission name must be one defined in the App Registration record (Which defines its parent permission as well as preventing adding rougue permissions)
 * This feature allows your app to hold private keys locally (for certain actions enabled by the permission) while having the associated public key in the user's account
 * chainAccount = name of the account on the chain - 12/13-digit string on EOS and Ethereum Address on ETH - it may be the same as the account
 * chainNetwork = one of the valid options defined by the system - Ex: 'eos_main', 'eos_jungle', 'eos_kylin", 'ore_main', 'eos_test', etc.
 * */
function callApiAddPermission(_x, _x2) {
  return _callApiAddPermission.apply(this, arguments);
}

function _callApiAddPermission() {
  _callApiAddPermission = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(oreIdContext, params) {
    var apiName, account, permission, provider, parentPermission, optionalParams, queryParams, response;
    return _regeneratorRuntime().wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            apiName = _models__WEBPACK_IMPORTED_MODULE_0__.ApiEndpoint.AddPermission;
            (0,_helpers__WEBPACK_IMPORTED_MODULE_1__.assertHasApiKeyOrAccessToken)(oreIdContext, apiName);
            (0,_helpers__WEBPACK_IMPORTED_MODULE_1__.assertParamsHaveRequiredValues)(params, ['account', 'chainAccount', 'chainNetwork', 'permission', 'publicKey'], apiName);
            account = params.account, permission = params.permission, provider = params.provider, parentPermission = params.parentPermission;
            optionalParams = {};
            if (provider) optionalParams['wallet-type'] = provider;
            if (parentPermission) optionalParams['parent-permission'] = parentPermission;
            queryParams = _objectSpread({
              account: account,
              'chain-account': params.chainAccount,
              'chain-network': params.chainNetwork,
              'public-key': params.publicKey,
              permission: permission
            }, optionalParams);
            _context.next = 10;
            return oreIdContext.callOreIdApi(_models__WEBPACK_IMPORTED_MODULE_0__.RequestType.Get, _models__WEBPACK_IMPORTED_MODULE_0__.ApiEndpoint.AddPermission, queryParams, null);

          case 10:
            response = _context.sent;
            return _context.abrupt("return", response);

          case 12:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _callApiAddPermission.apply(this, arguments);
}

/***/ }),
/* 5 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AccountType": () => (/* reexport safe */ _common_models__WEBPACK_IMPORTED_MODULE_2__.AccountType),
/* harmony export */   "ApiEndpoint": () => (/* reexport safe */ _api_models__WEBPACK_IMPORTED_MODULE_0__.ApiEndpoint),
/* harmony export */   "ApiKeyUsedFor": () => (/* reexport safe */ _common_models__WEBPACK_IMPORTED_MODULE_2__.ApiKeyUsedFor),
/* harmony export */   "AuthProvider": () => (/* reexport safe */ _common_models__WEBPACK_IMPORTED_MODULE_2__.AuthProvider),
/* harmony export */   "ChainNetwork": () => (/* reexport safe */ _common_models__WEBPACK_IMPORTED_MODULE_2__.ChainNetwork),
/* harmony export */   "ChainPlatformType": () => (/* reexport safe */ _common_models__WEBPACK_IMPORTED_MODULE_2__.ChainPlatformType),
/* harmony export */   "ConfigType": () => (/* reexport safe */ _common_models__WEBPACK_IMPORTED_MODULE_2__.ConfigType),
/* harmony export */   "ExternalWalletInterface": () => (/* reexport safe */ _wallets_models__WEBPACK_IMPORTED_MODULE_8__.ExternalWalletInterface),
/* harmony export */   "ExternalWalletType": () => (/* reexport safe */ _common_models__WEBPACK_IMPORTED_MODULE_2__.ExternalWalletType),
/* harmony export */   "LoginProvider": () => (/* reexport safe */ _common_models__WEBPACK_IMPORTED_MODULE_2__.LoginProvider),
/* harmony export */   "RecoverAccountAction": () => (/* reexport safe */ _core_models__WEBPACK_IMPORTED_MODULE_3__.RecoverAccountAction),
/* harmony export */   "RequestType": () => (/* reexport safe */ _api_models__WEBPACK_IMPORTED_MODULE_0__.RequestType),
/* harmony export */   "SignStringMethod": () => (/* reexport safe */ _webWidget_models__WEBPACK_IMPORTED_MODULE_9__.SignStringMethod),
/* harmony export */   "WebWidgetAction": () => (/* reexport safe */ _webWidget_models__WEBPACK_IMPORTED_MODULE_9__.WebWidgetAction),
/* harmony export */   "WidgetVersion": () => (/* reexport safe */ _webWidget_models__WEBPACK_IMPORTED_MODULE_9__.WidgetVersion)
/* harmony export */ });
/* harmony import */ var _api_models__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(6);
/* harmony import */ var _auth_models__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(7);
/* harmony import */ var _common_models__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(8);
/* harmony import */ var _core_models__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(9);
/* harmony import */ var _user_models__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(10);
/* harmony import */ var _transaction_models__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(11);
/* harmony import */ var _transit_models__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(12);
/* harmony import */ var _ual_models__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(13);
/* harmony import */ var _wallets_models__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(14);
/* harmony import */ var _webWidget_models__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(15);











/***/ }),
/* 6 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ApiEndpoint": () => (/* binding */ ApiEndpoint),
/* harmony export */   "RequestType": () => (/* binding */ RequestType)
/* harmony export */ });
var RequestType;

(function (RequestType) {
  RequestType["Get"] = "get";
  RequestType["Post"] = "put";
})(RequestType || (RequestType = {}));

var ApiEndpoint;
/** Typical API Response (when no data returned) */

(function (ApiEndpoint) {
  ApiEndpoint["AddPermission"] = "account/add-permission";
  ApiEndpoint["AppToken"] = "app-token";
  ApiEndpoint["CanAutoSign"] = "transaction/can-auto-sign";
  ApiEndpoint["ConvertOauthTokens"] = "account/convert-oauth";
  ApiEndpoint["CustodialMigrateAccount"] = "custodial/migrate-account";
  ApiEndpoint["CustodialNewAccount"] = "custodial/new-user";
  ApiEndpoint["CustodialSignString"] = "custodial/sign-string";
  ApiEndpoint["DeleteTestUser"] = "account/delete-test-user";
  ApiEndpoint["CustodialSign"] = "custodial/sign";
  ApiEndpoint["GetUser"] = "account/user";
  ApiEndpoint["GetConfig"] = "services/config";
  ApiEndpoint["LoginUserWithToken"] = "account/login-user-with-token";
  ApiEndpoint["NewUserWithToken"] = "account/new-user-with-token";
  ApiEndpoint["PasswordLessSendCode"] = "account/login-passwordless-send-code";
  ApiEndpoint["PasswordLessVerifyCode"] = "account/login-passwordless-verify-code";
  ApiEndpoint["TransactionSign"] = "transaction/sign";
  ApiEndpoint["UpdateDelayWalletSetup"] = "account/update-delay-wallet-setup";
})(ApiEndpoint || (ApiEndpoint = {}));

/***/ }),
/* 7 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);


/***/ }),
/* 8 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AccountType": () => (/* binding */ AccountType),
/* harmony export */   "ApiKeyUsedFor": () => (/* binding */ ApiKeyUsedFor),
/* harmony export */   "AuthProvider": () => (/* binding */ AuthProvider),
/* harmony export */   "ChainNetwork": () => (/* binding */ ChainNetwork),
/* harmony export */   "ChainPlatformType": () => (/* binding */ ChainPlatformType),
/* harmony export */   "ConfigType": () => (/* binding */ ConfigType),
/* harmony export */   "ExternalWalletType": () => (/* binding */ ExternalWalletType),
/* harmony export */   "LoginProvider": () => (/* binding */ LoginProvider)
/* harmony export */ });
var ConfigType;
/** Flavor of chain network */

(function (ConfigType) {
  ConfigType["Chains"] = "chains";
})(ConfigType || (ConfigType = {}));

var ChainPlatformType;
/** Named chain network */

(function (ChainPlatformType) {
  ChainPlatformType["algorand"] = "algorand";
  ChainPlatformType["eos"] = "eos";
  ChainPlatformType["ethereum"] = "ethereum";
  ChainPlatformType["ore"] = "ore";
})(ChainPlatformType || (ChainPlatformType = {}));

var ChainNetwork;
/** Physical structure of account */

(function (ChainNetwork) {
  ChainNetwork["AlgoMain"] = "algo_main";
  ChainNetwork["AlgoBeta"] = "algo_beta";
  ChainNetwork["AlgoTest"] = "algo_test";
  ChainNetwork["AvalancheC_Main"] = "avalanchec_main";
  ChainNetwork["AvalancheC_Fuji"] = "avalanchec_fuji";
  ChainNetwork["DspEosKylin1"] = "kylin-dsp-1.liquidapps.io";
  ChainNetwork["DspEosKylin2"] = "kylin-dsp-2.liquidapps.io";
  ChainNetwork["DspMoonlighting"] = "eos_moon_blockstartdsp_com";
  ChainNetwork["DspMoonlightingTest"] = "eos_moontest_blockstartdsp_com";
  ChainNetwork["DosMain"] = "dos_main";
  ChainNetwork["DosTest"] = "dos_test";
  ChainNetwork["EthMain"] = "eth_main";
  ChainNetwork["EthRopsten"] = "eth_ropsten";
  ChainNetwork["EthRinkeby"] = "eth_rinkeby";
  ChainNetwork["EthGoerli"] = "eth_goerli";
  ChainNetwork["EosMain"] = "eos_main";
  ChainNetwork["EosKylin"] = "eos_kylin";
  ChainNetwork["EosJungle"] = "eos_jungle";
  ChainNetwork["MigrateEosMain"] = "migrate_eos_main";
  ChainNetwork["OreMain"] = "ore_main";
  ChainNetwork["OreTest"] = "ore_test";
  ChainNetwork["PolygonMain"] = "polygon_main";
  ChainNetwork["PolygonMumbai"] = "polygon_mumbai";
  ChainNetwork["TelosMain"] = "telos_main";
  ChainNetwork["TelosTest"] = "telos_test";
  ChainNetwork["TelosEvmMain"] = "telosevm_main";
  ChainNetwork["TelosEvmTest"] = "telosevm_test";
  ChainNetwork["UxMain"] = "ux_main";
  ChainNetwork["WaxMain"] = "wax_main";
  ChainNetwork["WaxTest"] = "wax_test";
})(ChainNetwork || (ChainNetwork = {}));

var AccountType;

(function (AccountType) {
  AccountType["Native"] = "native";
  AccountType["Pending"] = "pending";
  AccountType["VirtualLiquid"] = "liquid";
  AccountType["VirtualNested"] = "nested";
})(AccountType || (AccountType = {}));

var LoginProvider;

(function (LoginProvider) {
  LoginProvider["Custodial"] = "custodial";
  LoginProvider["Apple"] = "apple";
  LoginProvider["Email"] = "email";
  LoginProvider["Facebook"] = "facebook";
  LoginProvider["Github"] = "github";
  LoginProvider["Google"] = "google";
  LoginProvider["Instagram"] = "instagram";
  LoginProvider["Kakao"] = "kakao";
  LoginProvider["Line"] = "line";
  LoginProvider["LinkedIn"] = "linkedin";
  LoginProvider["Phone"] = "phone";
  LoginProvider["Twitch"] = "twitch";
  LoginProvider["Twitter"] = "twitter";
})(LoginProvider || (LoginProvider = {}));

var ExternalWalletType;
/** All auth providers - including OreId login types (eg 'Facebook') and wallets (eg 'Scatter') */

(function (ExternalWalletType) {
  ExternalWalletType["AlgoSigner"] = "algosigner";
  ExternalWalletType["Anchor"] = "anchor";
  ExternalWalletType["Keycat"] = "keycat";
  ExternalWalletType["Ledger"] = "ledger";
  ExternalWalletType["Lynx"] = "lynx";
  ExternalWalletType["Meetone"] = "meetone";
  ExternalWalletType["Metro"] = "metro";
  ExternalWalletType["Portis"] = "portis";
  ExternalWalletType["Scatter"] = "scatter";
  ExternalWalletType["SimpleEos"] = "simpleos";
  ExternalWalletType["TokenPocket"] = "tokenpocket";
  ExternalWalletType["WalletConnect"] = "walletconnect";
  ExternalWalletType["Web3"] = "web3";
  ExternalWalletType["WhaleVault"] = "whalevault";
  ExternalWalletType["Wombat"] = "wombat";
})(ExternalWalletType || (ExternalWalletType = {}));

var AuthProvider;

(function (AuthProvider) {
  AuthProvider["Custodial"] = "custodial";
  AuthProvider["Apple"] = "apple";
  AuthProvider["Email"] = "email";
  AuthProvider["Facebook"] = "facebook";
  AuthProvider["Github"] = "github";
  AuthProvider["Google"] = "google";
  AuthProvider["Instagram"] = "instagram";
  AuthProvider["Kakao"] = "kakao";
  AuthProvider["Line"] = "line";
  AuthProvider["LinkedIn"] = "linkedin";
  AuthProvider["Phone"] = "phone";
  AuthProvider["Twitch"] = "twitch";
  AuthProvider["Twitter"] = "twitter";
  AuthProvider["AlgoSigner"] = "algosigner";
  AuthProvider["Anchor"] = "anchor";
  AuthProvider["Keycat"] = "keycat";
  AuthProvider["Ledger"] = "ledger";
  AuthProvider["Lynx"] = "lynx";
  AuthProvider["Meetone"] = "meetone";
  AuthProvider["Metro"] = "metro";
  AuthProvider["Portis"] = "portis";
  AuthProvider["Scatter"] = "scatter";
  AuthProvider["SimpleEos"] = "simpleos";
  AuthProvider["TokenPocket"] = "tokenpocket";
  AuthProvider["WalletConnect"] = "walletconnect";
  AuthProvider["Web3"] = "web3";
  AuthProvider["WhaleVault"] = "whalevault";
  AuthProvider["Wombat"] = "wombat";
  AuthProvider["OreId"] = "oreid";
})(AuthProvider || (AuthProvider = {}));

var ApiKeyUsedFor;
/** type returned by oreid sevice config endpoint for chains */

(function (ApiKeyUsedFor) {
  ApiKeyUsedFor["AccountMigration"] = "accountMigration";
  ApiKeyUsedFor["Airdrop"] = "airdrop";
  ApiKeyUsedFor["AdminAccess"] = "adminAccess";
  ApiKeyUsedFor["AutoSigning"] = "autoSigning";
  ApiKeyUsedFor["ChangePassword"] = "changePassword";
  ApiKeyUsedFor["CreateUser"] = "createUser";
  ApiKeyUsedFor["ProxySigning"] = "proxySigning";
  ApiKeyUsedFor["TokenFunding"] = "tokenFunding";
})(ApiKeyUsedFor || (ApiKeyUsedFor = {}));

/***/ }),
/* 9 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "RecoverAccountAction": () => (/* binding */ RecoverAccountAction)
/* harmony export */ });
// NOTE: We are only using types here - Express library won't be emitted in the build here
var RecoverAccountAction;
/** For creating a new chainAccount in an existing wallet */

(function (RecoverAccountAction) {
  RecoverAccountAction["Republic"] = "republic";
})(RecoverAccountAction || (RecoverAccountAction = {}));

/***/ }),
/* 10 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);


/***/ }),
/* 11 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);


/***/ }),
/* 12 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);


/***/ }),
/* 13 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);


/***/ }),
/* 14 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ExternalWalletInterface": () => (/* binding */ ExternalWalletInterface)
/* harmony export */ });
var ExternalWalletInterface;

(function (ExternalWalletInterface) {
  ExternalWalletInterface["Transit"] = "transit";
  ExternalWalletInterface["Ual"] = "ual";
})(ExternalWalletInterface || (ExternalWalletInterface = {}));

/***/ }),
/* 15 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "SignStringMethod": () => (/* binding */ SignStringMethod),
/* harmony export */   "WebWidgetAction": () => (/* binding */ WebWidgetAction),
/* harmony export */   "WidgetVersion": () => (/* binding */ WidgetVersion)
/* harmony export */ });
/* eslint-disable @typescript-eslint/indent */
// IMPORTANT: These types are copied from oreid-service webwidget code

/** version of widget served by server that matches these types */
var WidgetVersion = '1';
/** Subset of OreIdOptions used by widget */

/** Actions supported by widget */
var WebWidgetAction;
/** Alternative method to sign a transaction or string (chain specific) */

(function (WebWidgetAction) {
  WebWidgetAction["Auth"] = "auth";
  WebWidgetAction["Logout"] = "logout";
  WebWidgetAction["NewChainAccount"] = "newChainAccount";
  WebWidgetAction["RecoverAccount"] = "recoverAccount";
  WebWidgetAction["Sign"] = "sign";
  WebWidgetAction["Buy"] = "buy";
  WebWidgetAction["KeyExport"] = "keyExport";
})(WebWidgetAction || (WebWidgetAction = {}));

var SignStringMethod;
/** params for Logout action */

(function (SignStringMethod) {
  SignStringMethod["EthereumPersonalSign"] = "ethereum.personal-sign";
  SignStringMethod["EthereumSignTypedData"] = "ethereum.sign-typed-data";
  SignStringMethod["EthereumSign"] = "ethereum.eth-sign";
})(SignStringMethod || (SignStringMethod = {}));

/***/ }),
/* 16 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "assertHasAccessToken": () => (/* binding */ assertHasAccessToken),
/* harmony export */   "assertHasApiKey": () => (/* binding */ assertHasApiKey),
/* harmony export */   "assertHasApiKeyOrAccessToken": () => (/* binding */ assertHasApiKeyOrAccessToken),
/* harmony export */   "assertHeaderhasRequiredValues": () => (/* binding */ assertHeaderhasRequiredValues),
/* harmony export */   "assertParamsHaveAtLeastOneOfValues": () => (/* binding */ assertParamsHaveAtLeastOneOfValues),
/* harmony export */   "assertParamsHaveOnlyOneOfValues": () => (/* binding */ assertParamsHaveOnlyOneOfValues),
/* harmony export */   "assertParamsHaveRequiredValues": () => (/* binding */ assertParamsHaveRequiredValues),
/* harmony export */   "extractProcessIdFromData": () => (/* binding */ extractProcessIdFromData)
/* harmony export */ });
/* harmony import */ var _utils_helpers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(17);
/* eslint-disable @typescript-eslint/default-param-last */

var isNullOrEmpty = _utils_helpers__WEBPACK_IMPORTED_MODULE_0__["default"].isNullOrEmpty; // ---- API Helper functions

/** check the header of the request for each required param in paramNames */

function assertHeaderhasRequiredValues() {
  var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var paramNames = arguments.length > 1 ? arguments[1] : undefined;
  var apiName = arguments.length > 2 ? arguments[2] : undefined;
  var missing = [];
  paramNames.forEach(function (p) {
    if (isNullOrEmpty(params[p])) {
      missing.push(p);
    }
  });

  if (!isNullOrEmpty(missing)) {
    throw new Error("Missing required parameter(s) in request header for API ".concat(apiName, ": ").concat(missing.join(', ')));
  }
}
/** Check that we have an apiKey or accessToken */

function assertHasApiKeyOrAccessToken(oreIdContext, apiName) {
  var _oreIdContext$options;

  if (!oreIdContext.accessToken && !((_oreIdContext$options = oreIdContext.options) !== null && _oreIdContext$options !== void 0 && _oreIdContext$options.apiKey)) {
    throw new Error("Missing required header for API ".concat(apiName, ": Must have a valid user accessToken or options.apiKey"));
  }
}
/** Check that we have an accessToken */

function assertHasAccessToken(oreIdContext, apiName) {
  if (!oreIdContext.accessToken) {
    throw new Error("Missing required header for API ".concat(apiName, ": Must have a valid user accessToken"));
  }
}
/** Check that we have an apiKey */

function assertHasApiKey(oreIdContext, usedFor, apiName) {
  var _oreIdContext$options2;

  if (!((_oreIdContext$options2 = oreIdContext.options) !== null && _oreIdContext$options2 !== void 0 && _oreIdContext$options2.apiKey)) {
    var usedFprMsg = usedFor ? " - with ".concat(usedFor, " right.") : '.';
    throw new Error("Missing required header for API ".concat(apiName, ": Must have an options.apiKey").concat(usedFprMsg));
  }
}
/** Check API params for each required param in paramNames */

function assertParamsHaveRequiredValues() {
  var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var paramNames = arguments.length > 1 ? arguments[1] : undefined;
  var apiName = arguments.length > 2 ? arguments[2] : undefined;
  var missing = [];
  paramNames.forEach(function (p) {
    if (isNullOrEmpty(params[p])) {
      missing.push(p);
    }
  });

  if (!isNullOrEmpty(missing)) {
    throw new Error("Missing required parameter(s) for API ".concat(apiName, ": ").concat(missing.join(', ')));
  }
}
/** Check API params - must include at least one of the params in the list */

function assertParamsHaveAtLeastOneOfValues() {
  var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var paramNames = arguments.length > 1 ? arguments[1] : undefined;
  var apiName = arguments.length > 2 ? arguments[2] : undefined;
  var matches = paramNames.filter(function (p) {
    return !isNullOrEmpty(params[p]);
  });

  if (matches.length === 0) {
    throw new Error("Missing at least one of these parameter(s) for API ".concat(apiName, ": ").concat(paramNames.join(', ')));
  }
}
/** Check API params - must include one and only one of params in the list */

function assertParamsHaveOnlyOneOfValues() {
  var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var paramNames = arguments.length > 1 ? arguments[1] : undefined;
  var apiName = arguments.length > 2 ? arguments[2] : undefined;
  var matches = paramNames.filter(function (p) {
    return !isNullOrEmpty(params[p]);
  });

  if (matches.length > 1) {
    throw new Error("You can only provide one of these parameter(s) for API ".concat(apiName, ": ").concat(paramNames.join(', ')));
  }
}
/** remove processId from data */

function extractProcessIdFromData(data) {
  var processId;

  if (data !== null && data !== void 0 && data.processId) {
    // eslint-disable-next-line prefer-destructuring
    processId = data.processId; // eslint-disable-next-line no-param-reassign

    delete data.processId;
  }

  return {
    data: data,
    processId: processId
  };
}

/***/ }),
/* 17 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Helpers),
/* harmony export */   "splitAt": () => (/* binding */ splitAt)
/* harmony export */ });
/* harmony import */ var uuid__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(23);
/* harmony import */ var canonicalize__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(18);
/* harmony import */ var canonicalize__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(canonicalize__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var jwt_decode__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(19);
/* harmony import */ var jwt_decode__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(jwt_decode__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var js_base64__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(22);
/* harmony import */ var _common_models__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(8);
function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, $Symbol = "function" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, ""); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return generator._invoke = function (innerFn, self, context) { var state = "suspendedStart"; return function (method, arg) { if ("executing" === state) throw new Error("Generator is already running"); if ("completed" === state) { if ("throw" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) { if ("suspendedStart" === state) throw state = "completed", context.arg; context.dispatchException(context.arg); } else "return" === context.method && context.abrupt("return", context.arg); state = "executing"; var record = tryCatch(innerFn, self, context); if ("normal" === record.type) { if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg); } }; }(innerFn, self, context), generator; } function tryCatch(fn, obj, arg) { try { return { type: "normal", arg: fn.call(obj, arg) }; } catch (err) { return { type: "throw", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { ["next", "throw", "return"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if ("throw" !== record.type) { var result = record.arg, value = result.value; return value && "object" == _typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke("next", value, resolve, reject); }, function (err) { invoke("throw", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke("throw", error, resolve, reject); }); } reject(record.arg); } var previousPromise; this._invoke = function (method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); }; } function maybeInvokeDelegate(delegate, context) { var method = delegate.iterator[context.method]; if (undefined === method) { if (context.delegate = null, "throw" === context.method) { if (delegate.iterator["return"] && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method)) return ContinueSentinel; context.method = "throw", context.arg = new TypeError("The iterator does not provide a 'throw' method"); } return ContinueSentinel; } var record = tryCatch(method, delegate.iterator, context.arg); if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = "normal", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: "root" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if ("function" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, "constructor", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) { var ctor = "function" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, "toString", function () { return "[object Generator]"; }), exports.keys = function (object) { var keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if ("throw" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if ("root" === entry.tryLoc) return handle("end"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error("try statement without catch or finally"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if ("throw" === record.type) throw record.arg; return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, "catch": function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if ("throw" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, "next" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/*
    helper functions
 */





var TRACING = false; // enable when debugging to see detailed outputs
// split a string or array at a given index position

var splitAt = function splitAt(index, dropChars) {
  return function (x) {
    return [x.slice(0, index), x.slice(index + dropChars)];
  };
};

var replaceAll = function replaceAll(inString, search, replacement) {
  return inString.replace(new RegExp(search, 'g'), replacement);
};

var Helpers = /*#__PURE__*/function () {
  function Helpers() {
    _classCallCheck(this, Helpers);
  }

  _createClass(Helpers, null, [{
    key: "isNullOrEmpty",
    value: function isNullOrEmpty(obj) {
      if (obj === undefined) {
        return true;
      }

      if (obj === null) {
        return true;
      } // Check for an empty array too


      if (Array.isArray(obj)) {
        if (obj.length === 0) {
          return true;
        }
      }

      return Object.keys(obj).length === 0 && obj.constructor === Object;
    } // log data

  }, {
    key: "log",
    value: function log(message, data) {
      if (TRACING) {
        // eslint-disable-next-line no-console
        console.log(message, data);
      }
    }
    /** Decodes a JWT token string
     *  If token can't be decoded (e.g. corrupted), returns null */

  }, {
    key: "jwtDecodeSafe",
    value: function jwtDecodeSafe(token) {
      var decoded;

      if (this.isNullOrEmpty(token)) {
        return null;
      }

      try {
        decoded = jwt_decode__WEBPACK_IMPORTED_MODULE_1___default()(token);
      } catch (error) {// throw Error(`Problem decoding or validating JWT token: ${token} error:${error}`)
      }

      return decoded;
    }
    /**  Takes a url string and converts it to an object of {paramNane, paramValue}
     * e.g input: https://xxx?enabled&name=value&name2=val2
     *   returns: { 'enabled': true, 'name':'value', 'name2':'val2' }
     * if the parameter only has a name and no value, then its value is set to 'true'
     * */

  }, {
    key: "parseUrlParams",
    value: function parseUrlParams(fullPath) {
      var urlParamsObject = {};
      var searchString;

      try {
        var urlObject = new URL(fullPath);

        if (urlObject.hash) {
          searchString = urlObject.hash.slice(1); // remove #
        } else {
          searchString = urlObject.search;
        }
      } catch (error) {
        searchString = fullPath; // treat as partial url string E.g. '?param1=value1...'
      }

      var urlParams = new URLSearchParams(searchString);
      urlParams.forEach(function (value, key) {
        urlParamsObject[key] = decodeURIComponent(value) || 'true';
      });
      return urlParamsObject;
    }
    /** Returns Null if parse fails
     *  Reinflates a serialized object (e.g. UInt8Array) if found in JSON
     */

  }, {
    key: "tryParseJSON",
    value: function tryParseJSON(jsonString) {
      var unescape = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      var replaceQuotes = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
      var finalJsonString = '';
      if (!jsonString || !Helpers.isAString(jsonString) || jsonString.trim() === '') return null;

      try {
        if (unescape) {
          // eslint-disable-next-line no-param-reassign
          jsonString = decodeURI(jsonString);
        }

        finalJsonString = jsonString;

        if (replaceQuotes) {
          // eslint-disable-next-line quotes
          finalJsonString = replaceAll(jsonString, "'", '"');
          finalJsonString = replaceAll(finalJsonString, '`', '"');
        }

        var o = JSON.parse(finalJsonString, Helpers.jsonParseComplexObjectReviver); // Handle non-exception-throwing cases:
        // Neither JSON.parse(false) or JSON.parse(1234) throw errors, hence the type-checking,
        // but... JSON.parse(null) returns null, and typeof null === "object",
        // so we must check for that, too. Thankfully, null is falsey, so this suffices:

        if (o && _typeof(o) === 'object') {
          return o;
        }
      } catch (error) {// TODO: should log trace this detail: ('error parsing JSON', { jsonString, doubleQuotes, error });
      }

      return null;
    }
    /**
     * The reviver function passed into JSON.parse to implement custom type conversions.
     * If the value is a previously stringified buffer we convert it to a Buffer,
     * If its an object of numbers, we convert to UInt8Array {"0":2,"1":209,"2":8 ...}
     * otherwise return the value
     */

  }, {
    key: "jsonParseComplexObjectReviver",
    value: function jsonParseComplexObjectReviver(key, value) {
      // Convert Buffer
      if (value !== null && _typeof(value) === 'object' && 'type' in value && value.type === 'Buffer' && 'data' in value && Array.isArray(value.data)) {
        return Buffer.from(value.data);
      } // Convert number array to UInt8Array e.g. {"0":2,"1":209,"2":8 ...}


      if (value !== null && _typeof(value) === 'object' && !Array.isArray(value) && '0' in value && Helpers.isANumber(value['0'])) {
        var values = Object.entries(value).map(function (_ref) {
          var _ref2 = _slicedToArray(_ref, 2),
              val = _ref2[1];

          return val;
        }); // if array only has 8-bit numbers, convert it to UInt8Array

        if (values.every(function (val) {
          return Helpers.isANumber(val) || val < 256;
        })) {
          return new Uint8Array(values);
        }
      } // Return parsed value without modifying


      return value;
    }
  }, {
    key: "base64DecodeSafe",
    value: function base64DecodeSafe(encodedString) {
      var decoded = {};

      if (this.isNullOrEmpty(encodedString)) {
        return null;
      }

      try {
        decoded = js_base64__WEBPACK_IMPORTED_MODULE_2__.Base64.decode(encodedString); // if decoded value is a stringified JSON object, return the object

        if (Helpers.tryParseJSON(decoded)) {
          decoded = JSON.parse(decoded);
        }
      } catch (error) {
        // logError('Problem decoding base64DecodeSafe:',error);
        return null;
      }

      return decoded;
    }
    /**  Base64 encodes a string
     * if value passed in is an Object or JSON, it will be stringified first
     * if value is null, this function returns null */

  }, {
    key: "base64Encode",
    value: function base64Encode(valueIn) {
      if (!valueIn) return null;
      var value = valueIn;

      if (Helpers.isAnObject(value)) {
        value = JSON.stringify(value);
      }

      return js_base64__WEBPACK_IMPORTED_MODULE_2__.Base64.encode(value);
    }
  }, {
    key: "sleep",
    value: function sleep(ms) {
      return new Promise(function (resolve) {
        return setTimeout(resolve, ms);
      });
    }
  }, {
    key: "createGuid",
    value: function createGuid() {
      return (0,uuid__WEBPACK_IMPORTED_MODULE_4__["default"])();
    }
    /** Typescript Typeguard to verify that the value is in the enumType specified  */

  }, {
    key: "isInEnum",
    value: function isInEnum(enumType, value) {
      return Object.values(enumType).includes(value);
    }
    /** Typescript Typeguard helper to ensure that a string value can be assigned to an Enum type
     *  If a value can't be matched to a valid option in the enum, returns null (or throws if throwIfInvalid = true) */

  }, {
    key: "toEnumValue",
    value: function toEnumValue(e, value) {
      var throwIfInvalid = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
      if (this.isNullOrEmpty(value)) return null;

      if (this.isInEnum(e, value)) {
        return value;
      }

      var errMsg = "Value ".concat(JSON.stringify(value), " is not a valid member of enum ").concat(JSON.stringify(e), ".");

      if (throwIfInvalid) {
        throw new Error(errMsg);
      }

      return null;
    }
    /** Parses comma-seperated error_codes from url response
     * Returns: array of error code strings
     * Note: Params is a javascript object parsed from callback URL string */

  }, {
    key: "getErrorCodesFromParams",
    value: function getErrorCodesFromParams(params) {
      var errorCodes;
      var errorString = params.error_code || params.errorCode;
      var errorMessage = params.error_message || params.errorMessage;

      if (errorString) {
        errorCodes = errorString.split(/[/?/$&]/);
      }

      if (errorCodes || errorMessage) {
        errorCodes = errorCodes || [];
        errorCodes.push(errorMessage);
      }

      return errorCodes;
    }
    /** Retrieve values from a url query string and returns an array of them
     *  Also parses error codes returned into an array of errors codes/messages
     */

  }, {
    key: "extractDataFromCallbackUrl",
    value: function extractDataFromCallbackUrl(url) {
      var params = {};

      if (url) {
        params = this.parseUrlParams(url);
        var errors = this.getErrorCodesFromParams(params);
        return _objectSpread(_objectSpread({}, params), {}, {
          errors: errors
        });
      }

      return params;
    }
    /** Call the callback once for each item in the array and await for each to finish in turn */

  }, {
    key: "asyncForEach",
    value: function () {
      var _asyncForEach = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(array, callback) {
        var _index;

        return _regeneratorRuntime().wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                if (!Helpers.isNullOrEmpty(array)) {
                  _context.next = 2;
                  break;
                }

                return _context.abrupt("return");

              case 2:
                _index = 0;

              case 3:
                if (!(_index < array.length)) {
                  _context.next = 9;
                  break;
                }

                _context.next = 6;
                return callback(array[_index], _index, array);

              case 6:
                _index += 1;
                _context.next = 3;
                break;

              case 9:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));

      function asyncForEach(_x, _x2) {
        return _asyncForEach.apply(this, arguments);
      }

      return asyncForEach;
    }()
    /** Return a value in a custom claim in a JWT token by using a partial claim name
     *  e.g. function(token, 'appId') => value for claim https://oreid.io/appId */

  }, {
    key: "getClaimFromJwtTokenBySearchString",
    value: function getClaimFromJwtTokenBySearchString(decodedToken, searchString) {
      var value;
      if (!this.isAnObject(decodedToken)) return null; // loop through items in token to find matching string

      Object.keys(decodedToken).forEach(function (item) {
        if (item.includes(searchString)) {
          value = decodedToken[item];
        }
      });
      return value;
    }
    /** get error from inside a network request (Axios Error object) and return it */

  }, {
    key: "getErrorFromAxiosError",
    value: function getErrorFromAxiosError(error) {
      // Browser thre an error during CORS preflight post - See https://github.com/axios/axios/issues/1143
      if ((error === null || error === void 0 ? void 0 : error.message.toLowerCase()) === 'network error') {
        throw new Error('Browser threw a Network Error. This is likely because of CORS error. Make sure that you are not sending an api-key in the header of the request.');
      }

      if ((error === null || error === void 0 ? void 0 : error.code) === 'ECONNREFUSED') {
        throw new Error("Could not connect to ORE ID service. ".concat(error.message, "."));
      }

      if (!Helpers.isAxiosError(error)) {
        return error;
      } // extract error message from Axios Error and return new Error


      var _ref3 = (error === null || error === void 0 ? void 0 : error.response) || {},
          _ref3$data = _ref3.data,
          data = _ref3$data === void 0 ? {} : _ref3$data;

      var message = data.message;
      var errorCodes = this.getErrorCodesFromParams(data); // oreid apis pass back errorCode/errorMessages
      // also handle when a standard error message is thrown

      var errorCodesList = errorCodes && (errorCodes === null || errorCodes === void 0 ? void 0 : errorCodes.length) > 1 ? errorCodes.join(', ') : errorCodes;
      var errorString = errorCodesList || message || 'unknown error';
      return Error(errorString);
    }
  }, {
    key: "isAxiosError",
    value: function isAxiosError(error) {
      return error.isAxiosError !== undefined;
    }
  }, {
    key: "isAString",
    value: function isAString(value) {
      if (!value) {
        return false;
      }

      return typeof value === 'string' || value instanceof String;
    }
  }, {
    key: "isADate",
    value: function isADate(value) {
      return value instanceof Date;
    }
  }, {
    key: "isABoolean",
    value: function isABoolean(value) {
      return typeof value === 'boolean' || value instanceof Boolean;
    }
  }, {
    key: "isANumber",
    value: function isANumber(value) {
      if (Number.isNaN(value)) return false;
      return typeof value === 'number' || value instanceof Number;
    }
  }, {
    key: "isAnObject",
    value: function isAnObject(obj) {
      return obj !== null && _typeof(obj) === 'object';
    }
    /** throw error if invalid provider */

  }, {
    key: "assertValidProvider",
    value: function assertValidProvider(provider) {
      if (Helpers.isInEnum(_common_models__WEBPACK_IMPORTED_MODULE_3__.AuthProvider, provider)) {
        return true;
      }

      throw new Error("Auth provider ".concat(provider, " is not a valid option"));
    }
    /** Convert an AuthProvider to the ExternalWalletType subset
     *  Returns null if can't convert member */

  }, {
    key: "mapAuthProviderToWalletType",
    value: function mapAuthProviderToWalletType(provider) {
      if (!provider) return null;
      return Helpers.toEnumValue(_common_models__WEBPACK_IMPORTED_MODULE_3__.ExternalWalletType, provider);
    }
  }, {
    key: "isCustodial",
    value: function isCustodial(provider) {
      return provider === _common_models__WEBPACK_IMPORTED_MODULE_3__.AuthProvider.Custodial;
    }
  }, {
    key: "isValidEmail",
    value: function isValidEmail(email) {
      if (!email) return false;
      var emailRegex = /^(([^<>()[]\\.,;:\s@]+(\.[^<>()[]\\.,;:\s@]+)*)|(.+))@(([[0-9]{1,3}\[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
      return emailRegex.test(email);
    }
    /** Sort JSON in a deterministic way */

  }, {
    key: "sortJson",
    value: function sortJson(value) {
      if (!value) return value;
      var stringified = canonicalize__WEBPACK_IMPORTED_MODULE_0___default()(value);
      return JSON.parse(stringified);
    }
    /** filter complex values in array down to an array of a single, uniques values
     * e.g. if array = [{value:'A', other}, {value:'B', something}, {value:'A', other}]
     *       => [{value:'A', other}, {value:'B', something}] */

  }, {
    key: "getUniqueValues",
    value: function getUniqueValues(array) {
      return Array.from(new Set(array.map(function (item) {
        return JSON.stringify(item);
      }))).map(function (item) {
        return JSON.parse(item);
      });
    }
    /** Execute a callback function at a given Unix Epoch time */

  }, {
    key: "runAtTime",
    value: function runAtTime(callback, executionEoochTime) {
      var now = Date.now();
      var runAtTime = Math.max(executionEoochTime, now); // if executionEoochTime is in the past, use the current time to run the function immediately

      return setTimeout(callback, runAtTime - now);
    }
    /** whether objects are 'equal' by deep comparing all members */

  }, {
    key: "objectsAreEqual",
    value: function objectsAreEqual(a, b) {
      if (a === b) return true;
      if (_typeof(a) !== 'object' || _typeof(b) !== 'object' || a == null || b == null) return false;
      var keysA = Object.keys(a);
      var keysB = Object.keys(b);
      if (keysA.length !== keysB.length) return false; // eslint-disable-next-line no-restricted-syntax

      for (var _i2 = 0, _keysA = keysA; _i2 < _keysA.length; _i2++) {
        var _key = _keysA[_i2];
        if (!keysB.includes(_key)) return false;

        if (typeof a[_key] === 'function' || typeof b[_key] === 'function') {
          if (a[_key].toString() !== b[_key].toString()) return false;
        } else if (!Helpers.objectsAreEqual(a[_key], b[_key])) return false;
      }

      return true;
    }
  }]);

  return Helpers;
}();

_defineProperty(Helpers, "isInBrowser", typeof window !== 'undefined');



/***/ }),
/* 18 */
/***/ ((module) => {

"use strict";
/* jshint esversion: 6 */
/* jslint node: true */


module.exports = function serialize (object) {
  if (object === null || typeof object !== 'object' || object.toJSON != null) {
    return JSON.stringify(object);
  }

  if (Array.isArray(object)) {
    return '[' + object.reduce((t, cv, ci) => {
      const comma = ci === 0 ? '' : ',';
      const value = cv === undefined || typeof cv === 'symbol' ? null : cv;
      return t + comma + serialize(value);
    }, '') + ']';
  }

  return '{' + Object.keys(object).sort().reduce((t, cv, ci) => {
    if (object[cv] === undefined ||
        typeof object[cv] === 'symbol') {
      return t;
    }
    const comma = t.length === 0 ? '' : ',';
    return t + comma + serialize(cv) + ':' + serialize(object[cv]);
  }, '') + '}';
};


/***/ }),
/* 19 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var base64_url_decode = __webpack_require__(20);

function InvalidTokenError(message) {
  this.message = message;
}

InvalidTokenError.prototype = new Error();
InvalidTokenError.prototype.name = 'InvalidTokenError';

module.exports = function (token,options) {
  if (typeof token !== 'string') {
    throw new InvalidTokenError('Invalid token specified');
  }

  options = options || {};
  var pos = options.header === true ? 0 : 1;
  try {
    return JSON.parse(base64_url_decode(token.split('.')[pos]));
  } catch (e) {
    throw new InvalidTokenError('Invalid token specified: ' + e.message);
  }
};

module.exports.InvalidTokenError = InvalidTokenError;


/***/ }),
/* 20 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var atob = __webpack_require__(21);

function b64DecodeUnicode(str) {
  return decodeURIComponent(atob(str).replace(/(.)/g, function (m, p) {
    var code = p.charCodeAt(0).toString(16).toUpperCase();
    if (code.length < 2) {
      code = '0' + code;
    }
    return '%' + code;
  }));
}

module.exports = function(str) {
  var output = str.replace(/-/g, "+").replace(/_/g, "/");
  switch (output.length % 4) {
    case 0:
      break;
    case 2:
      output += "==";
      break;
    case 3:
      output += "=";
      break;
    default:
      throw "Illegal base64url string!";
  }

  try{
    return b64DecodeUnicode(output);
  } catch (err) {
    return atob(output);
  }
};


/***/ }),
/* 21 */
/***/ ((module) => {

/**
 * The code was extracted from:
 * https://github.com/davidchambers/Base64.js
 */

var chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';

function InvalidCharacterError(message) {
  this.message = message;
}

InvalidCharacterError.prototype = new Error();
InvalidCharacterError.prototype.name = 'InvalidCharacterError';

function polyfill (input) {
  var str = String(input).replace(/=+$/, '');
  if (str.length % 4 == 1) {
    throw new InvalidCharacterError("'atob' failed: The string to be decoded is not correctly encoded.");
  }
  for (
    // initialize result and counters
    var bc = 0, bs, buffer, idx = 0, output = '';
    // get next character
    buffer = str.charAt(idx++);
    // character found in table? initialize bit storage and add its ascii value;
    ~buffer && (bs = bc % 4 ? bs * 64 + buffer : buffer,
      // and if not first of each 4 characters,
      // convert the first 8 bits to one ascii character
      bc++ % 4) ? output += String.fromCharCode(255 & bs >> (-2 * bc & 6)) : 0
  ) {
    // try to find character in table (0-63, not found => -1)
    buffer = chars.indexOf(buffer);
  }
  return output;
}


module.exports = typeof window !== 'undefined' && window.atob && window.atob.bind(window) || polyfill;


/***/ }),
/* 22 */
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Base64": () => (/* binding */ gBase64),
/* harmony export */   "VERSION": () => (/* binding */ VERSION),
/* harmony export */   "atob": () => (/* binding */ _atob),
/* harmony export */   "atobPolyfill": () => (/* binding */ atobPolyfill),
/* harmony export */   "btoa": () => (/* binding */ _btoa),
/* harmony export */   "btoaPolyfill": () => (/* binding */ btoaPolyfill),
/* harmony export */   "btou": () => (/* binding */ btou),
/* harmony export */   "decode": () => (/* binding */ decode),
/* harmony export */   "encode": () => (/* binding */ encode),
/* harmony export */   "encodeURI": () => (/* binding */ encodeURI),
/* harmony export */   "encodeURL": () => (/* binding */ encodeURI),
/* harmony export */   "extendBuiltins": () => (/* binding */ extendBuiltins),
/* harmony export */   "extendString": () => (/* binding */ extendString),
/* harmony export */   "extendUint8Array": () => (/* binding */ extendUint8Array),
/* harmony export */   "fromBase64": () => (/* binding */ decode),
/* harmony export */   "fromUint8Array": () => (/* binding */ fromUint8Array),
/* harmony export */   "isValid": () => (/* binding */ isValid),
/* harmony export */   "toBase64": () => (/* binding */ encode),
/* harmony export */   "toUint8Array": () => (/* binding */ toUint8Array),
/* harmony export */   "utob": () => (/* binding */ utob),
/* harmony export */   "version": () => (/* binding */ version)
/* harmony export */ });
/**
 *  base64.ts
 *
 *  Licensed under the BSD 3-Clause License.
 *    http://opensource.org/licenses/BSD-3-Clause
 *
 *  References:
 *    http://en.wikipedia.org/wiki/Base64
 *
 * @author Dan Kogai (https://github.com/dankogai)
 */
const version = '3.7.2';
/**
 * @deprecated use lowercase `version`.
 */
const VERSION = version;
const _hasatob = typeof atob === 'function';
const _hasbtoa = typeof btoa === 'function';
const _hasBuffer = typeof Buffer === 'function';
const _TD = typeof TextDecoder === 'function' ? new TextDecoder() : undefined;
const _TE = typeof TextEncoder === 'function' ? new TextEncoder() : undefined;
const b64ch = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';
const b64chs = Array.prototype.slice.call(b64ch);
const b64tab = ((a) => {
    let tab = {};
    a.forEach((c, i) => tab[c] = i);
    return tab;
})(b64chs);
const b64re = /^(?:[A-Za-z\d+\/]{4})*?(?:[A-Za-z\d+\/]{2}(?:==)?|[A-Za-z\d+\/]{3}=?)?$/;
const _fromCC = String.fromCharCode.bind(String);
const _U8Afrom = typeof Uint8Array.from === 'function'
    ? Uint8Array.from.bind(Uint8Array)
    : (it, fn = (x) => x) => new Uint8Array(Array.prototype.slice.call(it, 0).map(fn));
const _mkUriSafe = (src) => src
    .replace(/=/g, '').replace(/[+\/]/g, (m0) => m0 == '+' ? '-' : '_');
const _tidyB64 = (s) => s.replace(/[^A-Za-z0-9\+\/]/g, '');
/**
 * polyfill version of `btoa`
 */
const btoaPolyfill = (bin) => {
    // console.log('polyfilled');
    let u32, c0, c1, c2, asc = '';
    const pad = bin.length % 3;
    for (let i = 0; i < bin.length;) {
        if ((c0 = bin.charCodeAt(i++)) > 255 ||
            (c1 = bin.charCodeAt(i++)) > 255 ||
            (c2 = bin.charCodeAt(i++)) > 255)
            throw new TypeError('invalid character found');
        u32 = (c0 << 16) | (c1 << 8) | c2;
        asc += b64chs[u32 >> 18 & 63]
            + b64chs[u32 >> 12 & 63]
            + b64chs[u32 >> 6 & 63]
            + b64chs[u32 & 63];
    }
    return pad ? asc.slice(0, pad - 3) + "===".substring(pad) : asc;
};
/**
 * does what `window.btoa` of web browsers do.
 * @param {String} bin binary string
 * @returns {string} Base64-encoded string
 */
const _btoa = _hasbtoa ? (bin) => btoa(bin)
    : _hasBuffer ? (bin) => Buffer.from(bin, 'binary').toString('base64')
        : btoaPolyfill;
const _fromUint8Array = _hasBuffer
    ? (u8a) => Buffer.from(u8a).toString('base64')
    : (u8a) => {
        // cf. https://stackoverflow.com/questions/12710001/how-to-convert-uint8-array-to-base64-encoded-string/12713326#12713326
        const maxargs = 0x1000;
        let strs = [];
        for (let i = 0, l = u8a.length; i < l; i += maxargs) {
            strs.push(_fromCC.apply(null, u8a.subarray(i, i + maxargs)));
        }
        return _btoa(strs.join(''));
    };
/**
 * converts a Uint8Array to a Base64 string.
 * @param {boolean} [urlsafe] URL-and-filename-safe a la RFC4648 §5
 * @returns {string} Base64 string
 */
const fromUint8Array = (u8a, urlsafe = false) => urlsafe ? _mkUriSafe(_fromUint8Array(u8a)) : _fromUint8Array(u8a);
// This trick is found broken https://github.com/dankogai/js-base64/issues/130
// const utob = (src: string) => unescape(encodeURIComponent(src));
// reverting good old fationed regexp
const cb_utob = (c) => {
    if (c.length < 2) {
        var cc = c.charCodeAt(0);
        return cc < 0x80 ? c
            : cc < 0x800 ? (_fromCC(0xc0 | (cc >>> 6))
                + _fromCC(0x80 | (cc & 0x3f)))
                : (_fromCC(0xe0 | ((cc >>> 12) & 0x0f))
                    + _fromCC(0x80 | ((cc >>> 6) & 0x3f))
                    + _fromCC(0x80 | (cc & 0x3f)));
    }
    else {
        var cc = 0x10000
            + (c.charCodeAt(0) - 0xD800) * 0x400
            + (c.charCodeAt(1) - 0xDC00);
        return (_fromCC(0xf0 | ((cc >>> 18) & 0x07))
            + _fromCC(0x80 | ((cc >>> 12) & 0x3f))
            + _fromCC(0x80 | ((cc >>> 6) & 0x3f))
            + _fromCC(0x80 | (cc & 0x3f)));
    }
};
const re_utob = /[\uD800-\uDBFF][\uDC00-\uDFFFF]|[^\x00-\x7F]/g;
/**
 * @deprecated should have been internal use only.
 * @param {string} src UTF-8 string
 * @returns {string} UTF-16 string
 */
const utob = (u) => u.replace(re_utob, cb_utob);
//
const _encode = _hasBuffer
    ? (s) => Buffer.from(s, 'utf8').toString('base64')
    : _TE
        ? (s) => _fromUint8Array(_TE.encode(s))
        : (s) => _btoa(utob(s));
/**
 * converts a UTF-8-encoded string to a Base64 string.
 * @param {boolean} [urlsafe] if `true` make the result URL-safe
 * @returns {string} Base64 string
 */
const encode = (src, urlsafe = false) => urlsafe
    ? _mkUriSafe(_encode(src))
    : _encode(src);
/**
 * converts a UTF-8-encoded string to URL-safe Base64 RFC4648 §5.
 * @returns {string} Base64 string
 */
const encodeURI = (src) => encode(src, true);
// This trick is found broken https://github.com/dankogai/js-base64/issues/130
// const btou = (src: string) => decodeURIComponent(escape(src));
// reverting good old fationed regexp
const re_btou = /[\xC0-\xDF][\x80-\xBF]|[\xE0-\xEF][\x80-\xBF]{2}|[\xF0-\xF7][\x80-\xBF]{3}/g;
const cb_btou = (cccc) => {
    switch (cccc.length) {
        case 4:
            var cp = ((0x07 & cccc.charCodeAt(0)) << 18)
                | ((0x3f & cccc.charCodeAt(1)) << 12)
                | ((0x3f & cccc.charCodeAt(2)) << 6)
                | (0x3f & cccc.charCodeAt(3)), offset = cp - 0x10000;
            return (_fromCC((offset >>> 10) + 0xD800)
                + _fromCC((offset & 0x3FF) + 0xDC00));
        case 3:
            return _fromCC(((0x0f & cccc.charCodeAt(0)) << 12)
                | ((0x3f & cccc.charCodeAt(1)) << 6)
                | (0x3f & cccc.charCodeAt(2)));
        default:
            return _fromCC(((0x1f & cccc.charCodeAt(0)) << 6)
                | (0x3f & cccc.charCodeAt(1)));
    }
};
/**
 * @deprecated should have been internal use only.
 * @param {string} src UTF-16 string
 * @returns {string} UTF-8 string
 */
const btou = (b) => b.replace(re_btou, cb_btou);
/**
 * polyfill version of `atob`
 */
const atobPolyfill = (asc) => {
    // console.log('polyfilled');
    asc = asc.replace(/\s+/g, '');
    if (!b64re.test(asc))
        throw new TypeError('malformed base64.');
    asc += '=='.slice(2 - (asc.length & 3));
    let u24, bin = '', r1, r2;
    for (let i = 0; i < asc.length;) {
        u24 = b64tab[asc.charAt(i++)] << 18
            | b64tab[asc.charAt(i++)] << 12
            | (r1 = b64tab[asc.charAt(i++)]) << 6
            | (r2 = b64tab[asc.charAt(i++)]);
        bin += r1 === 64 ? _fromCC(u24 >> 16 & 255)
            : r2 === 64 ? _fromCC(u24 >> 16 & 255, u24 >> 8 & 255)
                : _fromCC(u24 >> 16 & 255, u24 >> 8 & 255, u24 & 255);
    }
    return bin;
};
/**
 * does what `window.atob` of web browsers do.
 * @param {String} asc Base64-encoded string
 * @returns {string} binary string
 */
const _atob = _hasatob ? (asc) => atob(_tidyB64(asc))
    : _hasBuffer ? (asc) => Buffer.from(asc, 'base64').toString('binary')
        : atobPolyfill;
//
const _toUint8Array = _hasBuffer
    ? (a) => _U8Afrom(Buffer.from(a, 'base64'))
    : (a) => _U8Afrom(_atob(a), c => c.charCodeAt(0));
/**
 * converts a Base64 string to a Uint8Array.
 */
const toUint8Array = (a) => _toUint8Array(_unURI(a));
//
const _decode = _hasBuffer
    ? (a) => Buffer.from(a, 'base64').toString('utf8')
    : _TD
        ? (a) => _TD.decode(_toUint8Array(a))
        : (a) => btou(_atob(a));
const _unURI = (a) => _tidyB64(a.replace(/[-_]/g, (m0) => m0 == '-' ? '+' : '/'));
/**
 * converts a Base64 string to a UTF-8 string.
 * @param {String} src Base64 string.  Both normal and URL-safe are supported
 * @returns {string} UTF-8 string
 */
const decode = (src) => _decode(_unURI(src));
/**
 * check if a value is a valid Base64 string
 * @param {String} src a value to check
  */
const isValid = (src) => {
    if (typeof src !== 'string')
        return false;
    const s = src.replace(/\s+/g, '').replace(/={0,2}$/, '');
    return !/[^\s0-9a-zA-Z\+/]/.test(s) || !/[^\s0-9a-zA-Z\-_]/.test(s);
};
//
const _noEnum = (v) => {
    return {
        value: v, enumerable: false, writable: true, configurable: true
    };
};
/**
 * extend String.prototype with relevant methods
 */
const extendString = function () {
    const _add = (name, body) => Object.defineProperty(String.prototype, name, _noEnum(body));
    _add('fromBase64', function () { return decode(this); });
    _add('toBase64', function (urlsafe) { return encode(this, urlsafe); });
    _add('toBase64URI', function () { return encode(this, true); });
    _add('toBase64URL', function () { return encode(this, true); });
    _add('toUint8Array', function () { return toUint8Array(this); });
};
/**
 * extend Uint8Array.prototype with relevant methods
 */
const extendUint8Array = function () {
    const _add = (name, body) => Object.defineProperty(Uint8Array.prototype, name, _noEnum(body));
    _add('toBase64', function (urlsafe) { return fromUint8Array(this, urlsafe); });
    _add('toBase64URI', function () { return fromUint8Array(this, true); });
    _add('toBase64URL', function () { return fromUint8Array(this, true); });
};
/**
 * extend Builtin prototypes with relevant methods
 */
const extendBuiltins = () => {
    extendString();
    extendUint8Array();
};
const gBase64 = {
    version: version,
    VERSION: VERSION,
    atob: _atob,
    atobPolyfill: atobPolyfill,
    btoa: _btoa,
    btoaPolyfill: btoaPolyfill,
    fromBase64: decode,
    toBase64: encode,
    encode: encode,
    encodeURI: encodeURI,
    encodeURL: encodeURI,
    utob: utob,
    btou: btou,
    decode: decode,
    isValid: isValid,
    fromUint8Array: fromUint8Array,
    toUint8Array: toUint8Array,
    extendString: extendString,
    extendUint8Array: extendUint8Array,
    extendBuiltins: extendBuiltins,
};
// makecjs:CUT //




















// and finally,



/***/ }),
/* 23 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _rng_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(24);
/* harmony import */ var _bytesToUuid_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(25);



function v4(options, buf, offset) {
  var i = buf && offset || 0;

  if (typeof options == 'string') {
    buf = options === 'binary' ? new Array(16) : null;
    options = null;
  }

  options = options || {};
  var rnds = options.random || (options.rng || _rng_js__WEBPACK_IMPORTED_MODULE_0__["default"])(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`

  rnds[6] = rnds[6] & 0x0f | 0x40;
  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided

  if (buf) {
    for (var ii = 0; ii < 16; ++ii) {
      buf[i + ii] = rnds[ii];
    }
  }

  return buf || (0,_bytesToUuid_js__WEBPACK_IMPORTED_MODULE_1__["default"])(rnds);
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (v4);

/***/ }),
/* 24 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ rng)
/* harmony export */ });
// Unique ID creation requires a high quality random # generator. In the browser we therefore
// require the crypto API and do not support built-in fallback to lower quality random number
// generators (like Math.random()).
// getRandomValues needs to be invoked in a context where "this" is a Crypto implementation. Also,
// find the complete implementation of crypto (msCrypto) on IE11.
var getRandomValues = typeof crypto != 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto != 'undefined' && typeof msCrypto.getRandomValues == 'function' && msCrypto.getRandomValues.bind(msCrypto);
var rnds8 = new Uint8Array(16); // eslint-disable-line no-undef

function rng() {
  if (!getRandomValues) {
    throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');
  }

  return getRandomValues(rnds8);
}

/***/ }),
/* 25 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/**
 * Convert array of 16 byte values to UUID string format of the form:
 * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX
 */
var byteToHex = [];

for (var i = 0; i < 256; ++i) {
  byteToHex[i] = (i + 0x100).toString(16).substr(1);
}

function bytesToUuid(buf, offset) {
  var i = offset || 0;
  var bth = byteToHex; // join used to fix memory issue caused by concatenation: https://bugs.chromium.org/p/v8/issues/detail?id=3175#c4

  return [bth[buf[i++]], bth[buf[i++]], bth[buf[i++]], bth[buf[i++]], '-', bth[buf[i++]], bth[buf[i++]], '-', bth[buf[i++]], bth[buf[i++]], '-', bth[buf[i++]], bth[buf[i++]], '-', bth[buf[i++]], bth[buf[i++]], bth[buf[i++]], bth[buf[i++]], bth[buf[i++]], bth[buf[i++]]].join('');
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (bytesToUuid);

/***/ }),
/* 26 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "callApiGetAppToken": () => (/* binding */ callApiGetAppToken)
/* harmony export */ });
/* harmony import */ var _models__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(5);
/* harmony import */ var _helpers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(16);
/* harmony import */ var _utils_helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(17);
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, $Symbol = "function" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, ""); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return generator._invoke = function (innerFn, self, context) { var state = "suspendedStart"; return function (method, arg) { if ("executing" === state) throw new Error("Generator is already running"); if ("completed" === state) { if ("throw" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) { if ("suspendedStart" === state) throw state = "completed", context.arg; context.dispatchException(context.arg); } else "return" === context.method && context.abrupt("return", context.arg); state = "executing"; var record = tryCatch(innerFn, self, context); if ("normal" === record.type) { if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg); } }; }(innerFn, self, context), generator; } function tryCatch(fn, obj, arg) { try { return { type: "normal", arg: fn.call(obj, arg) }; } catch (err) { return { type: "throw", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { ["next", "throw", "return"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if ("throw" !== record.type) { var result = record.arg, value = result.value; return value && "object" == _typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke("next", value, resolve, reject); }, function (err) { invoke("throw", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke("throw", error, resolve, reject); }); } reject(record.arg); } var previousPromise; this._invoke = function (method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); }; } function maybeInvokeDelegate(delegate, context) { var method = delegate.iterator[context.method]; if (undefined === method) { if (context.delegate = null, "throw" === context.method) { if (delegate.iterator["return"] && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method)) return ContinueSentinel; context.method = "throw", context.arg = new TypeError("The iterator does not provide a 'throw' method"); } return ContinueSentinel; } var record = tryCatch(method, delegate.iterator, context.arg); if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = "normal", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: "root" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if ("function" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, "constructor", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) { var ctor = "function" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, "toString", function () { return "[object Generator]"; }), exports.keys = function (object) { var keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if ("throw" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if ("root" === entry.tryLoc) return handle("end"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error("try statement without catch or finally"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if ("throw" === record.type) throw record.arg; return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, "catch": function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if ("throw" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, "next" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }





/**
 *  Call api app-token to get a new appAccessToken
 *  An apiKey is always required to call this endpoint
 *  Returns: appAccessToken
 * */
function callApiGetAppToken(_x, _x2) {
  return _callApiGetAppToken.apply(this, arguments);
}

function _callApiGetAppToken() {
  _callApiGetAppToken = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(oreIdContext, params) {
    var apiName, appAccessTokenMetadata, _yield$oreIdContext$c, appAccessToken;

    return _regeneratorRuntime().wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            apiName = _models__WEBPACK_IMPORTED_MODULE_0__.ApiEndpoint.AppToken;
            appAccessTokenMetadata = params.appAccessTokenMetadata; // to use appAccessTokenMetadata, we require a apiKey with 'createUser' right

            if (!_utils_helpers__WEBPACK_IMPORTED_MODULE_2__["default"].isNullOrEmpty(appAccessTokenMetadata)) {
              (0,_helpers__WEBPACK_IMPORTED_MODULE_1__.assertHasApiKey)(oreIdContext, _models__WEBPACK_IMPORTED_MODULE_0__.ApiKeyUsedFor.CreateUser, apiName);
            } else {
              (0,_helpers__WEBPACK_IMPORTED_MODULE_1__.assertHasApiKey)(oreIdContext, null, apiName);
            }

            _context.next = 5;
            return oreIdContext.callOreIdApi(_models__WEBPACK_IMPORTED_MODULE_0__.RequestType.Post, _models__WEBPACK_IMPORTED_MODULE_0__.ApiEndpoint.AppToken, appAccessTokenMetadata, null);

          case 5:
            _yield$oreIdContext$c = _context.sent;
            appAccessToken = _yield$oreIdContext$c.appAccessToken;
            return _context.abrupt("return", appAccessToken);

          case 8:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _callApiGetAppToken.apply(this, arguments);
}

/***/ }),
/* 27 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "callApiCanAutosignTransaction": () => (/* binding */ callApiCanAutosignTransaction)
/* harmony export */ });
/* harmony import */ var _models__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(5);
/* harmony import */ var _helpers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(16);
/* harmony import */ var _utils_helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(17);
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, $Symbol = "function" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, ""); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return generator._invoke = function (innerFn, self, context) { var state = "suspendedStart"; return function (method, arg) { if ("executing" === state) throw new Error("Generator is already running"); if ("completed" === state) { if ("throw" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) { if ("suspendedStart" === state) throw state = "completed", context.arg; context.dispatchException(context.arg); } else "return" === context.method && context.abrupt("return", context.arg); state = "executing"; var record = tryCatch(innerFn, self, context); if ("normal" === record.type) { if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg); } }; }(innerFn, self, context), generator; } function tryCatch(fn, obj, arg) { try { return { type: "normal", arg: fn.call(obj, arg) }; } catch (err) { return { type: "throw", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { ["next", "throw", "return"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if ("throw" !== record.type) { var result = record.arg, value = result.value; return value && "object" == _typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke("next", value, resolve, reject); }, function (err) { invoke("throw", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke("throw", error, resolve, reject); }); } reject(record.arg); } var previousPromise; this._invoke = function (method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); }; } function maybeInvokeDelegate(delegate, context) { var method = delegate.iterator[context.method]; if (undefined === method) { if (context.delegate = null, "throw" === context.method) { if (delegate.iterator["return"] && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method)) return ContinueSentinel; context.method = "throw", context.arg = new TypeError("The iterator does not provide a 'throw' method"); } return ContinueSentinel; } var record = tryCatch(method, delegate.iterator, context.arg); if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = "normal", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: "root" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if ("function" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, "constructor", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) { var ctor = "function" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, "toString", function () { return "[object Generator]"; }), exports.keys = function (object) { var keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if ("throw" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if ("root" === entry.tryLoc) return handle("end"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error("try statement without catch or finally"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if ("throw" === record.type) throw record.arg; return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, "catch": function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if ("throw" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, "next" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }





/** Call api transaction/can-auto-sign
 * Requires a apiKey with the autoSign right
 * Returns: true if transaction provided can be signed using the signTransaction(autosign:true)
 * */
function callApiCanAutosignTransaction(_x, _x2) {
  return _callApiCanAutosignTransaction.apply(this, arguments);
}

function _callApiCanAutosignTransaction() {
  _callApiCanAutosignTransaction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(oreIdContext, params) {
    var apiName, account, chainAccount, chainNetwork, signedTransaction, transaction, transactionChainAccount, body, results;
    return _regeneratorRuntime().wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            apiName = _models__WEBPACK_IMPORTED_MODULE_0__.ApiEndpoint.CanAutoSign;
            account = params.account, chainAccount = params.chainAccount, chainNetwork = params.chainNetwork, signedTransaction = params.signedTransaction, transaction = params.transaction, transactionChainAccount = params.transactionChainAccount;
            (0,_helpers__WEBPACK_IMPORTED_MODULE_1__.assertHasApiKey)(oreIdContext, _models__WEBPACK_IMPORTED_MODULE_0__.ApiKeyUsedFor.AutoSigning, apiName);
            (0,_helpers__WEBPACK_IMPORTED_MODULE_1__.assertParamsHaveRequiredValues)(params, ['account', 'chainNetwork', 'chainAccount'], apiName);
            (0,_helpers__WEBPACK_IMPORTED_MODULE_1__.assertParamsHaveOnlyOneOfValues)(params, ['transaction', 'signedTransaction'], apiName);
            body = {
              account: account,
              chain_account: chainAccount,
              chain_network: chainNetwork
            };
            if (transaction) body.transaction = _utils_helpers__WEBPACK_IMPORTED_MODULE_2__["default"].base64Encode(transaction);
            if (signedTransaction) body.signed_transaction = _utils_helpers__WEBPACK_IMPORTED_MODULE_2__["default"].base64Encode(signedTransaction);
            if (transaction) body.transaction_chain_acccount = transactionChainAccount;
            _context.next = 11;
            return oreIdContext.callOreIdApi(_models__WEBPACK_IMPORTED_MODULE_0__.RequestType.Post, _models__WEBPACK_IMPORTED_MODULE_0__.ApiEndpoint.CanAutoSign, body, null);

          case 11:
            results = _context.sent;
            return _context.abrupt("return", results);

          case 13:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _callApiCanAutosignTransaction.apply(this, arguments);
}

/***/ }),
/* 28 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "callApiConvertOauthTokens": () => (/* binding */ callApiConvertOauthTokens)
/* harmony export */ });
/* harmony import */ var _models__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(5);
/* harmony import */ var _helpers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(16);
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, $Symbol = "function" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, ""); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return generator._invoke = function (innerFn, self, context) { var state = "suspendedStart"; return function (method, arg) { if ("executing" === state) throw new Error("Generator is already running"); if ("completed" === state) { if ("throw" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) { if ("suspendedStart" === state) throw state = "completed", context.arg; context.dispatchException(context.arg); } else "return" === context.method && context.abrupt("return", context.arg); state = "executing"; var record = tryCatch(innerFn, self, context); if ("normal" === record.type) { if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg); } }; }(innerFn, self, context), generator; } function tryCatch(fn, obj, arg) { try { return { type: "normal", arg: fn.call(obj, arg) }; } catch (err) { return { type: "throw", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { ["next", "throw", "return"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if ("throw" !== record.type) { var result = record.arg, value = result.value; return value && "object" == _typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke("next", value, resolve, reject); }, function (err) { invoke("throw", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke("throw", error, resolve, reject); }); } reject(record.arg); } var previousPromise; this._invoke = function (method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); }; } function maybeInvokeDelegate(delegate, context) { var method = delegate.iterator[context.method]; if (undefined === method) { if (context.delegate = null, "throw" === context.method) { if (delegate.iterator["return"] && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method)) return ContinueSentinel; context.method = "throw", context.arg = new TypeError("The iterator does not provide a 'throw' method"); } return ContinueSentinel; } var record = tryCatch(method, delegate.iterator, context.arg); if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = "normal", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: "root" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if ("function" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, "constructor", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) { var ctor = "function" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, "toString", function () { return "[object Generator]"; }), exports.keys = function (object) { var keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if ("throw" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if ("root" === entry.tryLoc) return handle("end"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error("try statement without catch or finally"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if ("throw" === record.type) throw record.arg; return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, "catch": function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if ("throw" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, "next" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }




/** Call the account/convert-oauth api
 * Converts OAuth tokens from some 3rd-party source to OREID Oauth tokens
 * The third-party (e.g. Auth0 or Google) must be registered in the AppRegistration.oauthSettings
 * Returns: OreId issued accessToken and idToken
 * */
function callApiConvertOauthTokens(_x, _x2) {
  return _callApiConvertOauthTokens.apply(this, arguments);
}

function _callApiConvertOauthTokens() {
  _callApiConvertOauthTokens = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(oreIdContext, params) {
    var apiName, accessToken, idToken, body, results;
    return _regeneratorRuntime().wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            apiName = _models__WEBPACK_IMPORTED_MODULE_0__.ApiEndpoint.ConvertOauthTokens;
            accessToken = params.accessToken, idToken = params.idToken;
            (0,_helpers__WEBPACK_IMPORTED_MODULE_1__.assertHasApiKeyOrAccessToken)(oreIdContext, apiName); // assertParamsHaveOnlyOneOfValues(params, ['accessToken', 'idToken'], apiName)

            (0,_helpers__WEBPACK_IMPORTED_MODULE_1__.assertParamsHaveRequiredValues)(params, ['idToken'], apiName);
            body = {};
            if (accessToken) body.access_token = accessToken;
            if (idToken) body.id_token = idToken;
            _context.next = 9;
            return oreIdContext.callOreIdApi(_models__WEBPACK_IMPORTED_MODULE_0__.RequestType.Post, _models__WEBPACK_IMPORTED_MODULE_0__.ApiEndpoint.ConvertOauthTokens, body, null);

          case 9:
            results = _context.sent;
            return _context.abrupt("return", results);

          case 11:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _callApiConvertOauthTokens.apply(this, arguments);
}

/***/ }),
/* 29 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "callApiCustodialMigrateAccount": () => (/* binding */ callApiCustodialMigrateAccount)
/* harmony export */ });
/* harmony import */ var _models__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(5);
/* harmony import */ var _helpers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(16);
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, $Symbol = "function" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, ""); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return generator._invoke = function (innerFn, self, context) { var state = "suspendedStart"; return function (method, arg) { if ("executing" === state) throw new Error("Generator is already running"); if ("completed" === state) { if ("throw" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) { if ("suspendedStart" === state) throw state = "completed", context.arg; context.dispatchException(context.arg); } else "return" === context.method && context.abrupt("return", context.arg); state = "executing"; var record = tryCatch(innerFn, self, context); if ("normal" === record.type) { if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg); } }; }(innerFn, self, context), generator; } function tryCatch(fn, obj, arg) { try { return { type: "normal", arg: fn.call(obj, arg) }; } catch (err) { return { type: "throw", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { ["next", "throw", "return"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if ("throw" !== record.type) { var result = record.arg, value = result.value; return value && "object" == _typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke("next", value, resolve, reject); }, function (err) { invoke("throw", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke("throw", error, resolve, reject); }); } reject(record.arg); } var previousPromise; this._invoke = function (method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); }; } function maybeInvokeDelegate(delegate, context) { var method = delegate.iterator[context.method]; if (undefined === method) { if (context.delegate = null, "throw" === context.method) { if (delegate.iterator["return"] && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method)) return ContinueSentinel; context.method = "throw", context.arg = new TypeError("The iterator does not provide a 'throw' method"); } return ContinueSentinel; } var record = tryCatch(method, delegate.iterator, context.arg); if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = "normal", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: "root" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if ("function" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, "constructor", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) { var ctor = "function" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, "toString", function () { return "[object Generator]"; }), exports.keys = function (object) { var keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if ("throw" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if ("root" === entry.tryLoc) return handle("end"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error("try statement without catch or finally"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if ("throw" === record.type) throw record.arg; return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, "catch": function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if ("throw" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, "next" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }




/** Call the custodial/migrate-user api
 * Converts a user account to a new account type
 * Usually used to convert a virtal account to a native account (on-chain)
 * .. and expects the account to be a managed (custodial) account
 * Requires a wallet password (userPassword) on behalf of the user
 * Requires an apiKey with the accountMigration right
 * Returns: account name of migrated account
 *       OR errorCode, errorMessage, and message if any problems */
function callApiCustodialMigrateAccount(_x, _x2) {
  return _callApiCustodialMigrateAccount.apply(this, arguments);
}

function _callApiCustodialMigrateAccount() {
  _callApiCustodialMigrateAccount = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(oreIdContext, params) {
    var apiName, account, chainAccount, chainNetwork, toType, userPassword, userPasswordEncrypted, body, results;
    return _regeneratorRuntime().wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            apiName = _models__WEBPACK_IMPORTED_MODULE_0__.ApiEndpoint.CustodialMigrateAccount;
            account = params.account, chainAccount = params.chainAccount, chainNetwork = params.chainNetwork, toType = params.toType, userPassword = params.userPassword, userPasswordEncrypted = params.userPasswordEncrypted;
            body = {
              account: account,
              chain_account: chainAccount,
              chain_network: chainNetwork,
              to_type: toType,
              user_password: userPassword,
              user_password_encrypted: userPasswordEncrypted
            };
            (0,_helpers__WEBPACK_IMPORTED_MODULE_1__.assertHasApiKey)(oreIdContext, _models__WEBPACK_IMPORTED_MODULE_0__.ApiKeyUsedFor.AccountMigration, apiName);
            (0,_helpers__WEBPACK_IMPORTED_MODULE_1__.assertParamsHaveRequiredValues)(params, ['account', 'chainAccount', 'chainNetwork', 'toType'], apiName);
            (0,_helpers__WEBPACK_IMPORTED_MODULE_1__.assertParamsHaveOnlyOneOfValues)(params, ['user_password', 'user_password_encrypted'], apiName);
            _context.next = 8;
            return oreIdContext.callOreIdApi(_models__WEBPACK_IMPORTED_MODULE_0__.RequestType.Post, _models__WEBPACK_IMPORTED_MODULE_0__.ApiEndpoint.CustodialMigrateAccount, body, null);

          case 8:
            results = _context.sent;
            return _context.abrupt("return", results);

          case 10:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _callApiCustodialMigrateAccount.apply(this, arguments);
}

/***/ }),
/* 30 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "callApiCustodialNewAccount": () => (/* binding */ callApiCustodialNewAccount)
/* harmony export */ });
/* harmony import */ var _models__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(5);
/* harmony import */ var _helpers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(16);
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, $Symbol = "function" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, ""); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return generator._invoke = function (innerFn, self, context) { var state = "suspendedStart"; return function (method, arg) { if ("executing" === state) throw new Error("Generator is already running"); if ("completed" === state) { if ("throw" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) { if ("suspendedStart" === state) throw state = "completed", context.arg; context.dispatchException(context.arg); } else "return" === context.method && context.abrupt("return", context.arg); state = "executing"; var record = tryCatch(innerFn, self, context); if ("normal" === record.type) { if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg); } }; }(innerFn, self, context), generator; } function tryCatch(fn, obj, arg) { try { return { type: "normal", arg: fn.call(obj, arg) }; } catch (err) { return { type: "throw", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { ["next", "throw", "return"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if ("throw" !== record.type) { var result = record.arg, value = result.value; return value && "object" == _typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke("next", value, resolve, reject); }, function (err) { invoke("throw", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke("throw", error, resolve, reject); }); } reject(record.arg); } var previousPromise; this._invoke = function (method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); }; } function maybeInvokeDelegate(delegate, context) { var method = delegate.iterator[context.method]; if (undefined === method) { if (context.delegate = null, "throw" === context.method) { if (delegate.iterator["return"] && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method)) return ContinueSentinel; context.method = "throw", context.arg = new TypeError("The iterator does not provide a 'throw' method"); } return ContinueSentinel; } var record = tryCatch(method, delegate.iterator, context.arg); if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = "normal", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: "root" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if ("function" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, "constructor", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) { var ctor = "function" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, "toString", function () { return "[object Generator]"; }), exports.keys = function (object) { var keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if ("throw" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if ("root" === entry.tryLoc) return handle("end"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error("try statement without catch or finally"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if ("throw" === record.type) throw record.arg; return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, "catch": function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if ("throw" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, "next" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }




/** Call the custodial/new-user api
 * Create a new user account that is managed by your app
 * Requires a wallet password (userPassword) on behalf of the user
 * Requires an apiKey with the createUser right
 * Returns: accountName of newly created account
 *       OR errorCode, errorMessage, and message if any problems */
function callApiCustodialNewAccount(_x, _x2) {
  return _callApiCustodialNewAccount.apply(this, arguments);
}

function _callApiCustodialNewAccount() {
  _callApiCustodialNewAccount = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(oreIdContext, params) {
    var apiName, accountType, delayWalletSetup, email, emailVerified, idToken, isTestUser, name, picture, phone, phoneVerified, userName, userPassword, body, results;
    return _regeneratorRuntime().wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            apiName = _models__WEBPACK_IMPORTED_MODULE_0__.ApiEndpoint.CustodialNewAccount;
            accountType = params.accountType, delayWalletSetup = params.delayWalletSetup, email = params.email, emailVerified = params.emailVerified, idToken = params.idToken, isTestUser = params.isTestUser, name = params.name, picture = params.picture, phone = params.phone, phoneVerified = params.phoneVerified, userName = params.userName, userPassword = params.userPassword;
            body = {
              account_type: accountType,
              delay_wallet_setup: delayWalletSetup,
              email: email,
              email_verified: emailVerified,
              id_token: idToken,
              is_test_user: isTestUser,
              name: name,
              phone: phone,
              phone_verified: phoneVerified,
              picture: picture,
              user_name: userName,
              user_password: userPassword
            };
            (0,_helpers__WEBPACK_IMPORTED_MODULE_1__.assertHasApiKey)(oreIdContext, _models__WEBPACK_IMPORTED_MODULE_0__.ApiKeyUsedFor.CreateUser, apiName);
            (0,_helpers__WEBPACK_IMPORTED_MODULE_1__.assertParamsHaveRequiredValues)(params, ['accountType'], apiName);
            (0,_helpers__WEBPACK_IMPORTED_MODULE_1__.assertParamsHaveOnlyOneOfValues)(params, ['user_password', 'user_password_encrypted', 'user_password_encrypted_backup'], apiName);

            if (!(!idToken && !(email && name))) {
              _context.next = 8;
              break;
            }

            throw new Error("Missing required parameter(s) for API ".concat(apiName, ": Must include email AND name or an idToken"));

          case 8:
            _context.next = 10;
            return oreIdContext.callOreIdApi(_models__WEBPACK_IMPORTED_MODULE_0__.RequestType.Post, _models__WEBPACK_IMPORTED_MODULE_0__.ApiEndpoint.CustodialNewAccount, body, null);

          case 10:
            results = _context.sent;
            return _context.abrupt("return", results);

          case 12:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _callApiCustodialNewAccount.apply(this, arguments);
}

/***/ }),
/* 31 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "callApiCustodialSignString": () => (/* binding */ callApiCustodialSignString)
/* harmony export */ });
/* harmony import */ var _models__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(5);
/* harmony import */ var _helpers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(16);
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, $Symbol = "function" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, ""); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return generator._invoke = function (innerFn, self, context) { var state = "suspendedStart"; return function (method, arg) { if ("executing" === state) throw new Error("Generator is already running"); if ("completed" === state) { if ("throw" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) { if ("suspendedStart" === state) throw state = "completed", context.arg; context.dispatchException(context.arg); } else "return" === context.method && context.abrupt("return", context.arg); state = "executing"; var record = tryCatch(innerFn, self, context); if ("normal" === record.type) { if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg); } }; }(innerFn, self, context), generator; } function tryCatch(fn, obj, arg) { try { return { type: "normal", arg: fn.call(obj, arg) }; } catch (err) { return { type: "throw", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { ["next", "throw", "return"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if ("throw" !== record.type) { var result = record.arg, value = result.value; return value && "object" == _typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke("next", value, resolve, reject); }, function (err) { invoke("throw", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke("throw", error, resolve, reject); }); } reject(record.arg); } var previousPromise; this._invoke = function (method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); }; } function maybeInvokeDelegate(delegate, context) { var method = delegate.iterator[context.method]; if (undefined === method) { if (context.delegate = null, "throw" === context.method) { if (delegate.iterator["return"] && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method)) return ContinueSentinel; context.method = "throw", context.arg = new TypeError("The iterator does not provide a 'throw' method"); } return ContinueSentinel; } var record = tryCatch(method, delegate.iterator, context.arg); if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = "normal", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: "root" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if ("function" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, "constructor", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) { var ctor = "function" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, "toString", function () { return "[object Generator]"; }), exports.keys = function (object) { var keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if ("throw" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if ("root" === entry.tryLoc) return handle("end"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error("try statement without catch or finally"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if ("throw" === record.type) throw record.arg; return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, "catch": function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if ("throw" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, "next" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }




/** Call the custoidal/sign-string api
 * Signs a string (aka message) using the user's private key
 * Requires a wallet password (userPassword) on behalf of the user
 * Requires an apiKey with the createUser right
 * Optional: options - designates the method of signing to perform (e.g. ethereum.eth_sign, ethereum.eth_signTypedData) and related metadata (e.g. ERC712 types)
 * Returns: signature
 *       OR errorCode, errorMessage, and message if any problems */
function callApiCustodialSignString(_x, _x2) {
  return _callApiCustodialSignString.apply(this, arguments);
}

function _callApiCustodialSignString() {
  _callApiCustodialSignString = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(oreIdContext, params) {
    var apiName, chainAccount, chainNetwork, permission, stringToSign, signMethod, userPassword, body, results;
    return _regeneratorRuntime().wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            apiName = _models__WEBPACK_IMPORTED_MODULE_0__.ApiEndpoint.CustodialSignString;
            chainAccount = params.chainAccount, chainNetwork = params.chainNetwork, permission = params.permission, stringToSign = params.stringToSign, signMethod = params.signMethod, userPassword = params.userPassword;
            body = {
              chain_account: chainAccount,
              chain_network: chainNetwork,
              permission: permission,
              string_to_sign: stringToSign,
              user_password: userPassword
            };
            if (signMethod) body.sign_method = signMethod;
            (0,_helpers__WEBPACK_IMPORTED_MODULE_1__.assertHasApiKey)(oreIdContext, _models__WEBPACK_IMPORTED_MODULE_0__.ApiKeyUsedFor.ProxySigning, apiName);
            (0,_helpers__WEBPACK_IMPORTED_MODULE_1__.assertParamsHaveRequiredValues)(params, ['chainAccount', 'chainNetwork', 'stringToSign'], apiName);
            (0,_helpers__WEBPACK_IMPORTED_MODULE_1__.assertParamsHaveOnlyOneOfValues)(params, ['user_password', 'user_password_encrypted'], apiName);
            _context.next = 9;
            return oreIdContext.callOreIdApi(_models__WEBPACK_IMPORTED_MODULE_0__.RequestType.Post, _models__WEBPACK_IMPORTED_MODULE_0__.ApiEndpoint.CustodialSignString, body, null);

          case 9:
            results = _context.sent;
            return _context.abrupt("return", results);

          case 11:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _callApiCustodialSignString.apply(this, arguments);
}

/***/ }),
/* 32 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "callApiDeleteTestUser": () => (/* binding */ callApiDeleteTestUser)
/* harmony export */ });
/* harmony import */ var _models__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(5);
/* harmony import */ var _helpers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(16);
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, $Symbol = "function" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, ""); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return generator._invoke = function (innerFn, self, context) { var state = "suspendedStart"; return function (method, arg) { if ("executing" === state) throw new Error("Generator is already running"); if ("completed" === state) { if ("throw" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) { if ("suspendedStart" === state) throw state = "completed", context.arg; context.dispatchException(context.arg); } else "return" === context.method && context.abrupt("return", context.arg); state = "executing"; var record = tryCatch(innerFn, self, context); if ("normal" === record.type) { if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg); } }; }(innerFn, self, context), generator; } function tryCatch(fn, obj, arg) { try { return { type: "normal", arg: fn.call(obj, arg) }; } catch (err) { return { type: "throw", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { ["next", "throw", "return"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if ("throw" !== record.type) { var result = record.arg, value = result.value; return value && "object" == _typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke("next", value, resolve, reject); }, function (err) { invoke("throw", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke("throw", error, resolve, reject); }); } reject(record.arg); } var previousPromise; this._invoke = function (method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); }; } function maybeInvokeDelegate(delegate, context) { var method = delegate.iterator[context.method]; if (undefined === method) { if (context.delegate = null, "throw" === context.method) { if (delegate.iterator["return"] && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method)) return ContinueSentinel; context.method = "throw", context.arg = new TypeError("The iterator does not provide a 'throw' method"); } return ContinueSentinel; } var record = tryCatch(method, delegate.iterator, context.arg); if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = "normal", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: "root" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if ("function" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, "constructor", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) { var ctor = "function" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, "toString", function () { return "[object Generator]"; }), exports.keys = function (object) { var keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if ("throw" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if ("root" === entry.tryLoc) return handle("end"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error("try statement without catch or finally"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if ("throw" === record.type) throw record.arg; return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, "catch": function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if ("throw" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, "next" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }




/**
 *  Delete a user specifically created as a test user via api account/delete-test-user endpoint
 *  Returns: success or errorCode, errorMessage, if any problems
 */
function callApiDeleteTestUser(_x, _x2) {
  return _callApiDeleteTestUser.apply(this, arguments);
}

function _callApiDeleteTestUser() {
  _callApiDeleteTestUser = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(oreIdContext, params) {
    var apiName, account, body, response, _extractProcessIdFrom, data;

    return _regeneratorRuntime().wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            apiName = _models__WEBPACK_IMPORTED_MODULE_0__.ApiEndpoint.DeleteTestUser;
            account = params.account;
            (0,_helpers__WEBPACK_IMPORTED_MODULE_1__.assertHasApiKeyOrAccessToken)(oreIdContext, apiName);
            (0,_helpers__WEBPACK_IMPORTED_MODULE_1__.assertParamsHaveRequiredValues)(params, ['account'], apiName);
            body = {
              account: account
            };
            _context.next = 7;
            return oreIdContext.callOreIdApi(_models__WEBPACK_IMPORTED_MODULE_0__.RequestType.Post, _models__WEBPACK_IMPORTED_MODULE_0__.ApiEndpoint.DeleteTestUser, body);

          case 7:
            response = _context.sent;
            _extractProcessIdFrom = (0,_helpers__WEBPACK_IMPORTED_MODULE_1__.extractProcessIdFromData)(response), data = _extractProcessIdFrom.data;
            return _context.abrupt("return", data);

          case 10:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _callApiDeleteTestUser.apply(this, arguments);
}

/***/ }),
/* 33 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "callApiGetConfig": () => (/* binding */ callApiGetConfig)
/* harmony export */ });
/* harmony import */ var _models__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(5);
/* harmony import */ var _helpers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(16);
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, $Symbol = "function" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, ""); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return generator._invoke = function (innerFn, self, context) { var state = "suspendedStart"; return function (method, arg) { if ("executing" === state) throw new Error("Generator is already running"); if ("completed" === state) { if ("throw" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) { if ("suspendedStart" === state) throw state = "completed", context.arg; context.dispatchException(context.arg); } else "return" === context.method && context.abrupt("return", context.arg); state = "executing"; var record = tryCatch(innerFn, self, context); if ("normal" === record.type) { if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg); } }; }(innerFn, self, context), generator; } function tryCatch(fn, obj, arg) { try { return { type: "normal", arg: fn.call(obj, arg) }; } catch (err) { return { type: "throw", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { ["next", "throw", "return"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if ("throw" !== record.type) { var result = record.arg, value = result.value; return value && "object" == _typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke("next", value, resolve, reject); }, function (err) { invoke("throw", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke("throw", error, resolve, reject); }); } reject(record.arg); } var previousPromise; this._invoke = function (method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); }; } function maybeInvokeDelegate(delegate, context) { var method = delegate.iterator[context.method]; if (undefined === method) { if (context.delegate = null, "throw" === context.method) { if (delegate.iterator["return"] && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method)) return ContinueSentinel; context.method = "throw", context.arg = new TypeError("The iterator does not provide a 'throw' method"); } return ContinueSentinel; } var record = tryCatch(method, delegate.iterator, context.arg); if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = "normal", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: "root" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if ("function" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, "constructor", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) { var ctor = "function" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, "toString", function () { return "[object Generator]"; }), exports.keys = function (object) { var keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if ("throw" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if ("root" === entry.tryLoc) return handle("end"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error("try statement without catch or finally"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if ("throw" === record.type) throw record.arg; return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, "catch": function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if ("throw" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, "next" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }




/**
 *  Call api services/config to get configuration values of a specific type
 *  Returns: for configType:Config.Chains, returns array of SettingChainNetwork objects for all chains suported by the service
 * */
function callApiGetConfig(_x, _x2) {
  return _callApiGetConfig.apply(this, arguments);
}

function _callApiGetConfig() {
  _callApiGetConfig = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(oreIdContext, params) {
    var apiName, configType, queryParams, _yield$oreIdContext$c, values;

    return _regeneratorRuntime().wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            apiName = _models__WEBPACK_IMPORTED_MODULE_0__.ApiEndpoint.GetConfig;
            (0,_helpers__WEBPACK_IMPORTED_MODULE_1__.assertHasApiKeyOrAccessToken)(oreIdContext, apiName);
            (0,_helpers__WEBPACK_IMPORTED_MODULE_1__.assertParamsHaveRequiredValues)(params, ['configType'], apiName);
            configType = params.configType;
            queryParams = {
              type: configType
            };
            _context.next = 7;
            return oreIdContext.callOreIdApi(_models__WEBPACK_IMPORTED_MODULE_0__.RequestType.Get, _models__WEBPACK_IMPORTED_MODULE_0__.ApiEndpoint.GetConfig, queryParams, null);

          case 7:
            _yield$oreIdContext$c = _context.sent;
            values = _yield$oreIdContext$c.values;
            return _context.abrupt("return", values);

          case 10:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _callApiGetConfig.apply(this, arguments);
}

/***/ }),
/* 34 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "callApiGetUser": () => (/* binding */ callApiGetUser)
/* harmony export */ });
/* harmony import */ var _models__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(5);
/* harmony import */ var _helpers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(16);
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, $Symbol = "function" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, ""); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return generator._invoke = function (innerFn, self, context) { var state = "suspendedStart"; return function (method, arg) { if ("executing" === state) throw new Error("Generator is already running"); if ("completed" === state) { if ("throw" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) { if ("suspendedStart" === state) throw state = "completed", context.arg; context.dispatchException(context.arg); } else "return" === context.method && context.abrupt("return", context.arg); state = "executing"; var record = tryCatch(innerFn, self, context); if ("normal" === record.type) { if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg); } }; }(innerFn, self, context), generator; } function tryCatch(fn, obj, arg) { try { return { type: "normal", arg: fn.call(obj, arg) }; } catch (err) { return { type: "throw", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { ["next", "throw", "return"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if ("throw" !== record.type) { var result = record.arg, value = result.value; return value && "object" == _typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke("next", value, resolve, reject); }, function (err) { invoke("throw", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke("throw", error, resolve, reject); }); } reject(record.arg); } var previousPromise; this._invoke = function (method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); }; } function maybeInvokeDelegate(delegate, context) { var method = delegate.iterator[context.method]; if (undefined === method) { if (context.delegate = null, "throw" === context.method) { if (delegate.iterator["return"] && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method)) return ContinueSentinel; context.method = "throw", context.arg = new TypeError("The iterator does not provide a 'throw' method"); } return ContinueSentinel; } var record = tryCatch(method, delegate.iterator, context.arg); if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = "normal", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: "root" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if ("function" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, "constructor", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) { var ctor = "function" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, "toString", function () { return "[object Generator]"; }), exports.keys = function (object) { var keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if ("throw" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if ("root" === entry.tryLoc) return handle("end"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error("try statement without catch or finally"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if ("throw" === record.type) throw record.arg; return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, "catch": function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if ("throw" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, "next" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }




/**
 *  Fetch user from api account/user endpoint
 *  Returns: UserSourceData for specified account
 */
function callApiGetUser(_x, _x2) {
  return _callApiGetUser.apply(this, arguments);
}

function _callApiGetUser() {
  _callApiGetUser = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(oreIdContext, params) {
    var apiName, account, queryParams, response, _extractProcessIdFrom, data;

    return _regeneratorRuntime().wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            apiName = _models__WEBPACK_IMPORTED_MODULE_0__.ApiEndpoint.GetUser;
            account = params.account;
            (0,_helpers__WEBPACK_IMPORTED_MODULE_1__.assertHasApiKeyOrAccessToken)(oreIdContext, apiName);
            (0,_helpers__WEBPACK_IMPORTED_MODULE_1__.assertParamsHaveRequiredValues)(params, ['account'], apiName);
            queryParams = {
              account: account
            };
            _context.next = 7;
            return oreIdContext.callOreIdApi(_models__WEBPACK_IMPORTED_MODULE_0__.RequestType.Get, _models__WEBPACK_IMPORTED_MODULE_0__.ApiEndpoint.GetUser, queryParams);

          case 7:
            response = _context.sent;
            _extractProcessIdFrom = (0,_helpers__WEBPACK_IMPORTED_MODULE_1__.extractProcessIdFromData)(response), data = _extractProcessIdFrom.data;
            return _context.abrupt("return", data);

          case 10:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _callApiGetUser.apply(this, arguments);
}

/***/ }),
/* 35 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "callApiLoginUserWithToken": () => (/* binding */ callApiLoginUserWithToken)
/* harmony export */ });
/* harmony import */ var _models__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(5);
/* harmony import */ var _helpers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(16);
/* harmony import */ var _utils_helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(17);
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, $Symbol = "function" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, ""); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return generator._invoke = function (innerFn, self, context) { var state = "suspendedStart"; return function (method, arg) { if ("executing" === state) throw new Error("Generator is already running"); if ("completed" === state) { if ("throw" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) { if ("suspendedStart" === state) throw state = "completed", context.arg; context.dispatchException(context.arg); } else "return" === context.method && context.abrupt("return", context.arg); state = "executing"; var record = tryCatch(innerFn, self, context); if ("normal" === record.type) { if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg); } }; }(innerFn, self, context), generator; } function tryCatch(fn, obj, arg) { try { return { type: "normal", arg: fn.call(obj, arg) }; } catch (err) { return { type: "throw", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { ["next", "throw", "return"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if ("throw" !== record.type) { var result = record.arg, value = result.value; return value && "object" == _typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke("next", value, resolve, reject); }, function (err) { invoke("throw", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke("throw", error, resolve, reject); }); } reject(record.arg); } var previousPromise; this._invoke = function (method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); }; } function maybeInvokeDelegate(delegate, context) { var method = delegate.iterator[context.method]; if (undefined === method) { if (context.delegate = null, "throw" === context.method) { if (delegate.iterator["return"] && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method)) return ContinueSentinel; context.method = "throw", context.arg = new TypeError("The iterator does not provide a 'throw' method"); } return ContinueSentinel; } var record = tryCatch(method, delegate.iterator, context.arg); if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = "normal", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: "root" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if ("function" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, "constructor", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) { var ctor = "function" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, "toString", function () { return "[object Generator]"; }), exports.keys = function (object) { var keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if ("throw" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if ("root" === entry.tryLoc) return handle("end"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error("try statement without catch or finally"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if ("throw" === record.type) throw record.arg; return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, "catch": function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if ("throw" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, "next" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }





/** Call api account/login-user-with-token
 * Converts OAuth accesstoken or idToken from some 3rd-party source to OREID Oauth accessTokens
 * The third-party (e.g. Auth0 or Google) must be registered in the AppRegistration.oauthSettings
 * If a user does not curently exist that matches the info in the incoming idToken, a new OreID user and account is created
 * Requires either:
 *  1) a valid idToken (needs no accessToken or apiKey in header)
 *  2) an OreId issued JWT accessToken (needs no accessToken or apiKey in header)
 *  3) a 3rd-party accessToken (usually not a JWT) and provider param (e.g. 'google') - Requires api-key in header
 * Returns: OreId issued accessToken and user's account name (if new account created, this is a new account name)
 * */
function callApiLoginUserWithToken(_x, _x2) {
  return _callApiLoginUserWithToken.apply(this, arguments);
}

function _callApiLoginUserWithToken() {
  _callApiLoginUserWithToken = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(oreIdContext, params) {
    var apiName, accessToken, idToken, provider, body, results;
    return _regeneratorRuntime().wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            apiName = _models__WEBPACK_IMPORTED_MODULE_0__.ApiEndpoint.LoginUserWithToken;
            accessToken = params.accessToken, idToken = params.idToken, provider = params.provider; // This function does not require authentication (api-key or accessToken) in request header - when using a signed JWT accessToken or idToken
            // It does require an api-key when using a non-JWT (third-party) accessToken

            (0,_helpers__WEBPACK_IMPORTED_MODULE_1__.assertParamsHaveOnlyOneOfValues)(params, ['accessToken', 'idToken'], apiName);
            (0,_helpers__WEBPACK_IMPORTED_MODULE_1__.assertParamsHaveOnlyOneOfValues)(params, ['idToken', 'provider'], apiName);

            if (accessToken && !_utils_helpers__WEBPACK_IMPORTED_MODULE_2__["default"].jwtDecodeSafe(accessToken)) {
              (0,_helpers__WEBPACK_IMPORTED_MODULE_1__.assertParamsHaveRequiredValues)(params, ['provider'], apiName); // if we have non-JWT access token, we must include an api-key

              (0,_helpers__WEBPACK_IMPORTED_MODULE_1__.assertHasApiKey)(oreIdContext, null, 'login-user-with-token');
            }

            body = {};

            if (idToken) {
              body.id_token = idToken;
            } else {
              body.access_token = accessToken;
              body.provider = provider;
            }

            _context.next = 9;
            return oreIdContext.callOreIdApi(_models__WEBPACK_IMPORTED_MODULE_0__.RequestType.Post, _models__WEBPACK_IMPORTED_MODULE_0__.ApiEndpoint.LoginUserWithToken, body, null // an api key is NOT required to call this api endpoint
            );

          case 9:
            results = _context.sent;
            return _context.abrupt("return", results);

          case 11:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _callApiLoginUserWithToken.apply(this, arguments);
}

/***/ }),
/* 36 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "callApiNewUserWithToken": () => (/* binding */ callApiNewUserWithToken)
/* harmony export */ });
/* harmony import */ var _models__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(5);
/* harmony import */ var _helpers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(16);
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, $Symbol = "function" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, ""); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return generator._invoke = function (innerFn, self, context) { var state = "suspendedStart"; return function (method, arg) { if ("executing" === state) throw new Error("Generator is already running"); if ("completed" === state) { if ("throw" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) { if ("suspendedStart" === state) throw state = "completed", context.arg; context.dispatchException(context.arg); } else "return" === context.method && context.abrupt("return", context.arg); state = "executing"; var record = tryCatch(innerFn, self, context); if ("normal" === record.type) { if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg); } }; }(innerFn, self, context), generator; } function tryCatch(fn, obj, arg) { try { return { type: "normal", arg: fn.call(obj, arg) }; } catch (err) { return { type: "throw", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { ["next", "throw", "return"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if ("throw" !== record.type) { var result = record.arg, value = result.value; return value && "object" == _typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke("next", value, resolve, reject); }, function (err) { invoke("throw", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke("throw", error, resolve, reject); }); } reject(record.arg); } var previousPromise; this._invoke = function (method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); }; } function maybeInvokeDelegate(delegate, context) { var method = delegate.iterator[context.method]; if (undefined === method) { if (context.delegate = null, "throw" === context.method) { if (delegate.iterator["return"] && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method)) return ContinueSentinel; context.method = "throw", context.arg = new TypeError("The iterator does not provide a 'throw' method"); } return ContinueSentinel; } var record = tryCatch(method, delegate.iterator, context.arg); if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = "normal", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: "root" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if ("function" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, "constructor", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) { var ctor = "function" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, "toString", function () { return "[object Generator]"; }), exports.keys = function (object) { var keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if ("throw" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if ("root" === entry.tryLoc) return handle("end"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error("try statement without catch or finally"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if ("throw" === record.type) throw record.arg; return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, "catch": function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if ("throw" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, "next" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }




/** Call api account/new-user-with-token
 * Converts OAuth accesstoken or idToken from some 3rd-party source to OREID Oauth accessTokens
 * The third-party (e.g. Auth0 or Google) must be registered in the AppRegistration.oauthSettings
 * If a user does not curently exist that matches the info in the incoming idToken, a new OreID user and account is created
 * Requires ether:
 *  1) a valid idToken (needs no accessToken or apiKey in header)
 *  2) a 3rd-party accessToken (usually not a JWT) and provider param (e.g. 'google') - Requires api-key in header
 * Set isTestUser to true to create a test user - a test user can be deleted using user.deleteTestUser() - this is helpful for testing
 * Returns: OreId issued accessToken and user's account name (if new account created, this is a new account name)
 * */
function callApiNewUserWithToken(_x, _x2) {
  return _callApiNewUserWithToken.apply(this, arguments);
}

function _callApiNewUserWithToken() {
  _callApiNewUserWithToken = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(oreIdContext, params) {
    var apiName, accessToken, delayWalletSetup, isTestUser, idToken, provider, body, results;
    return _regeneratorRuntime().wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            apiName = _models__WEBPACK_IMPORTED_MODULE_0__.ApiEndpoint.NewUserWithToken;
            accessToken = params.accessToken, delayWalletSetup = params.delayWalletSetup, isTestUser = params.isTestUser, idToken = params.idToken, provider = params.provider; // This function does not require authentication of any kind - since it allows auth by using any accessToken or idToken

            (0,_helpers__WEBPACK_IMPORTED_MODULE_1__.assertParamsHaveAtLeastOneOfValues)(params, ['idToken', 'accessToken'], apiName);
            (0,_helpers__WEBPACK_IMPORTED_MODULE_1__.assertParamsHaveOnlyOneOfValues)(params, ['idToken', 'provider'], apiName); // if idToken, then no provider should be given

            if (accessToken) {
              (0,_helpers__WEBPACK_IMPORTED_MODULE_1__.assertParamsHaveRequiredValues)(params, ['accessToken', 'provider'], apiName); // if we have a 3rd party access token, we must include an api-key

              (0,_helpers__WEBPACK_IMPORTED_MODULE_1__.assertHasApiKey)(oreIdContext, null, 'new-user-with-token');
            }

            body = {};

            if (idToken) {
              body.id_token = idToken;
            } else {
              body.access_token = accessToken;
              body.provider = provider;
            }

            if (isTestUser === true) body.is_test_user = true;
            if (delayWalletSetup === true) body.delay_wallet_setup = true;
            _context.next = 11;
            return oreIdContext.callOreIdApi(_models__WEBPACK_IMPORTED_MODULE_0__.RequestType.Post, _models__WEBPACK_IMPORTED_MODULE_0__.ApiEndpoint.NewUserWithToken, body, null // an api key is NOT required to call this api endpoint
            );

          case 11:
            results = _context.sent;
            return _context.abrupt("return", results);

          case 13:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _callApiNewUserWithToken.apply(this, arguments);
}

/***/ }),
/* 37 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "callApiPasswordLessSendCode": () => (/* binding */ callApiPasswordLessSendCode)
/* harmony export */ });
/* harmony import */ var _models__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(5);
/* harmony import */ var _helpers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(16);
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, $Symbol = "function" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, ""); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return generator._invoke = function (innerFn, self, context) { var state = "suspendedStart"; return function (method, arg) { if ("executing" === state) throw new Error("Generator is already running"); if ("completed" === state) { if ("throw" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) { if ("suspendedStart" === state) throw state = "completed", context.arg; context.dispatchException(context.arg); } else "return" === context.method && context.abrupt("return", context.arg); state = "executing"; var record = tryCatch(innerFn, self, context); if ("normal" === record.type) { if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg); } }; }(innerFn, self, context), generator; } function tryCatch(fn, obj, arg) { try { return { type: "normal", arg: fn.call(obj, arg) }; } catch (err) { return { type: "throw", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { ["next", "throw", "return"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if ("throw" !== record.type) { var result = record.arg, value = result.value; return value && "object" == _typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke("next", value, resolve, reject); }, function (err) { invoke("throw", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke("throw", error, resolve, reject); }); } reject(record.arg); } var previousPromise; this._invoke = function (method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); }; } function maybeInvokeDelegate(delegate, context) { var method = delegate.iterator[context.method]; if (undefined === method) { if (context.delegate = null, "throw" === context.method) { if (delegate.iterator["return"] && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method)) return ContinueSentinel; context.method = "throw", context.arg = new TypeError("The iterator does not provide a 'throw' method"); } return ContinueSentinel; } var record = tryCatch(method, delegate.iterator, context.arg); if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = "normal", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: "root" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if ("function" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, "constructor", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) { var ctor = "function" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, "toString", function () { return "[object Generator]"; }), exports.keys = function (object) { var keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if ("throw" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if ("root" === entry.tryLoc) return handle("end"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error("try statement without catch or finally"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if ("throw" === record.type) throw record.arg; return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, "catch": function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if ("throw" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, "next" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }




/**
 *  Call api account/login-passwordless-send-code
 *  Returns { success: true } if verification code is sent to email/phone
 * */
function callApiPasswordLessSendCode(_x, _x2) {
  return _callApiPasswordLessSendCode.apply(this, arguments);
}

function _callApiPasswordLessSendCode() {
  _callApiPasswordLessSendCode = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(oreIdContext, params) {
    var apiName, email, phone, provider, queryParams, response;
    return _regeneratorRuntime().wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            apiName = _models__WEBPACK_IMPORTED_MODULE_0__.ApiEndpoint.PasswordLessSendCode;
            (0,_helpers__WEBPACK_IMPORTED_MODULE_1__.assertHasApiKeyOrAccessToken)(oreIdContext, apiName);
            (0,_helpers__WEBPACK_IMPORTED_MODULE_1__.assertParamsHaveRequiredValues)(params, ['provider'], apiName);
            (0,_helpers__WEBPACK_IMPORTED_MODULE_1__.assertParamsHaveOnlyOneOfValues)(params, ['email', 'phone'], apiName);
            email = params.email, phone = params.phone, provider = params.provider;
            queryParams = {
              provider: provider
            };
            if (email) queryParams.email = encodeURIComponent(email);
            if (phone) queryParams.phone = encodeURIComponent(phone); // if user passes in +12103334444, the plus sign needs to be URL encoded

            _context.next = 10;
            return oreIdContext.callOreIdApi(_models__WEBPACK_IMPORTED_MODULE_0__.RequestType.Get, _models__WEBPACK_IMPORTED_MODULE_0__.ApiEndpoint.PasswordLessSendCode, queryParams, null);

          case 10:
            response = _context.sent;
            return _context.abrupt("return", response);

          case 12:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _callApiPasswordLessSendCode.apply(this, arguments);
}

/***/ }),
/* 38 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "callApiPasswordLessVerifyCode": () => (/* binding */ callApiPasswordLessVerifyCode)
/* harmony export */ });
/* harmony import */ var _models__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(5);
/* harmony import */ var _helpers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(16);
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, $Symbol = "function" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, ""); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return generator._invoke = function (innerFn, self, context) { var state = "suspendedStart"; return function (method, arg) { if ("executing" === state) throw new Error("Generator is already running"); if ("completed" === state) { if ("throw" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) { if ("suspendedStart" === state) throw state = "completed", context.arg; context.dispatchException(context.arg); } else "return" === context.method && context.abrupt("return", context.arg); state = "executing"; var record = tryCatch(innerFn, self, context); if ("normal" === record.type) { if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg); } }; }(innerFn, self, context), generator; } function tryCatch(fn, obj, arg) { try { return { type: "normal", arg: fn.call(obj, arg) }; } catch (err) { return { type: "throw", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { ["next", "throw", "return"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if ("throw" !== record.type) { var result = record.arg, value = result.value; return value && "object" == _typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke("next", value, resolve, reject); }, function (err) { invoke("throw", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke("throw", error, resolve, reject); }); } reject(record.arg); } var previousPromise; this._invoke = function (method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); }; } function maybeInvokeDelegate(delegate, context) { var method = delegate.iterator[context.method]; if (undefined === method) { if (context.delegate = null, "throw" === context.method) { if (delegate.iterator["return"] && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method)) return ContinueSentinel; context.method = "throw", context.arg = new TypeError("The iterator does not provide a 'throw' method"); } return ContinueSentinel; } var record = tryCatch(method, delegate.iterator, context.arg); if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = "normal", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: "root" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if ("function" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, "constructor", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) { var ctor = "function" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, "toString", function () { return "[object Generator]"; }), exports.keys = function (object) { var keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if ("throw" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if ("root" === entry.tryLoc) return handle("end"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error("try statement without catch or finally"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if ("throw" === record.type) throw record.arg; return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, "catch": function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if ("throw" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, "next" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }




/**
 *  Call api account/login-passwordless-verify-code
 *  Returns { success: true } if code is verified, throws if code/verification fails
 * */
function callApiPasswordLessVerifyCode(_x, _x2) {
  return _callApiPasswordLessVerifyCode.apply(this, arguments);
}

function _callApiPasswordLessVerifyCode() {
  _callApiPasswordLessVerifyCode = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(oreIdContext, params) {
    var apiName, code, email, phone, provider, queryParams, response;
    return _regeneratorRuntime().wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            apiName = _models__WEBPACK_IMPORTED_MODULE_0__.ApiEndpoint.PasswordLessVerifyCode;
            (0,_helpers__WEBPACK_IMPORTED_MODULE_1__.assertHasApiKeyOrAccessToken)(oreIdContext, apiName);
            (0,_helpers__WEBPACK_IMPORTED_MODULE_1__.assertParamsHaveRequiredValues)(params, ['code', 'provider'], apiName);
            (0,_helpers__WEBPACK_IMPORTED_MODULE_1__.assertParamsHaveOnlyOneOfValues)(params, ['email', 'phone'], apiName);
            code = params.code, email = params.email, phone = params.phone, provider = params.provider;
            queryParams = {
              code: code,
              provider: provider
            };
            if (email) queryParams.email = encodeURIComponent(email);
            if (phone) queryParams.phone = encodeURIComponent(phone); // if user passes in +12103334444, the plus sign needs to be URL encoded

            _context.next = 10;
            return oreIdContext.callOreIdApi(_models__WEBPACK_IMPORTED_MODULE_0__.RequestType.Get, _models__WEBPACK_IMPORTED_MODULE_0__.ApiEndpoint.PasswordLessVerifyCode, queryParams, null);

          case 10:
            response = _context.sent;
            return _context.abrupt("return", response);

          case 12:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _callApiPasswordLessVerifyCode.apply(this, arguments);
}

/***/ }),
/* 39 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "callApiCustodialSignTransaction": () => (/* binding */ callApiCustodialSignTransaction),
/* harmony export */   "callApiSignTransaction": () => (/* binding */ callApiSignTransaction)
/* harmony export */ });
/* harmony import */ var _models__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(5);
/* harmony import */ var _helpers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(16);
/* harmony import */ var _utils_helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(17);
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

var _excluded = ["signed_transaction", "transaction_id"];

function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, $Symbol = "function" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, ""); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return generator._invoke = function (innerFn, self, context) { var state = "suspendedStart"; return function (method, arg) { if ("executing" === state) throw new Error("Generator is already running"); if ("completed" === state) { if ("throw" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) { if ("suspendedStart" === state) throw state = "completed", context.arg; context.dispatchException(context.arg); } else "return" === context.method && context.abrupt("return", context.arg); state = "executing"; var record = tryCatch(innerFn, self, context); if ("normal" === record.type) { if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg); } }; }(innerFn, self, context), generator; } function tryCatch(fn, obj, arg) { try { return { type: "normal", arg: fn.call(obj, arg) }; } catch (err) { return { type: "throw", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { ["next", "throw", "return"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if ("throw" !== record.type) { var result = record.arg, value = result.value; return value && "object" == _typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke("next", value, resolve, reject); }, function (err) { invoke("throw", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke("throw", error, resolve, reject); }); } reject(record.arg); } var previousPromise; this._invoke = function (method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); }; } function maybeInvokeDelegate(delegate, context) { var method = delegate.iterator[context.method]; if (undefined === method) { if (context.delegate = null, "throw" === context.method) { if (delegate.iterator["return"] && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method)) return ContinueSentinel; context.method = "throw", context.arg = new TypeError("The iterator does not provide a 'throw' method"); } return ContinueSentinel; } var record = tryCatch(method, delegate.iterator, context.arg); if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = "normal", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: "root" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if ("function" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, "constructor", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) { var ctor = "function" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, "toString", function () { return "[object Generator]"; }), exports.keys = function (object) { var keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if ("throw" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if ("root" === entry.tryLoc) return handle("end"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error("try statement without catch or finally"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if ("throw" === record.type) throw record.arg; return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, "catch": function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if ("throw" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, "next" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }





/** Compose the API body params for calling signTransaction */
function composeSignBodyFromTransactionData(params) {
  var _params$transactionDa;

  var _ref = params.transactionData || {},
      account = _ref.account,
      chainAccount = _ref.chainAccount,
      chainNetwork = _ref.chainNetwork,
      expireSeconds = _ref.expireSeconds,
      signedTransactionParam = _ref.signedTransaction,
      transactionParam = _ref.transaction,
      transactionChainAccount = _ref.transactionChainAccount,
      transactionRecordId = _ref.transactionRecordId;

  var _ref2 = ((_params$transactionDa = params.transactionData) === null || _params$transactionDa === void 0 ? void 0 : _params$transactionDa.signOptions) || {},
      allowChainAccountSelection = _ref2.allowChainAccountSelection,
      broadcast = _ref2.broadcast,
      generateAutoSignCredential = _ref2.generateAutoSignCredential,
      multiSigChainAccounts = _ref2.multiSigChainAccounts,
      returnSignedTransaction = _ref2.returnSignedTransaction,
      userPassword = _ref2.userPassword,
      userPasswordEncrypted = _ref2.userPasswordEncrypted;

  var autoSign = params.autoSign;
  var body = {
    account: account,
    broadcast: broadcast,
    chain_account: chainAccount,
    chain_network: chainNetwork
  };
  if (allowChainAccountSelection) body.allow_chain_account_selection = allowChainAccountSelection;
  if (autoSign) body.auto_sign = autoSign;
  if (expireSeconds) body.expire_seconds = expireSeconds;
  if (generateAutoSignCredential) body.generate_auto_sign_credential = generateAutoSignCredential;
  if (multiSigChainAccounts) body.multisig_chain_accounts = multiSigChainAccounts; // if (provider) body.provider = provider - no provider param for API call

  if (returnSignedTransaction) body.return_signed_transaction = returnSignedTransaction;
  if (signedTransactionParam) body.signed_transaction = _utils_helpers__WEBPACK_IMPORTED_MODULE_2__["default"].base64Encode(signedTransactionParam); // if (stateParam) body.state = Helpers.base64Encode(stateParam) - no state for an API call

  if (transactionChainAccount) body.transaction_chain_acccount = transactionChainAccount;
  if (transactionParam) body.transaction = _utils_helpers__WEBPACK_IMPORTED_MODULE_2__["default"].base64Encode(transactionParam);
  if (transactionRecordId) body.transaction_record_id = transactionRecordId;
  if (userPassword) body.user_password = userPassword; // used for custodial sign

  if (userPasswordEncrypted) body.user_password_encrypted = userPasswordEncrypted; // used for custodial sign

  return body;
}
/** convert snake_case fields in response to camelCase */


function mapSignResultFromApi(apiResult) {
  var signedTransaction = apiResult.signed_transaction,
      transactionId = apiResult.transaction_id,
      rest = _objectWithoutProperties(apiResult, _excluded);

  return _objectSpread({
    signedTransaction: signedTransaction,
    transactionId: transactionId
  }, rest);
}
/** Call api transaction/sign - to sign a transaction for a user
 * Can only sign a transaction if autoSign specified (and previously enabled by user)
 * OR if OreId is managing a private key it can sign with (e.g. most often an account in multiSigChainAccounts)
 * For autoSign param, requires an apiKey with the autoSign right
 * Returns: stringified signedTransaction (and transactionId if available)
 *          OR errorCode, errorDescription, message - if any issues
 * */


function callApiSignTransaction(_x, _x2) {
  return _callApiSignTransaction.apply(this, arguments);
}
/** Call api custodial/sign - for signing a transaction on behalf of a user
 * Requires wallet password: either user_password or user_password_encrypted param (used to decrypt user's key)
 * Requires an apiKey with the proxySign right
 * Returns: stringified signedTransaction (and transactionId if available)
 *          OR errorCode, errorDescription, message - if any issues
 * */

function _callApiSignTransaction() {
  _callApiSignTransaction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(oreIdContext, params) {
    var apiName, body, results;
    return _regeneratorRuntime().wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            apiName = _models__WEBPACK_IMPORTED_MODULE_0__.ApiEndpoint.TransactionSign;

            if (params !== null && params !== void 0 && params.autoSign) {
              (0,_helpers__WEBPACK_IMPORTED_MODULE_1__.assertHasApiKey)(oreIdContext, _models__WEBPACK_IMPORTED_MODULE_0__.ApiKeyUsedFor.AutoSigning, apiName);
            } else {
              (0,_helpers__WEBPACK_IMPORTED_MODULE_1__.assertHasApiKeyOrAccessToken)(oreIdContext, apiName);
            }

            (0,_helpers__WEBPACK_IMPORTED_MODULE_1__.assertParamsHaveRequiredValues)(params.transactionData, ['account', 'chainNetwork', 'chainAccount'], apiName);
            (0,_helpers__WEBPACK_IMPORTED_MODULE_1__.assertParamsHaveOnlyOneOfValues)(params.transactionData, ['transaction', 'signedTransaction'], apiName);
            body = composeSignBodyFromTransactionData(params);
            _context.next = 7;
            return oreIdContext.callOreIdApi(_models__WEBPACK_IMPORTED_MODULE_0__.RequestType.Post, _models__WEBPACK_IMPORTED_MODULE_0__.ApiEndpoint.TransactionSign, body, null);

          case 7:
            results = _context.sent;
            return _context.abrupt("return", mapSignResultFromApi(results));

          case 9:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _callApiSignTransaction.apply(this, arguments);
}

function callApiCustodialSignTransaction(_x3, _x4) {
  return _callApiCustodialSignTransaction.apply(this, arguments);
}

function _callApiCustodialSignTransaction() {
  _callApiCustodialSignTransaction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(oreIdContext, params) {
    var apiName, _ref3, signOptions, body, results;

    return _regeneratorRuntime().wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            apiName = _models__WEBPACK_IMPORTED_MODULE_0__.ApiEndpoint.CustodialSign;
            _ref3 = params.transactionData || {}, signOptions = _ref3.signOptions;
            (0,_helpers__WEBPACK_IMPORTED_MODULE_1__.assertHasApiKey)(oreIdContext, _models__WEBPACK_IMPORTED_MODULE_0__.ApiKeyUsedFor.ProxySigning, apiName);
            (0,_helpers__WEBPACK_IMPORTED_MODULE_1__.assertParamsHaveRequiredValues)(params.transactionData, ['account', 'chainNetwork', 'chainAccount'], apiName);
            (0,_helpers__WEBPACK_IMPORTED_MODULE_1__.assertParamsHaveOnlyOneOfValues)(params.transactionData, ['transaction', 'signedTransaction'], apiName);
            (0,_helpers__WEBPACK_IMPORTED_MODULE_1__.assertParamsHaveOnlyOneOfValues)(signOptions, ['userPassword', 'userPasswordEncrypted'], apiName);
            body = composeSignBodyFromTransactionData(params);
            _context2.next = 9;
            return oreIdContext.callOreIdApi(_models__WEBPACK_IMPORTED_MODULE_0__.RequestType.Post, _models__WEBPACK_IMPORTED_MODULE_0__.ApiEndpoint.CustodialSign, body, null);

          case 9:
            results = _context2.sent;
            return _context2.abrupt("return", mapSignResultFromApi(results));

          case 11:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));
  return _callApiCustodialSignTransaction.apply(this, arguments);
}

/***/ }),
/* 40 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getOreIdAuthUrl": () => (/* binding */ getOreIdAuthUrl),
/* harmony export */   "getOreIdNewChainAccountUrl": () => (/* binding */ getOreIdNewChainAccountUrl),
/* harmony export */   "getOreIdSignUrl": () => (/* binding */ getOreIdSignUrl),
/* harmony export */   "getRecoverAccountUrl": () => (/* binding */ getRecoverAccountUrl)
/* harmony export */ });
/* harmony import */ var _utils_helpers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(17);
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, $Symbol = "function" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, ""); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return generator._invoke = function (innerFn, self, context) { var state = "suspendedStart"; return function (method, arg) { if ("executing" === state) throw new Error("Generator is already running"); if ("completed" === state) { if ("throw" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) { if ("suspendedStart" === state) throw state = "completed", context.arg; context.dispatchException(context.arg); } else "return" === context.method && context.abrupt("return", context.arg); state = "executing"; var record = tryCatch(innerFn, self, context); if ("normal" === record.type) { if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg); } }; }(innerFn, self, context), generator; } function tryCatch(fn, obj, arg) { try { return { type: "normal", arg: fn.call(obj, arg) }; } catch (err) { return { type: "throw", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { ["next", "throw", "return"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if ("throw" !== record.type) { var result = record.arg, value = result.value; return value && "object" == _typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke("next", value, resolve, reject); }, function (err) { invoke("throw", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke("throw", error, resolve, reject); }); } reject(record.arg); } var previousPromise; this._invoke = function (method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); }; } function maybeInvokeDelegate(delegate, context) { var method = delegate.iterator[context.method]; if (undefined === method) { if (context.delegate = null, "throw" === context.method) { if (delegate.iterator["return"] && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method)) return ContinueSentinel; context.method = "throw", context.arg = new TypeError("The iterator does not provide a 'throw' method"); } return ContinueSentinel; } var record = tryCatch(method, delegate.iterator, context.arg); if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = "normal", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: "root" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if ("function" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, "constructor", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) { var ctor = "function" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, "toString", function () { return "[object Generator]"; }), exports.keys = function (object) { var keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if ("throw" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if ("root" === entry.tryLoc) return handle("end"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error("try statement without catch or finally"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if ("throw" === record.type) throw record.arg; return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, "catch": function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if ("throw" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, "next" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }


var isNullOrEmpty = _utils_helpers__WEBPACK_IMPORTED_MODULE_0__["default"].isNullOrEmpty;
/** Returns a fully formed url to create a new chain account within a user's wallet account
 *  This function calls the /new-account web endpoint
 *  It requires an apiKey in order to add an appAccessToken with new account metadata
 *  Returns: Callback returns chainAccount - for the new account */

function getOreIdNewChainAccountUrl(_x, _x2) {
  return _getOreIdNewChainAccountUrl.apply(this, arguments);
}
/** Returns a fully formed url to login a user
 *  This function calls the /auth web endpoint
 *  Returns: Callback returns account, and optionally accessToken and/or idToken for user */

function _getOreIdNewChainAccountUrl() {
  _getOreIdNewChainAccountUrl = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(oreIdContext, args) {
    var account, accountType, chainNetwork, accountOptions, provider, callbackUrl, backgroundColor, state, oreIdUrl, appAccessTokenMetadata, accessTokenParam, encodedStateParam, url;
    return _regeneratorRuntime().wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            account = args.account, accountType = args.accountType, chainNetwork = args.chainNetwork, accountOptions = args.accountOptions, provider = args.provider, callbackUrl = args.callbackUrl, backgroundColor = args.backgroundColor, state = args.state;
            oreIdUrl = oreIdContext.options.oreIdUrl; // collect additional params embedded into appAccessToken

            appAccessTokenMetadata = {
              paramsNewAccount: {
                account: account,
                accountType: accountType,
                chainNetwork: chainNetwork,
                accountOptions: accountOptions
              }
            };

            if (!(!account || !accountType || !chainNetwork || !provider || !callbackUrl)) {
              _context.next = 5;
              break;
            }

            throw new Error('Missing a required parameter');

          case 5:
            accessTokenParam = "&oauth_access_token=".concat(oreIdContext.accessToken); // optional params

            encodedStateParam = state ? "&state=".concat(state) : '';
            url = "".concat(oreIdUrl, "/new-account#provider=").concat(provider, "&chain_network=").concat(chainNetwork) + "&callback_url=".concat(encodeURIComponent(callbackUrl), "&background_color=").concat(encodeURIComponent(backgroundColor)).concat(encodedStateParam).concat(accessTokenParam);
            return _context.abrupt("return", oreIdContext.addAccessTokenAndHmacToUrl(url, appAccessTokenMetadata));

          case 9:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _getOreIdNewChainAccountUrl.apply(this, arguments);
}

function getOreIdAuthUrl(_x3, _x4) {
  return _getOreIdAuthUrl.apply(this, arguments);
}
/** Returns a fully formed url to login a user
 *  This function calls the /sign web endpoint
 *  Returns: Callback returns transactionId (if available), and optionally signedTransaction */

function _getOreIdAuthUrl() {
  _getOreIdAuthUrl = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(oreIdContext, args) {
    var code, email, phone, provider, callbackUrl, backgroundColor, state, linkToAccount, returnAccessToken, returnIdToken, oreIdUrl, encodedStateParam, linkToAccountParam, codeParam, emailParam, phoneParam, returnAccessTokenParam, returnIdTokenParam, url;
    return _regeneratorRuntime().wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            code = args.code, email = args.email, phone = args.phone, provider = args.provider, callbackUrl = args.callbackUrl, backgroundColor = args.backgroundColor, state = args.state, linkToAccount = args.linkToAccount, returnAccessToken = args.returnAccessToken, returnIdToken = args.returnIdToken;
            oreIdUrl = oreIdContext.options.oreIdUrl;

            if (!(!provider || !callbackUrl)) {
              _context2.next = 4;
              break;
            }

            throw new Error('Missing a required parameter');

          case 4:
            // optional params
            encodedStateParam = state ? "&state=".concat(state) : '';
            linkToAccountParam = linkToAccount ? "&link_to_account=".concat(linkToAccount) : ''; // handle passwordless params

            codeParam = code ? "&code=".concat(code) : '';
            emailParam = email ? "&email=".concat(encodeURIComponent(email)) : '';
            phoneParam = phone ? "&phone=".concat(encodeURIComponent(phone)) : ''; // if user passes in +12103334444, the plus sign needs to be URL encoded

            returnAccessTokenParam = returnAccessToken ? "&return_access_token=".concat(returnAccessToken) : '';
            returnIdTokenParam = returnIdToken ? "&return_id_token=".concat(returnIdToken) : '';
            url = "".concat(oreIdUrl, "/auth#provider=").concat(provider) + "".concat(codeParam).concat(emailParam).concat(phoneParam) + "&callback_url=".concat(encodeURIComponent(callbackUrl), "&background_color=").concat(encodeURIComponent(backgroundColor)).concat(linkToAccountParam).concat(encodedStateParam).concat(returnAccessTokenParam).concat(returnIdTokenParam);
            return _context2.abrupt("return", oreIdContext.addAccessTokenAndHmacToUrl(url, null));

          case 13:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));
  return _getOreIdAuthUrl.apply(this, arguments);
}

function getOreIdSignUrl(_x5, _x6) {
  return _getOreIdSignUrl.apply(this, arguments);
}
/** Returns a fully formed url to recover a user's account (e.g. change password)
 *  This function calls the /recover-account web endpoint
 *  Returns: Callback returns account updated */

function _getOreIdSignUrl() {
  _getOreIdSignUrl = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(oreIdContext, transactionData) {
    var account, chainNetwork, expireSeconds, signedTransaction, transaction, transactionRecordId, _ref, allowChainAccountSelection, broadcast, callbackUrl, multiSigChainAccounts, provider, returnSignedTransaction, state, chainAccount, oreIdUrl, encodedTransaction, encodedSignedTransaction, optionalParams, url;

    return _regeneratorRuntime().wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            account = transactionData.account, chainNetwork = transactionData.chainNetwork, expireSeconds = transactionData.expireSeconds, signedTransaction = transactionData.signedTransaction, transaction = transactionData.transaction, transactionRecordId = transactionData.transactionRecordId;
            _ref = (transactionData === null || transactionData === void 0 ? void 0 : transactionData.signOptions) || {}, allowChainAccountSelection = _ref.allowChainAccountSelection, broadcast = _ref.broadcast, callbackUrl = _ref.callbackUrl, multiSigChainAccounts = _ref.multiSigChainAccounts, provider = _ref.provider, returnSignedTransaction = _ref.returnSignedTransaction, state = _ref.state;
            chainAccount = transactionData.chainAccount;
            oreIdUrl = oreIdContext.options.oreIdUrl; // Now always appends accessToken to signUrl

            if (!(!account || !callbackUrl || !transaction && !signedTransaction)) {
              _context3.next = 6;
              break;
            }

            throw new Error('Missing a required parameter');

          case 6:
            // default chainAccount is the same as the user's account
            if (!chainAccount) {
              chainAccount = account;
            }

            encodedTransaction = _utils_helpers__WEBPACK_IMPORTED_MODULE_0__["default"].base64Encode(transaction);
            encodedSignedTransaction = _utils_helpers__WEBPACK_IMPORTED_MODULE_0__["default"].base64Encode(signedTransaction);
            optionalParams = state ? "&state=".concat(state) : '';
            optionalParams += !isNullOrEmpty(transaction) ? "&transaction=".concat(encodedTransaction) : '';
            optionalParams += !isNullOrEmpty(signedTransaction) ? "&signed_transaction=".concat(encodedSignedTransaction) : '';
            optionalParams += !isNullOrEmpty(allowChainAccountSelection) ? "&allow_chain_account_selection=".concat(allowChainAccountSelection) : '';
            optionalParams += !isNullOrEmpty(expireSeconds) ? "&expire_seconds=".concat(expireSeconds) : '';
            optionalParams += !isNullOrEmpty(multiSigChainAccounts) ? "&multisig_chain_accounts=".concat(multiSigChainAccounts) : '';
            optionalParams += !isNullOrEmpty(provider) ? "&provider=".concat(provider) : '';
            optionalParams += !isNullOrEmpty(returnSignedTransaction) ? "&return_signed_transaction=".concat(returnSignedTransaction) : '';
            optionalParams += !isNullOrEmpty(transactionRecordId) ? "&transaction_record_id=".concat(transactionRecordId) : '';
            optionalParams += "&oauth_access_token=".concat(oreIdContext.accessToken); // prettier-ignore

            url = "".concat(oreIdUrl, "/sign#account=").concat(account, "&broadcast=").concat(broadcast, "&callback_url=").concat(encodeURIComponent(callbackUrl), "&chain_account=").concat(chainAccount, "&chain_network=").concat(encodeURIComponent(chainNetwork)).concat(optionalParams);
            return _context3.abrupt("return", oreIdContext.addAccessTokenAndHmacToUrl(url, null));

          case 21:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3);
  }));
  return _getOreIdSignUrl.apply(this, arguments);
}

function getRecoverAccountUrl(_x7, _x8) {
  return _getRecoverAccountUrl.apply(this, arguments);
}

function _getRecoverAccountUrl() {
  _getRecoverAccountUrl = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(oreIdContext, args) {
    var account, code, email, phone, provider, callbackUrl, backgroundColor, state, recoverAction, overrideAppAccessToken, oreIdUrl, accessTokenParam, encodedStateParam, actionTypeParam, codeParam, emailParam, phoneParam, url;
    return _regeneratorRuntime().wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            account = args.account, code = args.code, email = args.email, phone = args.phone, provider = args.provider, callbackUrl = args.callbackUrl, backgroundColor = args.backgroundColor, state = args.state, recoverAction = args.recoverAction, overrideAppAccessToken = args.overrideAppAccessToken;
            oreIdUrl = oreIdContext.options.oreIdUrl;

            if (!(!provider || !callbackUrl)) {
              _context4.next = 4;
              break;
            }

            throw new Error('Missing a required parameter');

          case 4:
            accessTokenParam = "&oauth_access_token=".concat(oreIdContext.accessToken); // optional params

            encodedStateParam = state ? "&state=".concat(state) : '';
            actionTypeParam = recoverAction ? "&recover_action=".concat(recoverAction) : ''; // handle passwordless params

            codeParam = code ? "&code=".concat(code) : '';
            emailParam = email ? "&email=".concat(encodeURIComponent(email)) : '';
            phoneParam = phone ? "&phone=".concat(encodeURIComponent(phone)) : ''; // if user passes in +12103334444, the plus sign needs to be URL encoded

            url = "".concat(oreIdUrl, "/recover-account#provider=").concat(provider) + "&account=".concat(account) + "".concat(codeParam).concat(emailParam).concat(phoneParam) + "&callback_url=".concat(encodeURIComponent(callbackUrl), "&background_color=").concat(encodeURIComponent(backgroundColor)).concat(actionTypeParam).concat(encodedStateParam).concat(accessTokenParam);
            return _context4.abrupt("return", oreIdContext.addAccessTokenAndHmacToUrl(url, null, overrideAppAccessToken));

          case 12:
          case "end":
            return _context4.stop();
        }
      }
    }, _callee4);
  }));
  return _getRecoverAccountUrl.apply(this, arguments);
}

/***/ }),
/* 41 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ TransitHelper)
/* harmony export */ });
/* harmony import */ var _aikon_eos_transit__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(42);
/* harmony import */ var _utils_chainUtils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(61);
/* harmony import */ var _transitProviders__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(71);
/* harmony import */ var _utils_helpers__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(17);
/* harmony import */ var _models__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(5);
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, $Symbol = "function" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, ""); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return generator._invoke = function (innerFn, self, context) { var state = "suspendedStart"; return function (method, arg) { if ("executing" === state) throw new Error("Generator is already running"); if ("completed" === state) { if ("throw" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) { if ("suspendedStart" === state) throw state = "completed", context.arg; context.dispatchException(context.arg); } else "return" === context.method && context.abrupt("return", context.arg); state = "executing"; var record = tryCatch(innerFn, self, context); if ("normal" === record.type) { if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg); } }; }(innerFn, self, context), generator; } function tryCatch(fn, obj, arg) { try { return { type: "normal", arg: fn.call(obj, arg) }; } catch (err) { return { type: "throw", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { ["next", "throw", "return"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if ("throw" !== record.type) { var result = record.arg, value = result.value; return value && "object" == _typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke("next", value, resolve, reject); }, function (err) { invoke("throw", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke("throw", error, resolve, reject); }); } reject(record.arg); } var previousPromise; this._invoke = function (method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); }; } function maybeInvokeDelegate(delegate, context) { var method = delegate.iterator[context.method]; if (undefined === method) { if (context.delegate = null, "throw" === context.method) { if (delegate.iterator["return"] && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method)) return ContinueSentinel; context.method = "throw", context.arg = new TypeError("The iterator does not provide a 'throw' method"); } return ContinueSentinel; } var record = tryCatch(method, delegate.iterator, context.arg); if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = "normal", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: "root" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if ("function" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, "constructor", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) { var ctor = "function" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, "toString", function () { return "[object Generator]"; }), exports.keys = function (object) { var keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if ("throw" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if ("root" === entry.tryLoc) return handle("end"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error("try statement without catch or finally"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if ("throw" === record.type) throw record.arg; return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, "catch": function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if ("throw" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, "next" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }







var TransitHelper = /*#__PURE__*/function () {
  function TransitHelper(args) {
    _classCallCheck(this, TransitHelper);

    this._oreIdContext = args.oreIdContext;
    this._user = args.user;
    this.transitAccessContexts = {};
  }

  _createClass(TransitHelper, [{
    key: "installTransitProviders",
    value:
    /** Verifies that all plugins provided work (can be constructed)
     *  Stores a list of the installed providerNames (mapped to ExternalWalletType) for all working plugins in transitProvidersInstalled
     */
    function () {
      var _installTransitProviders = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(eosTransitWalletProviders) {
        return _regeneratorRuntime().wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                // Executes each provider's contructor to verify it's working
                // stores all the providerName's for all plugins into transitProvidersInstalled array
                this._oreIdContext.transitProvidersInstalled = (eosTransitWalletProviders || []).map(function (makeWalletProvider) {
                  try {
                    // if there is an error while initiating a provider dont break the whole process.
                    return makeWalletProvider(null);
                  } catch (e) {
                    console.log("Couldn't initiate a wallet provider. ".concat(e));
                    return null;
                  }
                }) // instantiate the provider with null network so we can get the id
                .filter(function (walletProvider) {
                  return walletProvider && true;
                }).map(function (walletProvider) {
                  return (0,_transitProviders__WEBPACK_IMPORTED_MODULE_2__.getTransitProviderAttributesByProviderId)(walletProvider.id).providerName;
                });

              case 1:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function installTransitProviders(_x) {
        return _installTransitProviders.apply(this, arguments);
      }

      return installTransitProviders;
    }()
    /** Inialize EOS Transit wallet provider and return TransitWallet instance */

  }, {
    key: "setupTransitWallet",
    value: function () {
      var _setupTransitWallet = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(_ref) {
        var walletType, chainNetwork, _getTransitProviderAt, providerId, chainContext, transitProvider, transitWallet;

        return _regeneratorRuntime().wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                walletType = _ref.walletType, chainNetwork = _ref.chainNetwork;
                this.assertHasProviderInstalled(walletType, _models__WEBPACK_IMPORTED_MODULE_4__.ExternalWalletInterface.Transit);
                this.assertProviderValidForChainNetwork(walletType, chainNetwork);
                _getTransitProviderAt = (0,_transitProviders__WEBPACK_IMPORTED_MODULE_2__.getTransitProviderAttributes)(walletType), providerId = _getTransitProviderAt.providerId;
                _context2.next = 6;
                return this.getOrCreateTransitAccessContext(chainNetwork);

              case 6:
                chainContext = _context2.sent;
                transitProvider = chainContext.getWalletProviders().find(function (wp) {
                  return wp.id === providerId;
                });
                transitWallet = chainContext.initWallet(transitProvider);
                _context2.next = 11;
                return transitWallet.connect();

              case 11:
                _context2.next = 13;
                return this.waitWhileWalletIsBusy(transitWallet, walletType);

              case 13:
                return _context2.abrupt("return", transitWallet);

              case 14:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function setupTransitWallet(_x2) {
        return _setupTransitWallet.apply(this, arguments);
      }

      return setupTransitWallet;
    }()
    /** Creates an EOS Transit WalletContent for the specified network and plugins
     *  Caches the context for future calls to this function */

  }, {
    key: "getOrCreateTransitAccessContext",
    value: function () {
      var _getOrCreateTransitAccessContext = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(chainNetwork) {
        var _this$_oreIdContext$o, appName, _this$_oreIdContext$o2, eosTransitWalletProviders, networkConfig, isNotEosNetwork, walletContext;

        return _regeneratorRuntime().wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                _this$_oreIdContext$o = this._oreIdContext.options, appName = _this$_oreIdContext$o.appName, _this$_oreIdContext$o2 = _this$_oreIdContext$o.eosTransitWalletProviders, eosTransitWalletProviders = _this$_oreIdContext$o2 === void 0 ? [] : _this$_oreIdContext$o2;

                if (!this.transitAccessContexts[chainNetwork]) {
                  _context3.next = 3;
                  break;
                }

                return _context3.abrupt("return", this.transitAccessContexts[chainNetwork]);

              case 3:
                _context3.next = 5;
                return this._oreIdContext.settings.getChainNetworkNextworkConfig(chainNetwork);

              case 5:
                networkConfig = _context3.sent;
                _context3.next = 8;
                return this._oreIdContext.settings.isNotEosNetwork(chainNetwork);

              case 8:
                isNotEosNetwork = _context3.sent;
                walletContext = (0,_aikon_eos_transit__WEBPACK_IMPORTED_MODULE_0__.initAccessContext)({
                  appName: appName || 'missing appName',
                  network: networkConfig,
                  walletProviders: eosTransitWalletProviders,
                  isNotEosNetwork: isNotEosNetwork // Tells eos-transit to not use EOS specific rpc calls

                }); // cache for future use

                this.transitAccessContexts[chainNetwork] = walletContext;
                return _context3.abrupt("return", walletContext);

              case 12:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function getOrCreateTransitAccessContext(_x3) {
        return _getOrCreateTransitAccessContext.apply(this, arguments);
      }

      return getOrCreateTransitAccessContext;
    }() // For Scatter: chainAccount is needed since login will try to use the default account (in scatter
    // and it wil fail to sign the transaction

    /** Handles the call to connect() function on the Transit provider */

  }, {
    key: "connectToTransitProvider",
    value: function () {
      var _connectToTransitProvider = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(_ref2) {
        var walletType, chainNetwork, _ref2$chainAccount, chainAccount, response, transitWallet, _transitWallet$auth, accountName, permission, publicKey, errorString, hasError, errorMessage, errMsg;

        return _regeneratorRuntime().wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                walletType = _ref2.walletType, chainNetwork = _ref2.chainNetwork, _ref2$chainAccount = _ref2.chainAccount, chainAccount = _ref2$chainAccount === void 0 ? null : _ref2$chainAccount;
                this.assertHasProviderInstalled(walletType, _models__WEBPACK_IMPORTED_MODULE_4__.ExternalWalletInterface.Transit);
                this.assertProviderValidForChainNetwork(walletType, chainNetwork);
                _context4.prev = 3;
                _context4.next = 6;
                return this.setupTransitWallet({
                  walletType: walletType,
                  chainNetwork: chainNetwork
                });

              case 6:
                transitWallet = _context4.sent;
                response = {
                  transitWallet: transitWallet
                }; // some providers require login flow to connect (usually this means connect() does nothing but login selects an account)

                if (!(0,_transitProviders__WEBPACK_IMPORTED_MODULE_2__.getTransitProviderAttributes)(walletType).requiresLogin) {
                  _context4.next = 12;
                  break;
                }

                if (transitWallet.authenticated) {
                  _context4.next = 12;
                  break;
                }

                _context4.next = 12;
                return this.loginToTransitProvider(transitWallet, walletType, chainNetwork, chainAccount);

              case 12:
                if (!transitWallet.connected) {
                  _context4.next = 20;
                  break;
                }

                if (!(transitWallet.authenticated && transitWallet.auth)) {
                  _context4.next = 18;
                  break;
                }

                _context4.next = 16;
                return this.updateOreAccountPermissionsfromTransitWalletAuth(transitWallet, walletType);

              case 16:
                _transitWallet$auth = transitWallet.auth, accountName = _transitWallet$auth.accountName, permission = _transitWallet$auth.permission, publicKey = _transitWallet$auth.publicKey;
                response = {
                  isLoggedIn: true,
                  chainAccount: accountName,
                  permissions: [{
                    name: permission,
                    publicKey: publicKey
                  }],
                  // todo: add parent permission when available
                  transitWallet: transitWallet,
                  provider: walletType
                };

              case 18:
                _context4.next = 24;
                break;

              case 20:
                errorString = "".concat(walletType, " not connected!");
                hasError = transitWallet.hasError, errorMessage = transitWallet.errorMessage;

                if (hasError) {
                  errorString += " Error: ".concat(errorMessage);
                }

                throw new Error(errorString);

              case 24:
                _context4.next = 31;
                break;

              case 26:
                _context4.prev = 26;
                _context4.t0 = _context4["catch"](3);
                errMsg = "Failed to connect to ".concat(walletType, " on ").concat(chainNetwork, ". ").concat((_context4.t0 === null || _context4.t0 === void 0 ? void 0 : _context4.t0.message) || '');
                console.log("connectToTransitProvider:".concat(errMsg), _context4.t0);
                throw new Error(errMsg);

              case 31:
                _context4.prev = 31;

                this._oreIdContext.setIsBusy(false);

                return _context4.finish(31);

              case 34:
                return _context4.abrupt("return", response);

              case 35:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this, [[3, 26, 31, 34]]);
      }));

      function connectToTransitProvider(_x4) {
        return _connectToTransitProvider.apply(this, arguments);
      }

      return connectToTransitProvider;
    }()
    /** Handles the call to login() function on the Transit provider
     *  If required by provider, calls discover() and/or logout() before calling login()
     *  IMPORTANT: use loginToTransitProvider() instead of this function */

  }, {
    key: "doTransitProviderLogin",
    value: function () {
      var _doTransitProviderLogin = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(transitWallet, chainAccount, chainNetwork, walletType) {
        var retryCount,
            info,
            _getTransitProviderAt2,
            requiresDiscoverToLogin,
            discoveryData,
            foundData,
            _ref3,
            transitAccountName,
            _args5 = arguments;

        return _regeneratorRuntime().wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                retryCount = _args5.length > 4 && _args5[4] !== undefined ? _args5[4] : 0;
                this.assertHasProviderInstalled(walletType, _models__WEBPACK_IMPORTED_MODULE_4__.ExternalWalletInterface.Transit);
                this.assertProviderValidForChainNetwork(walletType, chainNetwork); // we should store the index for ledger in the db and pass it along
                // but for now we need to discover the ledger index

                _getTransitProviderAt2 = (0,_transitProviders__WEBPACK_IMPORTED_MODULE_2__.getTransitProviderAttributes)(walletType), requiresDiscoverToLogin = _getTransitProviderAt2.requiresDiscoverToLogin;

                if (!requiresDiscoverToLogin) {
                  _context5.next = 18;
                  break;
                }

                _context5.next = 7;
                return transitWallet.discover(this.discoverOptionsForProvider(walletType));

              case 7:
                discoveryData = _context5.sent;
                foundData = this.findAccountInDiscoverData(discoveryData, chainAccount);

                if (!foundData) {
                  _context5.next = 15;
                  break;
                }

                _context5.next = 12;
                return transitWallet.login(chainAccount, foundData.authorization);

              case 12:
                info = _context5.sent;
                _context5.next = 16;
                break;

              case 15:
                throw new Error("Account ".concat(chainAccount, " not found in wallet"));

              case 16:
                _context5.next = 21;
                break;

              case 18:
                _context5.next = 20;
                return transitWallet.login(chainAccount);

              case 20:
                info = _context5.sent;

              case 21:
                if (!(retryCount > 2)) {
                  _context5.next = 23;
                  break;
                }

                return _context5.abrupt("return", null);

              case 23:
                _ref3 = (transitWallet === null || transitWallet === void 0 ? void 0 : transitWallet.auth) || {}, transitAccountName = _ref3.accountName;

                if (!(chainAccount && transitAccountName !== chainAccount)) {
                  _context5.next = 28;
                  break;
                }

                _context5.next = 27;
                return transitWallet.logout();

              case 27:
                this.doTransitProviderLogin(transitWallet, chainAccount, chainNetwork, walletType, retryCount + 1);

              case 28:
                return _context5.abrupt("return", info);

              case 29:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      function doTransitProviderLogin(_x5, _x6, _x7, _x8) {
        return _doTransitProviderLogin.apply(this, arguments);
      }

      return doTransitProviderLogin;
    }()
    /** Login using the wallet provider */

  }, {
    key: "loginWithTransitProvider",
    value: function () {
      var _loginWithTransitProvider = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(loginOptions) {
        var provider, chainAccount, chainNetwork, walletType, response, wallet;
        return _regeneratorRuntime().wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                provider = loginOptions.walletType, chainAccount = loginOptions.chainAccount, chainNetwork = loginOptions.chainNetwork; // Connect to Provider

                walletType = _utils_helpers__WEBPACK_IMPORTED_MODULE_3__["default"].mapAuthProviderToWalletType(provider);
                _context6.next = 4;
                return this.connectToTransitProvider({
                  walletType: walletType,
                  chainAccount: chainAccount,
                  chainNetwork: chainNetwork
                });

              case 4:
                response = _context6.sent;
                wallet = response === null || response === void 0 ? void 0 : response.transitWallet; // Login if needed - if not logged-in by connectToTransitProvider, then call login explicitly

                if (wallet !== null && wallet !== void 0 && wallet.auth) {
                  _context6.next = 11;
                  break;
                }

                _context6.next = 9;
                return this.loginToTransitProvider(wallet, provider, chainNetwork, chainAccount);

              case 9:
                _context6.next = 11;
                return this.updateOreAccountPermissionsfromTransitWalletAuth(wallet, provider);

              case 11:
                return _context6.abrupt("return", response);

              case 12:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6, this);
      }));

      function loginWithTransitProvider(_x9) {
        return _loginWithTransitProvider.apply(this, arguments);
      }

      return loginWithTransitProvider;
    }()
    /** Handles the call to login() function on the Transit provider */

  }, {
    key: "loginToTransitProvider",
    value: function () {
      var _loginToTransitProvider = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7(transitWallet, walletType, chainNetwork) {
        var chainAccount,
            _error$message,
            message,
            _args7 = arguments;

        return _regeneratorRuntime().wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                chainAccount = _args7.length > 3 && _args7[3] !== undefined ? _args7[3] : null;
                this.assertHasProviderInstalled(walletType, _models__WEBPACK_IMPORTED_MODULE_4__.ExternalWalletInterface.Transit);
                this.assertProviderValidForChainNetwork(walletType, chainNetwork);
                _context7.prev = 3;
                _context7.next = 6;
                return this.doTransitProviderLogin(transitWallet, chainAccount, chainNetwork, walletType);

              case 6:
                _context7.next = 16;
                break;

              case 8:
                _context7.prev = 8;
                _context7.t0 = _context7["catch"](3);
                _error$message = _context7.t0.message, message = _error$message === void 0 ? '' : _error$message;

                if (!message.includes('unknown key (boost::tuples::tuple')) {
                  _context7.next = 15;
                  break;
                }

                throw new Error("The account selected by the wallet for login isn't on the ".concat(chainNetwork, " chain"));

              case 15:
                throw _context7.t0;

              case 16:
                _context7.prev = 16;
                _context7.next = 19;
                return this.waitWhileWalletIsBusy(transitWallet, walletType);

              case 19:
                return _context7.finish(16);

              case 20:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee7, this, [[3, 8, 16, 20]]);
      }));

      function loginToTransitProvider(_x10, _x11, _x12) {
        return _loginToTransitProvider.apply(this, arguments);
      }

      return loginToTransitProvider;
    }()
    /** Throw if the required plug-in is not installed */

  }, {
    key: "assertHasProviderInstalled",
    value: function assertHasProviderInstalled(provider, providerType) {
      if (providerType === _models__WEBPACK_IMPORTED_MODULE_4__.ExternalWalletInterface.Transit) {
        if (!this.hasTransitProvider(provider)) {
          throw Error("Transit provider:\"".concat(provider, "\" not installed. Please pass it in via eosTransitWalletProviders."));
        }
      }
    }
    /** Discovers keys in a wallet provider.
     *  Any new keys discovered in wallet are added to user's ORE ID record.
     *  If the provider doesnt support a discover() function, and requiresLogoutLoginToDiscover == true, attempts a logout then login instead.
     */

  }, {
    key: "discoverWithTransit",
    value: function () {
      var _discoverWithTransit = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8(discoverOptions) {
        var walletType, _discoverOptions$chai, chainNetwork, oreAccount, discoveryPathIndexList, result, transitWallet;

        return _regeneratorRuntime().wrap(function _callee8$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                walletType = discoverOptions.walletType, _discoverOptions$chai = discoverOptions.chainNetwork, chainNetwork = _discoverOptions$chai === void 0 ? _models__WEBPACK_IMPORTED_MODULE_4__.ChainNetwork.EosMain : _discoverOptions$chai, oreAccount = discoverOptions.oreAccount, discoveryPathIndexList = discoverOptions.discoveryPathIndexList;
                this.assertProviderValidForChainNetwork(walletType, chainNetwork);
                result = null;

                if (!this.canDiscover(walletType)) {
                  _context8.next = 9;
                  break;
                }

                _context8.next = 6;
                return this.discoverCredentialsInTransitWallet(chainNetwork, walletType, oreAccount, discoveryPathIndexList);

              case 6:
                result = _context8.sent;
                _context8.next = 21;
                break;

              case 9:
                _context8.next = 11;
                return this.setupTransitWallet({
                  walletType: walletType,
                  chainNetwork: chainNetwork
                });

              case 11:
                transitWallet = _context8.sent;

                if (!this.requiresLogoutLoginToDiscover(walletType)) {
                  _context8.next = 20;
                  break;
                }

                _context8.next = 15;
                return transitWallet.logout();

              case 15:
                _context8.next = 17;
                return transitWallet.login();

              case 17:
                this.updateOreAccountPermissionsfromTransitWalletAuth(transitWallet, walletType);
                _context8.next = 21;
                break;

              case 20:
                console.log('Discover not working for walletType: ', walletType);

              case 21:
                return _context8.abrupt("return", result);

              case 22:
              case "end":
                return _context8.stop();
            }
          }
        }, _callee8, this);
      }));

      function discoverWithTransit(_x13) {
        return _discoverWithTransit.apply(this, arguments);
      }

      return discoverWithTransit;
    }()
    /** Discover all accounts (and related permissions) in the wallet and add them to ORE ID
     * Note: Most wallets don't support discovery */

  }, {
    key: "discoverCredentialsInTransitWallet",
    value: function () {
      var _discoverCredentialsInTransitWallet = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee10(chainNetwork, walletType, oreAccount, discoveryPathIndexList) {
        var _this = this;

        var accountsAndPermissions, transitWallet, discoveryData, credentials;
        return _regeneratorRuntime().wrap(function _callee10$(_context10) {
          while (1) {
            switch (_context10.prev = _context10.next) {
              case 0:
                accountsAndPermissions = [];
                _context10.prev = 1;
                _context10.next = 4;
                return this.setupTransitWallet({
                  walletType: walletType,
                  chainNetwork: chainNetwork
                });

              case 4:
                transitWallet = _context10.sent;

                this._oreIdContext.setIsBusy(true);

                _context10.next = 8;
                return transitWallet.discover(this.discoverOptionsForProvider(walletType, discoveryPathIndexList));

              case 8:
                discoveryData = _context10.sent;
                // this data looks like this: keyToAccountMap[accounts[{account,permission}]] - e.g. keyToAccountMap[accounts[{'myaccount':'owner','myaccount':'active'}]]
                credentials = discoveryData.keyToAccountMap; // for each entry in the array, add permission to ore account if not already present

                _context10.next = 12;
                return _utils_helpers__WEBPACK_IMPORTED_MODULE_3__["default"].asyncForEach(credentials, /*#__PURE__*/function () {
                  var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee9(credential) {
                    var _credential$accounts, accounts, publicKey, _this$_user, _accounts, _accounts$, account, authorization, permissions, transitChainNetwork;

                    return _regeneratorRuntime().wrap(function _callee9$(_context9) {
                      while (1) {
                        switch (_context9.prev = _context9.next) {
                          case 0:
                            _credential$accounts = credential.accounts, accounts = _credential$accounts === void 0 ? [] : _credential$accounts, publicKey = credential.key; // ethereum may not have a public key - dont save if missing

                            if (!(accounts.length > 0 && !!publicKey)) {
                              _context9.next = 10;
                              break;
                            }

                            _accounts = _slicedToArray(accounts, 1), _accounts$ = _accounts[0], account = _accounts$.account, authorization = _accounts$.authorization; // get first item in array

                            permissions = [{
                              account: account,
                              publicKey: publicKey,
                              name: authorization,
                              parent: null
                            }]; // Get the chainNetwork from the transitWallet - in case the wallet provider switches networks somehow

                            _context9.next = 6;
                            return _this.getChainNetworkFromTransitWallet(transitWallet);

                          case 6:
                            transitChainNetwork = _context9.sent;
                            _context9.next = 9;
                            return (_this$_user = _this._user) === null || _this$_user === void 0 ? void 0 : _this$_user.addWalletPermissionsToOreIdAccount({
                              chainAccount: account,
                              chainNetwork: transitChainNetwork,
                              permissions: permissions,
                              walletType: walletType
                            });

                          case 9:
                            accountsAndPermissions = accountsAndPermissions.concat(permissions);

                          case 10:
                          case "end":
                            return _context9.stop();
                        }
                      }
                    }, _callee9);
                  }));

                  return function (_x18) {
                    return _ref4.apply(this, arguments);
                  };
                }());

              case 12:
                _context10.prev = 12;

                this._oreIdContext.setIsBusy(false);

                return _context10.finish(12);

              case 15:
                return _context10.abrupt("return", accountsAndPermissions);

              case 16:
              case "end":
                return _context10.stop();
            }
          }
        }, _callee10, this, [[1,, 12, 15]]);
      }));

      function discoverCredentialsInTransitWallet(_x14, _x15, _x16, _x17) {
        return _discoverCredentialsInTransitWallet.apply(this, arguments);
      }

      return discoverCredentialsInTransitWallet;
    }()
    /** Discover options composed for specific provider */

  }, {
    key: "discoverOptionsForProvider",
    value: function discoverOptionsForProvider(provider) {
      var pathIndexListParam = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
      var pathIndexList;
      var keyLookupFunc;
      var walletProviderType = _utils_helpers__WEBPACK_IMPORTED_MODULE_3__["default"].mapAuthProviderToWalletType(provider);

      if (this.hasTransitProvider(walletProviderType)) {
        var walletProvider = _utils_helpers__WEBPACK_IMPORTED_MODULE_3__["default"].mapAuthProviderToWalletType(provider);

        var _getTransitProviderAt3 = (0,_transitProviders__WEBPACK_IMPORTED_MODULE_2__.getTransitProviderAttributes)(walletProvider),
            defaultDiscoveryPathIndexList = _getTransitProviderAt3.defaultDiscoveryPathIndexList,
            discoveryKeyLookupFunc = _getTransitProviderAt3.discoveryKeyLookupFunc;

        pathIndexList = pathIndexListParam || defaultDiscoveryPathIndexList || [];
        keyLookupFunc = discoveryKeyLookupFunc; // optional
      }

      var response = {
        pathIndexList: pathIndexList
      };

      if (keyLookupFunc) {
        response.keyLookupFunc = keyLookupFunc;
      }

      return response;
    }
  }, {
    key: "findAccountInDiscoverData",
    value: function findAccountInDiscoverData(discoveryData, chainAccount) {
      var result = discoveryData.keyToAccountMap.find(function (data) {
        return data.accounts.find(function (acct) {
          return acct.account === chainAccount;
        });
      });

      if (result) {
        var authorization = 'active'; // could active not exist?  If not, then just get first permission
        // this may be completely unecessary. remove if so.

        var active = result.accounts.find(function (acct) {
          return acct.authorization === 'active';
        });

        if (!active) {
          var _result$accounts = _slicedToArray(result.accounts, 1),
              first = _result$accounts[0];

          if (first) {
            // eslint-disable-next-line prefer-destructuring
            authorization = first.authorization;
          }
        }

        return {
          index: result.index,
          key: result.key,
          authorization: authorization
        };
      }

      return null;
    }
    /** sign with a Transit wallet */

  }, {
    key: "signWithTransitProvider",
    value: function () {
      var _signWithTransitProvider = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee11(transactionData, walletType) {
        var signedTransaction, chainNetwork, chainAccount, _yield$this$connectTo, transitWallet, _getTransitProviderAt4, chainType;

        return _regeneratorRuntime().wrap(function _callee11$(_context11) {
          while (1) {
            switch (_context11.prev = _context11.next) {
              case 0:
                chainNetwork = transactionData.chainNetwork, chainAccount = transactionData.chainAccount;
                this.assertHasProviderInstalled(walletType, _models__WEBPACK_IMPORTED_MODULE_4__.ExternalWalletInterface.Transit);
                this.assertProviderValidForChainNetwork(walletType, chainNetwork); // connect to wallet

                _context11.next = 5;
                return this.connectToTransitProvider({
                  walletType: walletType,
                  chainNetwork: chainNetwork,
                  chainAccount: chainAccount
                });

              case 5:
                _yield$this$connectTo = _context11.sent;
                transitWallet = _yield$this$connectTo.transitWallet;
                _context11.prev = 7;

                // sign with transit wallet
                this._oreIdContext.setIsBusy(true);

                _getTransitProviderAt4 = (0,_transitProviders__WEBPACK_IMPORTED_MODULE_2__.getTransitProviderAttributes)(walletType), chainType = _getTransitProviderAt4.chainType; // EOS - use eosJS to sign (eosApi.transact)

                if (!(chainType === _models__WEBPACK_IMPORTED_MODULE_4__.ChainPlatformType.eos)) {
                  _context11.next = 16;
                  break;
                }

                _context11.next = 13;
                return this.signTransactionWithTransitAndEosSDK(transactionData, transitWallet);

              case 13:
                signedTransaction = _context11.sent;
                _context11.next = 29;
                break;

              case 16:
                if (!(chainType === _models__WEBPACK_IMPORTED_MODULE_4__.ChainPlatformType.algorand)) {
                  _context11.next = 22;
                  break;
                }

                _context11.next = 19;
                return this.signTransactionWithTransitAndAlgorandSDK(transactionData, transitWallet);

              case 19:
                signedTransaction = _context11.sent;
                _context11.next = 29;
                break;

              case 22:
                if (!(chainType === _models__WEBPACK_IMPORTED_MODULE_4__.ChainPlatformType.ethereum)) {
                  _context11.next = 28;
                  break;
                }

                _context11.next = 25;
                return this.signTransactionWithTransitAndEthereumSDK(transactionData, transitWallet);

              case 25:
                signedTransaction = _context11.sent;
                _context11.next = 29;
                break;

              case 28:
                throw new Error("signWithTransitProvider doesnt support chain type: ".concat(chainType));

              case 29:
                _context11.next = 35;
                break;

              case 31:
                _context11.prev = 31;
                _context11.t0 = _context11["catch"](7);
                console.error(_context11.t0);
                throw _context11.t0;

              case 35:
                _context11.prev = 35;

                this._oreIdContext.setIsBusy(false);

                return _context11.finish(35);

              case 38:
                // Convert serializedTransaction from UInt8Array to Buffer
                // i.e. when stringified change from: '{\"0\":129,\"1\":163'} to {"type":"Buffer","data":[129,163]}
                if (signedTransaction.serializedTransaction) {
                  signedTransaction.serializedTransaction = Buffer.from(signedTransaction.serializedTransaction);
                }

                return _context11.abrupt("return", {
                  signedTransaction: signedTransaction
                });

              case 40:
              case "end":
                return _context11.stop();
            }
          }
        }, _callee11, this, [[7, 31, 35, 38]]);
      }));

      function signWithTransitProvider(_x19, _x20) {
        return _signWithTransitProvider.apply(this, arguments);
      }

      return signWithTransitProvider;
    }()
  }, {
    key: "signStringWithTransitProvider",
    value: function () {
      var _signStringWithTransitProvider = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee12(_ref5) {
        var walletType, chainNetwork, string, message, metadata, _yield$this$connectTo2, transitWallet, response;

        return _regeneratorRuntime().wrap(function _callee12$(_context12) {
          while (1) {
            switch (_context12.prev = _context12.next) {
              case 0:
                walletType = _ref5.walletType, chainNetwork = _ref5.chainNetwork, string = _ref5.string, message = _ref5.message, metadata = _ref5.metadata;
                this.assertHasProviderInstalled(walletType, _models__WEBPACK_IMPORTED_MODULE_4__.ExternalWalletInterface.Transit);
                this.assertProviderValidForChainNetwork(walletType, chainNetwork);
                _context12.next = 5;
                return this.connectToTransitProvider({
                  walletType: walletType,
                  chainNetwork: chainNetwork
                });

              case 5:
                _yield$this$connectTo2 = _context12.sent;
                transitWallet = _yield$this$connectTo2.transitWallet;
                _context12.prev = 7;

                this._oreIdContext.setIsBusy(true);

                _context12.next = 11;
                return transitWallet.signArbitrary(string, message, metadata);

              case 11:
                response = _context12.sent;
                return _context12.abrupt("return", {
                  signedString: response
                });

              case 15:
                _context12.prev = 15;
                _context12.t0 = _context12["catch"](7);
                console.error(_context12.t0);
                throw _context12.t0;

              case 19:
                _context12.prev = 19;

                this._oreIdContext.setIsBusy(false);

                return _context12.finish(19);

              case 22:
              case "end":
                return _context12.stop();
            }
          }
        }, _callee12, this, [[7, 15, 19, 22]]);
      }));

      function signStringWithTransitProvider(_x21) {
        return _signStringWithTransitProvider.apply(this, arguments);
      }

      return signStringWithTransitProvider;
    }()
    /** sign transaction using EOS SDK .transact function */

  }, {
    key: "signTransactionWithTransitAndEosSDK",
    value: function () {
      var _signTransactionWithTransitAndEosSDK = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee13(transactionData, transitWallet) {
        var expireSeconds, transaction, _ref6, broadcast, _yield$transitWallet$, signatures, serializedTransaction;

        return _regeneratorRuntime().wrap(function _callee13$(_context13) {
          while (1) {
            switch (_context13.prev = _context13.next) {
              case 0:
                expireSeconds = transactionData.expireSeconds, transaction = transactionData.transaction;
                _ref6 = (transactionData === null || transactionData === void 0 ? void 0 : transactionData.signOptions) || {}, broadcast = _ref6.broadcast;
                _context13.next = 4;
                return transitWallet.eosApi.transact({
                  actions: [transaction]
                }, {
                  broadcast: broadcast,
                  blocksBehind: 3,
                  expireSeconds: expireSeconds || 60
                });

              case 4:
                _yield$transitWallet$ = _context13.sent;
                signatures = _yield$transitWallet$.signatures;
                serializedTransaction = _yield$transitWallet$.serializedTransaction;
                _context13.next = 9;
                return this.callDiscoverAfterSign(transactionData);

              case 9:
                return _context13.abrupt("return", {
                  signatures: signatures,
                  serializedTransaction: serializedTransaction
                });

              case 10:
              case "end":
                return _context13.stop();
            }
          }
        }, _callee13, this);
      }));

      function signTransactionWithTransitAndEosSDK(_x22, _x23) {
        return _signTransactionWithTransitAndEosSDK.apply(this, arguments);
      }

      return signTransactionWithTransitAndEosSDK;
    }()
    /** sign transaction using Algorand SDK */

  }, {
    key: "signTransactionWithTransitAndAlgorandSDK",
    value: function () {
      var _signTransactionWithTransitAndAlgorandSDK = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee14(transactionData, transitWallet) {
        var chainNetwork, transaction, networkConfig, signParams, _yield$transitWallet$2, signatures, serializedTransaction;

        return _regeneratorRuntime().wrap(function _callee14$(_context14) {
          while (1) {
            switch (_context14.prev = _context14.next) {
              case 0:
                chainNetwork = transactionData.chainNetwork, transaction = transactionData.transaction; // Other chains - use sign function on walletProvider

                _context14.next = 3;
                return this._oreIdContext.settings.getChainNetworkNextworkConfig(chainNetwork);

              case 3:
                networkConfig = _context14.sent;
                signParams = {
                  chainId: networkConfig.chainId,
                  // Chain transaction is for
                  requiredKeys: null,
                  // not used by Algorand signatureProvider
                  serializedTransaction: (0,_utils_chainUtils__WEBPACK_IMPORTED_MODULE_1__.msgPackEncode)(transaction),
                  // Transaction to sign
                  abis: null // not used by Algorand signatureProvider

                };
                _context14.next = 7;
                return transitWallet.provider.signatureProvider.sign(signParams);

              case 7:
                _yield$transitWallet$2 = _context14.sent;
                signatures = _yield$transitWallet$2.signatures;
                serializedTransaction = _yield$transitWallet$2.serializedTransaction;
                _context14.next = 12;
                return this.callDiscoverAfterSign(transactionData);

              case 12:
                return _context14.abrupt("return", {
                  signatures: signatures,
                  serializedTransaction: serializedTransaction
                });

              case 13:
              case "end":
                return _context14.stop();
            }
          }
        }, _callee14, this);
      }));

      function signTransactionWithTransitAndAlgorandSDK(_x24, _x25) {
        return _signTransactionWithTransitAndAlgorandSDK.apply(this, arguments);
      }

      return signTransactionWithTransitAndAlgorandSDK;
    }()
    /** sign transaction using ethereum web3 SDK */

  }, {
    key: "signTransactionWithTransitAndEthereumSDK",
    value: function () {
      var _signTransactionWithTransitAndEthereumSDK = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee15(transactionData, transitWallet) {
        var chainNetwork, transaction, networkConfig, signParams, _yield$transitWallet$3, signatures, serializedTransaction;

        return _regeneratorRuntime().wrap(function _callee15$(_context15) {
          while (1) {
            switch (_context15.prev = _context15.next) {
              case 0:
                chainNetwork = transactionData.chainNetwork, transaction = transactionData.transaction; // Other chains - use sign function on walletProvider

                _context15.next = 3;
                return this._oreIdContext.settings.getChainNetworkNextworkConfig(chainNetwork);

              case 3:
                networkConfig = _context15.sent;
                signParams = {
                  chainId: networkConfig.chainId,
                  // Chain transaction is for
                  requiredKeys: null,
                  // not used by Ethereum signatureProvider
                  serializedTransaction: (0,_utils_chainUtils__WEBPACK_IMPORTED_MODULE_1__.msgPackEncode)(transaction),
                  // Transaction to sign
                  abis: null // not used by Ethereum signatureProvider

                };
                _context15.next = 7;
                return transitWallet.provider.signatureProvider.sign(signParams);

              case 7:
                _yield$transitWallet$3 = _context15.sent;
                signatures = _yield$transitWallet$3.signatures;
                serializedTransaction = _yield$transitWallet$3.serializedTransaction;
                _context15.next = 12;
                return this.callDiscoverAfterSign(transactionData);

              case 12:
                return _context15.abrupt("return", {
                  signatures: signatures,
                  serializedTransaction: serializedTransaction
                });

              case 13:
              case "end":
                return _context15.stop();
            }
          }
        }, _callee15, this);
      }));

      function signTransactionWithTransitAndEthereumSDK(_x26, _x27) {
        return _signTransactionWithTransitAndEthereumSDK.apply(this, arguments);
      }

      return signTransactionWithTransitAndEthereumSDK;
    }()
    /** Determine the chainNetwork from the transitWallet context */

  }, {
    key: "getChainNetworkFromTransitWallet",
    value: function () {
      var _getChainNetworkFromTransitWallet = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee16(transitWallet) {
        var _transitWallet$ctx, _networks$find;

        var _ref7, chainId, networks;

        return _regeneratorRuntime().wrap(function _callee16$(_context16) {
          while (1) {
            switch (_context16.prev = _context16.next) {
              case 0:
                _ref7 = (transitWallet === null || transitWallet === void 0 ? void 0 : (_transitWallet$ctx = transitWallet.ctx) === null || _transitWallet$ctx === void 0 ? void 0 : _transitWallet$ctx.network) || {}, chainId = _ref7.chainId;

                if (chainId) {
                  _context16.next = 3;
                  break;
                }

                return _context16.abrupt("return", null);

              case 3:
                _context16.next = 5;
                return this._oreIdContext.settings.getAllChainNetworkSettings();

              case 5:
                networks = _context16.sent;
                return _context16.abrupt("return", (_networks$find = networks.find(function (net) {
                  return net.hosts.find(function (host) {
                    return host.chainId === chainId;
                  });
                })) === null || _networks$find === void 0 ? void 0 : _networks$find.network);

              case 7:
              case "end":
                return _context16.stop();
            }
          }
        }, _callee16, this);
      }));

      function getChainNetworkFromTransitWallet(_x28) {
        return _getChainNetworkFromTransitWallet.apply(this, arguments);
      }

      return getChainNetworkFromTransitWallet;
    }()
    /** Add the account selected in the transitWallet to the ORE account's list of account/permissions */

  }, {
    key: "updateOreAccountPermissionsfromTransitWalletAuth",
    value: function () {
      var _updateOreAccountPermissionsfromTransitWalletAuth = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee17(transitWallet, walletType) {
        var _transitWallet$auth2, accountName, permission, publicKey, permissions, transitChainNetwork, _this$_user2;

        return _regeneratorRuntime().wrap(function _callee17$(_context17) {
          while (1) {
            switch (_context17.prev = _context17.next) {
              case 0:
                if (!(!(transitWallet !== null && transitWallet !== void 0 && transitWallet.connected) || !(transitWallet !== null && transitWallet !== void 0 && transitWallet.auth))) {
                  _context17.next = 2;
                  break;
                }

                return _context17.abrupt("return");

              case 2:
                _transitWallet$auth2 = transitWallet.auth, accountName = _transitWallet$auth2.accountName, permission = _transitWallet$auth2.permission, publicKey = _transitWallet$auth2.publicKey; // abort silently if account is missing some info - some chains/wallets (e.g. ethereum) dont provide the public key, so we can't add the perm here

                if (!(!accountName || !permission || !publicKey)) {
                  _context17.next = 5;
                  break;
                }

                return _context17.abrupt("return");

              case 5:
                permissions = [{
                  name: permission,
                  publicKey: publicKey
                }]; // todo: add parent permission when available
                // Get the chainNetwork from the transitWallet - in case the wallet provider switches networks somehow

                _context17.next = 8;
                return this.getChainNetworkFromTransitWallet(transitWallet);

              case 8:
                transitChainNetwork = _context17.sent;

                if (!transitChainNetwork) {
                  _context17.next = 12;
                  break;
                }

                _context17.next = 12;
                return (_this$_user2 = this._user) === null || _this$_user2 === void 0 ? void 0 : _this$_user2.updatePermissionsIfNecessary({
                  chainAccount: accountName,
                  chainNetwork: transitChainNetwork,
                  permissions: permissions,
                  walletType: walletType
                });

              case 12:
              case "end":
                return _context17.stop();
            }
          }
        }, _callee17, this);
      }));

      function updateOreAccountPermissionsfromTransitWalletAuth(_x29, _x30) {
        return _updateOreAccountPermissionsfromTransitWalletAuth.apply(this, arguments);
      }

      return updateOreAccountPermissionsfromTransitWalletAuth;
    }()
  }, {
    key: "isTransitProvider",
    value: function isTransitProvider(provider) {
      var walletProviderType = _utils_helpers__WEBPACK_IMPORTED_MODULE_3__["default"].mapAuthProviderToWalletType(provider);
      if (!walletProviderType) return false;
      return _transitProviders__WEBPACK_IMPORTED_MODULE_2__.supportedTransitProviders.includes(walletProviderType);
    }
    /** Whether this Eos Transit provider was installed upon instantiation */

  }, {
    key: "hasTransitProvider",
    value: function hasTransitProvider(walletType) {
      return this._oreIdContext.transitProvidersInstalled.includes(walletType);
    }
    /** Throw if the provider doesnt support the specified chainNetwork */

  }, {
    key: "assertProviderValidForChainNetwork",
    value: function () {
      var _assertProviderValidForChainNetwork = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee18(walletType, chainNetwork) {
        var _getTransitProviderAt5, chainType, networks, isValid;

        return _regeneratorRuntime().wrap(function _callee18$(_context18) {
          while (1) {
            switch (_context18.prev = _context18.next) {
              case 0:
                _getTransitProviderAt5 = (0,_transitProviders__WEBPACK_IMPORTED_MODULE_2__.getTransitProviderAttributes)(walletType), chainType = _getTransitProviderAt5.chainType;
                _context18.next = 3;
                return this._oreIdContext.settings.getAllChainNetworkSettings();

              case 3:
                networks = _context18.sent;
                isValid = !!networks.find(function (n) {
                  return n.network === chainNetwork && n.type === chainType;
                });

                if (isValid) {
                  _context18.next = 7;
                  break;
                }

                throw Error("External Wallet Type: ".concat(walletType, " doesnt support chainNetwork ").concat(chainNetwork, ". Hint: It supports networks of type ").concat(chainType, "."));

              case 7:
              case "end":
                return _context18.stop();
            }
          }
        }, _callee18, this);
      }));

      function assertProviderValidForChainNetwork(_x31, _x32) {
        return _assertProviderValidForChainNetwork.apply(this, arguments);
      }

      return assertProviderValidForChainNetwork;
    }()
  }, {
    key: "waitWhileWalletIsBusy",
    value: function () {
      var _waitWhileWalletIsBusy = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee19(transitWallet, walletType) {
        return _regeneratorRuntime().wrap(function _callee19$(_context19) {
          while (1) {
            switch (_context19.prev = _context19.next) {
              case 0:
                if (!transitWallet.inProgress) {
                  _context19.next = 7;
                  break;
                }

                this._oreIdContext.setIsBusy(true); // todo: add timeout
                // eslint-disable-next-line no-await-in-loop


                _context19.next = 4;
                return _utils_helpers__WEBPACK_IMPORTED_MODULE_3__["default"].sleep(250);

              case 4:
                // this is here to help a developer debug - dont remove this - if a wallet is not open to connect to, it will hang here
                console.log("connecting to ".concat(walletType, " via eos-transit wallet in progress:"), transitWallet.inProgress);
                _context19.next = 0;
                break;

              case 7:
                this._oreIdContext.setIsBusy(false);

              case 8:
              case "end":
                return _context19.stop();
            }
          }
        }, _callee19, this);
      }));

      function waitWhileWalletIsBusy(_x33, _x34) {
        return _waitWhileWalletIsBusy.apply(this, arguments);
      }

      return waitWhileWalletIsBusy;
    }()
    /** Discovers keys in a wallet provider.
     *  Any new keys discovered in wallet are added to user's ORE ID record.
     *  If the provider doesnt support a discover() function, and requiresLogoutLoginToDiscover == true, attempts a logout then login instead.
     */

  }, {
    key: "discover",
    value: function () {
      var _discover = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee20(discoverOptions) {
        return _regeneratorRuntime().wrap(function _callee20$(_context20) {
          while (1) {
            switch (_context20.prev = _context20.next) {
              case 0:
                return _context20.abrupt("return", this.discoverWithTransit(discoverOptions));

              case 1:
              case "end":
                return _context20.stop();
            }
          }
        }, _callee20, this);
      }));

      function discover(_x35) {
        return _discover.apply(this, arguments);
      }

      return discover;
    }()
    /** Call discover after signing so we capture and save the account
     *  Note: This is needed for Ethereum since we dont know a public key until we sign with an account
     */

  }, {
    key: "callDiscoverAfterSign",
    value: function () {
      var _callDiscoverAfterSign = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee21(transactionData) {
        var chainNetwork, account, _ref8, provider, walletProvider, discoverOptions;

        return _regeneratorRuntime().wrap(function _callee21$(_context21) {
          while (1) {
            switch (_context21.prev = _context21.next) {
              case 0:
                chainNetwork = transactionData.chainNetwork, account = transactionData.account;
                _ref8 = (transactionData === null || transactionData === void 0 ? void 0 : transactionData.signOptions) || {}, provider = _ref8.provider;
                walletProvider = _utils_helpers__WEBPACK_IMPORTED_MODULE_3__["default"].mapAuthProviderToWalletType(provider);
                discoverOptions = {
                  walletType: walletProvider,
                  chainNetwork: chainNetwork,
                  oreAccount: account
                };
                _context21.next = 6;
                return this.discover(discoverOptions);

              case 6:
              case "end":
                return _context21.stop();
            }
          }
        }, _callee21, this);
      }));

      function callDiscoverAfterSign(_x36) {
        return _callDiscoverAfterSign.apply(this, arguments);
      }

      return callDiscoverAfterSign;
    }() // Supported features by provider

    /** whether discovery is supported by the provider */

  }, {
    key: "canDiscover",
    value: function canDiscover(walletType) {
      if (this.hasTransitProvider(walletType)) {
        return (0,_transitProviders__WEBPACK_IMPORTED_MODULE_2__.getTransitProviderAttributes)(walletType).supportsDiscovery;
      }

      return false;
    }
    /** whether signString is supported by the provider */

  }, {
    key: "canSignString",
    value: function canSignString(walletType) {
      if (this.hasTransitProvider(walletType)) {
        return (0,_transitProviders__WEBPACK_IMPORTED_MODULE_2__.getTransitProviderAttributes)(walletType).supportsSignArbitrary;
      }

      return false;
    }
    /** whether call to discover is required by provider before login */

  }, {
    key: "requiresDiscoverToLogin",
    value: function requiresDiscoverToLogin(walletType) {
      if (this.hasTransitProvider(walletType)) {
        return (0,_transitProviders__WEBPACK_IMPORTED_MODULE_2__.getTransitProviderAttributes)(walletType).requiresDiscoverToLogin;
      }

      return false;
    }
    /** whether call to logout then login is required by provider before discover */

  }, {
    key: "requiresLogoutLoginToDiscover",
    value: function requiresLogoutLoginToDiscover(walletType) {
      if (this.hasTransitProvider(walletType)) {
        return (0,_transitProviders__WEBPACK_IMPORTED_MODULE_2__.getTransitProviderAttributes)(walletType).requiresLogoutLoginToDiscover;
      }

      return false;
    }
    /** default path index for provider (if any) */

  }, {
    key: "defaultDiscoveryPathIndexList",
    value: function defaultDiscoveryPathIndexList(walletType) {
      if (this.hasTransitProvider(walletType)) {
        var _getTransitProviderAt6;

        return (_getTransitProviderAt6 = (0,_transitProviders__WEBPACK_IMPORTED_MODULE_2__.getTransitProviderAttributes)(walletType)) === null || _getTransitProviderAt6 === void 0 ? void 0 : _getTransitProviderAt6.defaultDiscoveryPathIndexList;
      }

      return null;
    }
    /** help text displayed to user for provider */

  }, {
    key: "helpTextForProvider",
    value: function helpTextForProvider(walletType) {
      if (this.hasTransitProvider(walletType)) {
        return (0,_transitProviders__WEBPACK_IMPORTED_MODULE_2__.getTransitProviderAttributes)(walletType).helpText;
      }

      return null;
    }
  }]);

  return TransitHelper;
}();



/***/ }),
/* 42 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
var walletAccessContext_1 = __webpack_require__(43);
exports.initAccessContext = walletAccessContext_1.initAccessContext;
var wallet_1 = __webpack_require__(56);
var wallet_2 = __webpack_require__(56);
exports.initWallet = wallet_2.initWallet;
function initDefaultAccessContext(options) {
    exports.defaultAccessContext = walletAccessContext_1.initAccessContext(options);
    return exports.defaultAccessContext;
}
exports.initDefaultAccessContext = initDefaultAccessContext;
var WAL = {
    initDefaultAccessContext: initDefaultAccessContext,
    get accessContext() {
        if (!exports.defaultAccessContext) {
            throw new Error("\n        No default WalletAccessContext is configured. \n        Make sure to first run 'initDefaultAccessContext' to set it up.\n      ");
        }
        return exports.defaultAccessContext;
    },
    initWallet: wallet_1.initWallet
};
exports["default"] = WAL;
// force rebuild 2
//# sourceMappingURL=index.js.map

/***/ }),
/* 43 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
var eosjs_1 = __webpack_require__(44);
var stateContainer_1 = __webpack_require__(55);
var wallet_1 = __webpack_require__(56);
var util_1 = __webpack_require__(60);
var DEFAULT_CONTEXT_STATE = {
    wallets: []
};
function findProviderById(walletProviders, providerId) {
    if (!walletProviders.length)
        return void 0;
    return walletProviders.find(function (wp) { return wp.id === providerId; });
}
function initAccessContext(options) {
    var appName = options.appName, network = options.network, isNotEosNetwork = options.isNotEosNetwork;
    var _makeWalletProviderFns = options.walletProviders;
    var walletProviders = _makeWalletProviderFns.map(function (makeWalletProvider) { return makeWalletProvider(network); });
    var _stateContainer = stateContainer_1.makeStateContainer(DEFAULT_CONTEXT_STATE);
    var _listeners = [];
    function _handleUpdate() {
        for (var _i = 0, _listeners_1 = _listeners; _i < _listeners_1.length; _i++) {
            var listener = _listeners_1[_i];
            listener(ctx);
        }
    }
    var _walletUnsubscribeFns = new Map();
    var stateUnsubscribe = _stateContainer.subscribe(_handleUpdate);
    var eosRpc;
    if (!isNotEosNetwork) {
        var eosRpcUrl = util_1.getNetworkUrl(network);
        eosRpc = new eosjs_1.JsonRpc(eosRpcUrl);
    }
    var ctx = {
        appName: appName,
        eosRpc: eosRpc,
        network: network,
        initWallet: function (walletProvider) {
            var _walletProvider = typeof walletProvider === 'string' ? findProviderById(walletProviders, walletProvider) : walletProvider;
            if (!_walletProvider) {
                throw new Error("\n          Cannot initiate a session, invalid wallet provider\n          or wallet provider ID was passed\n        ");
            }
            var newWallet = wallet_1.initWallet(_walletProvider, ctx);
            _stateContainer.updateState(function (state) { return ({
                wallets: ((state && state.wallets) || []).concat([newWallet])
            }); });
            // Subscribe to a new wallet updates immediately
            _walletUnsubscribeFns.set(newWallet._instanceId, newWallet.subscribe(_handleUpdate));
            return newWallet;
        },
        addWalletProvider: function (walletProvider) {
            walletProviders.push(walletProvider(network));
        },
        getWalletProviders: function () {
            return walletProviders;
        },
        getWallets: function () {
            var state = _stateContainer.getState();
            if (!state)
                return [];
            return state.wallets || [];
        },
        getActiveWallets: function () {
            return ctx.getWallets().filter(function (wallet) { return wallet.connected && wallet.authenticated; });
        },
        detachWallet: function (wallet) {
            _stateContainer.updateState(function (state) { return ({
                wallets: ((state && state.wallets) || []).filter(function (w) { return w !== wallet; })
            }); });
            var _instanceId = wallet._instanceId;
            if (_walletUnsubscribeFns.has(_instanceId)) {
                var unsubscribe = _walletUnsubscribeFns.get(_instanceId);
                if (typeof unsubscribe === 'function')
                    unsubscribe();
            }
        },
        logoutAll: function () {
            return Promise.all(ctx.getWallets().map(function (wallet) { return wallet.logout(); })).then(function () { return true; });
        },
        disconnectAll: function () {
            return Promise.all(ctx.getWallets().map(function (wallet) { return wallet.disconnect(); })).then(function () { return true; });
        },
        terminateAll: function () {
            return Promise.all(ctx.getWallets().map(function (wallet) { return wallet.terminate(); })).then(function () { return true; });
        },
        destroy: function () {
            return ctx.terminateAll().then(function () {
                stateUnsubscribe();
                _walletUnsubscribeFns.forEach(function (unsubscribeFn) {
                    if (typeof unsubscribeFn === 'function')
                        unsubscribeFn();
                });
                _listeners = [];
            });
        },
        subscribe: function (listener) {
            _listeners = _listeners.concat([listener]);
            return function unsubscribe() {
                _listeners = _listeners.filter(function (l) { return l !== listener; });
            };
        }
    };
    return ctx;
}
exports.initAccessContext = initAccessContext;
//# sourceMappingURL=walletAccessContext.js.map

/***/ }),
/* 44 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
var eosjs_api_1 = __webpack_require__(45);
exports.Api = eosjs_api_1.Api;
var ApiInterfaces = __webpack_require__(51);
exports.ApiInterfaces = ApiInterfaces;
var eosjs_jsonrpc_1 = __webpack_require__(52);
exports.JsonRpc = eosjs_jsonrpc_1.JsonRpc;
var Numeric = __webpack_require__(47);
exports.Numeric = Numeric;
var RpcInterfaces = __webpack_require__(54);
exports.RpcInterfaces = RpcInterfaces;
var eosjs_rpcerror_1 = __webpack_require__(53);
exports.RpcError = eosjs_rpcerror_1.RpcError;
var Serialize = __webpack_require__(46);
exports.Serialize = Serialize;
//# sourceMappingURL=index.js.map

/***/ }),
/* 45 */
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/**
 * @module API
 */
// copyright defined in eosjs/LICENSE.txt
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
var __values = (this && this.__values) || function (o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
var ser = __webpack_require__(46);
var abiAbi = __webpack_require__(49);
var transactionAbi = __webpack_require__(50);
var Api = /** @class */ (function () {
    /**
     * @param args
     *    * `rpc`: Issues RPC calls
     *    * `authorityProvider`: Get public keys needed to meet authorities in a transaction
     *    * `abiProvider`: Supplies ABIs in raw form (binary)
     *    * `signatureProvider`: Signs transactions
     *    * `chainId`: Identifies chain
     *    * `textEncoder`: `TextEncoder` instance to use. Pass in `null` if running in a browser
     *    * `textDecoder`: `TextDecoder` instance to use. Pass in `null` if running in a browser
     */
    function Api(args) {
        /** Holds information needed to serialize contract actions */
        this.contracts = new Map();
        /** Fetched abis */
        this.cachedAbis = new Map();
        this.rpc = args.rpc;
        this.authorityProvider = args.authorityProvider || args.rpc;
        this.abiProvider = args.abiProvider || args.rpc;
        this.signatureProvider = args.signatureProvider;
        this.chainId = args.chainId;
        this.textEncoder = args.textEncoder;
        this.textDecoder = args.textDecoder;
        this.abiTypes = ser.getTypesFromAbi(ser.createInitialTypes(), abiAbi);
        this.transactionTypes = ser.getTypesFromAbi(ser.createInitialTypes(), transactionAbi);
    }
    /** Decodes an abi as Uint8Array into json. */
    Api.prototype.rawAbiToJson = function (rawAbi) {
        var buffer = new ser.SerialBuffer({
            textEncoder: this.textEncoder,
            textDecoder: this.textDecoder,
            array: rawAbi,
        });
        if (!ser.supportedAbiVersion(buffer.getString())) {
            throw new Error('Unsupported abi version');
        }
        buffer.restartRead();
        return this.abiTypes.get('abi_def').deserialize(buffer);
    };
    /** Get abi in both binary and structured forms. Fetch when needed. */
    Api.prototype.getCachedAbi = function (accountName, reload) {
        if (reload === void 0) { reload = false; }
        return __awaiter(this, void 0, void 0, function () {
            var cachedAbi, rawAbi, abi, e_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!reload && this.cachedAbis.get(accountName)) {
                            return [2 /*return*/, this.cachedAbis.get(accountName)];
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.abiProvider.getRawAbi(accountName)];
                    case 2:
                        rawAbi = (_a.sent()).abi;
                        abi = this.rawAbiToJson(rawAbi);
                        cachedAbi = { rawAbi: rawAbi, abi: abi };
                        return [3 /*break*/, 4];
                    case 3:
                        e_1 = _a.sent();
                        e_1.message = "fetching abi for " + accountName + ": " + e_1.message;
                        throw e_1;
                    case 4:
                        if (!cachedAbi) {
                            throw new Error("Missing abi for " + accountName);
                        }
                        this.cachedAbis.set(accountName, cachedAbi);
                        return [2 /*return*/, cachedAbi];
                }
            });
        });
    };
    /** Get abi in structured form. Fetch when needed. */
    Api.prototype.getAbi = function (accountName, reload) {
        if (reload === void 0) { reload = false; }
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getCachedAbi(accountName, reload)];
                    case 1: return [2 /*return*/, (_a.sent()).abi];
                }
            });
        });
    };
    /** Get abis needed by a transaction */
    Api.prototype.getTransactionAbis = function (transaction, reload) {
        if (reload === void 0) { reload = false; }
        return __awaiter(this, void 0, void 0, function () {
            var accounts, uniqueAccounts, actionPromises;
            var _this = this;
            return __generator(this, function (_a) {
                accounts = transaction.actions.map(function (action) { return action.account; });
                uniqueAccounts = new Set(accounts);
                actionPromises = __spread(uniqueAccounts).map(function (account) { return __awaiter(_this, void 0, void 0, function () {
                    var _a;
                    return __generator(this, function (_b) {
                        switch (_b.label) {
                            case 0:
                                _a = {
                                    accountName: account
                                };
                                return [4 /*yield*/, this.getCachedAbi(account, reload)];
                            case 1: return [2 /*return*/, (_a.abi = (_b.sent()).rawAbi,
                                    _a)];
                        }
                    });
                }); });
                return [2 /*return*/, Promise.all(actionPromises)];
            });
        });
    };
    /** Get data needed to serialize actions in a contract */
    Api.prototype.getContract = function (accountName, reload) {
        if (reload === void 0) { reload = false; }
        return __awaiter(this, void 0, void 0, function () {
            var e_2, _a, abi, types, actions, _b, _c, _d, name_1, type, result;
            return __generator(this, function (_e) {
                switch (_e.label) {
                    case 0:
                        if (!reload && this.contracts.get(accountName)) {
                            return [2 /*return*/, this.contracts.get(accountName)];
                        }
                        return [4 /*yield*/, this.getAbi(accountName, reload)];
                    case 1:
                        abi = _e.sent();
                        types = ser.getTypesFromAbi(ser.createInitialTypes(), abi);
                        actions = new Map();
                        try {
                            for (_b = __values(abi.actions), _c = _b.next(); !_c.done; _c = _b.next()) {
                                _d = _c.value, name_1 = _d.name, type = _d.type;
                                actions.set(name_1, ser.getType(types, type));
                            }
                        }
                        catch (e_2_1) { e_2 = { error: e_2_1 }; }
                        finally {
                            try {
                                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                            }
                            finally { if (e_2) throw e_2.error; }
                        }
                        result = { types: types, actions: actions };
                        this.contracts.set(accountName, result);
                        return [2 /*return*/, result];
                }
            });
        });
    };
    /** Convert `value` to binary form. `type` must be a built-in abi type or in `transaction.abi.json`. */
    Api.prototype.serialize = function (buffer, type, value) {
        this.transactionTypes.get(type).serialize(buffer, value);
    };
    /** Convert data in `buffer` to structured form. `type` must be a built-in abi type or in `transaction.abi.json`. */
    Api.prototype.deserialize = function (buffer, type) {
        return this.transactionTypes.get(type).deserialize(buffer);
    };
    /** Convert a transaction to binary */
    Api.prototype.serializeTransaction = function (transaction) {
        var buffer = new ser.SerialBuffer({ textEncoder: this.textEncoder, textDecoder: this.textDecoder });
        this.serialize(buffer, 'transaction', __assign({ max_net_usage_words: 0, max_cpu_usage_ms: 0, delay_sec: 0, context_free_actions: [], actions: [], transaction_extensions: [] }, transaction));
        return buffer.asUint8Array();
    };
    /** Convert a transaction from binary. Leaves actions in hex. */
    Api.prototype.deserializeTransaction = function (transaction) {
        var buffer = new ser.SerialBuffer({ textEncoder: this.textEncoder, textDecoder: this.textDecoder });
        buffer.pushArray(transaction);
        return this.deserialize(buffer, 'transaction');
    };
    /** Convert actions to hex */
    Api.prototype.serializeActions = function (actions) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, Promise.all(actions.map(function (_a) {
                            var account = _a.account, name = _a.name, authorization = _a.authorization, data = _a.data;
                            return __awaiter(_this, void 0, void 0, function () {
                                var contract;
                                return __generator(this, function (_b) {
                                    switch (_b.label) {
                                        case 0: return [4 /*yield*/, this.getContract(account)];
                                        case 1:
                                            contract = _b.sent();
                                            return [2 /*return*/, ser.serializeAction(contract, account, name, authorization, data, this.textEncoder, this.textDecoder)];
                                    }
                                });
                            });
                        }))];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /** Convert actions from hex */
    Api.prototype.deserializeActions = function (actions) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, Promise.all(actions.map(function (_a) {
                            var account = _a.account, name = _a.name, authorization = _a.authorization, data = _a.data;
                            return __awaiter(_this, void 0, void 0, function () {
                                var contract;
                                return __generator(this, function (_b) {
                                    switch (_b.label) {
                                        case 0: return [4 /*yield*/, this.getContract(account)];
                                        case 1:
                                            contract = _b.sent();
                                            return [2 /*return*/, ser.deserializeAction(contract, account, name, authorization, data, this.textEncoder, this.textDecoder)];
                                    }
                                });
                            });
                        }))];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /** Convert a transaction from binary. Also deserializes actions. */
    Api.prototype.deserializeTransactionWithActions = function (transaction) {
        return __awaiter(this, void 0, void 0, function () {
            var deserializedTransaction, deserializedActions;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (typeof transaction === 'string') {
                            transaction = ser.hexToUint8Array(transaction);
                        }
                        deserializedTransaction = this.deserializeTransaction(transaction);
                        return [4 /*yield*/, this.deserializeActions(deserializedTransaction.actions)];
                    case 1:
                        deserializedActions = _a.sent();
                        return [2 /*return*/, __assign({}, deserializedTransaction, { actions: deserializedActions })];
                }
            });
        });
    };
    /**
     * Create and optionally broadcast a transaction.
     *
     * Named Parameters:
     *    * `broadcast`: broadcast this transaction?
     *    * `sign`: sign this transaction?
     *    * If both `blocksBehind` and `expireSeconds` are present,
     *      then fetch the block which is `blocksBehind` behind head block,
     *      use it as a reference for TAPoS, and expire the transaction `expireSeconds` after that block's time.
     * @returns node response if `broadcast`, `{signatures, serializedTransaction}` if `!broadcast`
     */
    Api.prototype.transact = function (transaction, _a) {
        var _b = _a === void 0 ? {} : _a, _c = _b.broadcast, broadcast = _c === void 0 ? true : _c, _d = _b.sign, sign = _d === void 0 ? true : _d, blocksBehind = _b.blocksBehind, expireSeconds = _b.expireSeconds;
        return __awaiter(this, void 0, void 0, function () {
            var info, refBlock, abis, _e, _f, serializedTransaction, pushTransactionArgs, availableKeys, requiredKeys;
            return __generator(this, function (_g) {
                switch (_g.label) {
                    case 0:
                        if (!!this.chainId) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.rpc.get_info()];
                    case 1:
                        info = _g.sent();
                        this.chainId = info.chain_id;
                        _g.label = 2;
                    case 2:
                        if (!(typeof blocksBehind === 'number' && expireSeconds)) return [3 /*break*/, 6];
                        if (!!info) return [3 /*break*/, 4];
                        return [4 /*yield*/, this.rpc.get_info()];
                    case 3:
                        info = _g.sent();
                        _g.label = 4;
                    case 4: return [4 /*yield*/, this.rpc.get_block(info.head_block_num - blocksBehind)];
                    case 5:
                        refBlock = _g.sent();
                        transaction = __assign({}, ser.transactionHeader(refBlock, expireSeconds), transaction);
                        _g.label = 6;
                    case 6:
                        if (!this.hasRequiredTaposFields(transaction)) {
                            throw new Error('Required configuration or TAPOS fields are not present');
                        }
                        return [4 /*yield*/, this.getTransactionAbis(transaction)];
                    case 7:
                        abis = _g.sent();
                        _e = [{}, transaction];
                        _f = {};
                        return [4 /*yield*/, this.serializeActions(transaction.actions)];
                    case 8:
                        transaction = __assign.apply(void 0, _e.concat([(_f.actions = _g.sent(), _f)]));
                        serializedTransaction = this.serializeTransaction(transaction);
                        pushTransactionArgs = { serializedTransaction: serializedTransaction, signatures: [] };
                        if (!sign) return [3 /*break*/, 12];
                        return [4 /*yield*/, this.signatureProvider.getAvailableKeys()];
                    case 9:
                        availableKeys = _g.sent();
                        return [4 /*yield*/, this.authorityProvider.getRequiredKeys({ transaction: transaction, availableKeys: availableKeys })];
                    case 10:
                        requiredKeys = _g.sent();
                        return [4 /*yield*/, this.signatureProvider.sign({
                                chainId: this.chainId,
                                requiredKeys: requiredKeys,
                                serializedTransaction: serializedTransaction,
                                abis: abis,
                            })];
                    case 11:
                        pushTransactionArgs = _g.sent();
                        _g.label = 12;
                    case 12:
                        if (broadcast) {
                            return [2 /*return*/, this.pushSignedTransaction(pushTransactionArgs)];
                        }
                        return [2 /*return*/, pushTransactionArgs];
                }
            });
        });
    };
    /** Broadcast a signed transaction */
    Api.prototype.pushSignedTransaction = function (_a) {
        var signatures = _a.signatures, serializedTransaction = _a.serializedTransaction;
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_b) {
                return [2 /*return*/, this.rpc.push_transaction({
                        signatures: signatures,
                        serializedTransaction: serializedTransaction,
                    })];
            });
        });
    };
    // eventually break out into TransactionValidator class
    Api.prototype.hasRequiredTaposFields = function (_a) {
        var expiration = _a.expiration, ref_block_num = _a.ref_block_num, ref_block_prefix = _a.ref_block_prefix, transaction = __rest(_a, ["expiration", "ref_block_num", "ref_block_prefix"]);
        return !!(expiration && ref_block_num && ref_block_prefix);
    };
    return Api;
}()); // Api
exports.Api = Api;
//# sourceMappingURL=eosjs-api.js.map

/***/ }),
/* 46 */
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/**
 * @module Serialize
 */
// copyright defined in eosjs/LICENSE.txt
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
var __values = (this && this.__values) || function (o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
var numeric = __webpack_require__(47);
/** State for serialize() and deserialize() */
var SerializerState = /** @class */ (function () {
    function SerializerState(options) {
        if (options === void 0) { options = {}; }
        /** Have any binary extensions been skipped? */
        this.skippedBinaryExtension = false;
        this.options = options;
    }
    return SerializerState;
}());
exports.SerializerState = SerializerState;
/** Serialize and deserialize data */
var SerialBuffer = /** @class */ (function () {
    /**
     * @param __namedParameters
     *    * `array`: `null` if serializing, or binary data to deserialize
     *    * `textEncoder`: `TextEncoder` instance to use. Pass in `null` if running in a browser
     *    * `textDecoder`: `TextDecider` instance to use. Pass in `null` if running in a browser
     */
    function SerialBuffer(_a) {
        var _b = _a === void 0 ? {} : _a, textEncoder = _b.textEncoder, textDecoder = _b.textDecoder, array = _b.array;
        /** Current position while reading (deserializing) */
        this.readPos = 0;
        this.array = array || new Uint8Array(1024);
        this.length = array ? array.length : 0;
        this.textEncoder = textEncoder || new TextEncoder();
        this.textDecoder = textDecoder || new TextDecoder('utf-8', { fatal: true });
    }
    /** Resize `array` if needed to have at least `size` bytes free */
    SerialBuffer.prototype.reserve = function (size) {
        if (this.length + size <= this.array.length) {
            return;
        }
        var l = this.array.length;
        while (this.length + size > l) {
            l = Math.ceil(l * 1.5);
        }
        var newArray = new Uint8Array(l);
        newArray.set(this.array);
        this.array = newArray;
    };
    /** Is there data available to read? */
    SerialBuffer.prototype.haveReadData = function () {
        return this.readPos < this.length;
    };
    /** Restart reading from the beginning */
    SerialBuffer.prototype.restartRead = function () {
        this.readPos = 0;
    };
    /** Return data with excess storage trimmed away */
    SerialBuffer.prototype.asUint8Array = function () {
        return new Uint8Array(this.array.buffer, this.array.byteOffset, this.length);
    };
    /** Append bytes */
    SerialBuffer.prototype.pushArray = function (v) {
        this.reserve(v.length);
        this.array.set(v, this.length);
        this.length += v.length;
    };
    /** Append bytes */
    SerialBuffer.prototype.push = function () {
        var v = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            v[_i] = arguments[_i];
        }
        this.pushArray(v);
    };
    /** Get a single byte */
    SerialBuffer.prototype.get = function () {
        if (this.readPos < this.length) {
            return this.array[this.readPos++];
        }
        throw new Error('Read past end of buffer');
    };
    /** Append bytes in `v`. Throws if `len` doesn't match `v.length` */
    SerialBuffer.prototype.pushUint8ArrayChecked = function (v, len) {
        if (v.length !== len) {
            throw new Error('Binary data has incorrect size');
        }
        this.pushArray(v);
    };
    /** Get `len` bytes */
    SerialBuffer.prototype.getUint8Array = function (len) {
        if (this.readPos + len > this.length) {
            throw new Error('Read past end of buffer');
        }
        var result = new Uint8Array(this.array.buffer, this.array.byteOffset + this.readPos, len);
        this.readPos += len;
        return result;
    };
    /** Append a `uint16` */
    SerialBuffer.prototype.pushUint16 = function (v) {
        this.push((v >> 0) & 0xff, (v >> 8) & 0xff);
    };
    /** Get a `uint16` */
    SerialBuffer.prototype.getUint16 = function () {
        var v = 0;
        v |= this.get() << 0;
        v |= this.get() << 8;
        return v;
    };
    /** Append a `uint32` */
    SerialBuffer.prototype.pushUint32 = function (v) {
        this.push((v >> 0) & 0xff, (v >> 8) & 0xff, (v >> 16) & 0xff, (v >> 24) & 0xff);
    };
    /** Get a `uint32` */
    SerialBuffer.prototype.getUint32 = function () {
        var v = 0;
        v |= this.get() << 0;
        v |= this.get() << 8;
        v |= this.get() << 16;
        v |= this.get() << 24;
        return v >>> 0;
    };
    /** Append a `uint64`. *Caution*: `number` only has 53 bits of precision */
    SerialBuffer.prototype.pushNumberAsUint64 = function (v) {
        this.pushUint32(v >>> 0);
        this.pushUint32(Math.floor(v / 4294967296) >>> 0);
    };
    /**
     * Get a `uint64` as a `number`. *Caution*: `number` only has 53 bits of precision; some values will change.
     * `numeric.binaryToDecimal(serialBuffer.getUint8Array(8))` recommended instead
     */
    SerialBuffer.prototype.getUint64AsNumber = function () {
        var low = this.getUint32();
        var high = this.getUint32();
        return (high >>> 0) * 4294967296 + (low >>> 0);
    };
    /** Append a `varuint32` */
    SerialBuffer.prototype.pushVaruint32 = function (v) {
        while (true) {
            if (v >>> 7) {
                this.push(0x80 | (v & 0x7f));
                v = v >>> 7;
            }
            else {
                this.push(v);
                break;
            }
        }
    };
    /** Get a `varuint32` */
    SerialBuffer.prototype.getVaruint32 = function () {
        var v = 0;
        var bit = 0;
        while (true) {
            var b = this.get();
            v |= (b & 0x7f) << bit;
            bit += 7;
            if (!(b & 0x80)) {
                break;
            }
        }
        return v >>> 0;
    };
    /** Append a `varint32` */
    SerialBuffer.prototype.pushVarint32 = function (v) {
        this.pushVaruint32((v << 1) ^ (v >> 31));
    };
    /** Get a `varint32` */
    SerialBuffer.prototype.getVarint32 = function () {
        var v = this.getVaruint32();
        if (v & 1) {
            return ((~v) >> 1) | 2147483648;
        }
        else {
            return v >>> 1;
        }
    };
    /** Append a `float32` */
    SerialBuffer.prototype.pushFloat32 = function (v) {
        this.pushArray(new Uint8Array((new Float32Array([v])).buffer));
    };
    /** Get a `float32` */
    SerialBuffer.prototype.getFloat32 = function () {
        return new Float32Array(this.getUint8Array(4).slice().buffer)[0];
    };
    /** Append a `float64` */
    SerialBuffer.prototype.pushFloat64 = function (v) {
        this.pushArray(new Uint8Array((new Float64Array([v])).buffer));
    };
    /** Get a `float64` */
    SerialBuffer.prototype.getFloat64 = function () {
        return new Float64Array(this.getUint8Array(8).slice().buffer)[0];
    };
    /** Append a `name` */
    SerialBuffer.prototype.pushName = function (s) {
        if (typeof s !== 'string') {
            throw new Error('Expected string containing name');
        }
        function charToSymbol(c) {
            if (c >= 'a'.charCodeAt(0) && c <= 'z'.charCodeAt(0)) {
                return (c - 'a'.charCodeAt(0)) + 6;
            }
            if (c >= '1'.charCodeAt(0) && c <= '5'.charCodeAt(0)) {
                return (c - '1'.charCodeAt(0)) + 1;
            }
            return 0;
        }
        var a = new Uint8Array(8);
        var bit = 63;
        for (var i = 0; i < s.length; ++i) {
            var c = charToSymbol(s.charCodeAt(i));
            if (bit < 5) {
                c = c << 1;
            }
            for (var j = 4; j >= 0; --j) {
                if (bit >= 0) {
                    a[Math.floor(bit / 8)] |= ((c >> j) & 1) << (bit % 8);
                    --bit;
                }
            }
        }
        this.pushArray(a);
    };
    /** Get a `name` */
    SerialBuffer.prototype.getName = function () {
        var a = this.getUint8Array(8);
        var result = '';
        for (var bit = 63; bit >= 0;) {
            var c = 0;
            for (var i = 0; i < 5; ++i) {
                if (bit >= 0) {
                    c = (c << 1) | ((a[Math.floor(bit / 8)] >> (bit % 8)) & 1);
                    --bit;
                }
            }
            if (c >= 6) {
                result += String.fromCharCode(c + 'a'.charCodeAt(0) - 6);
            }
            else if (c >= 1) {
                result += String.fromCharCode(c + '1'.charCodeAt(0) - 1);
            }
            else {
                result += '.';
            }
        }
        while (result.endsWith('.')) {
            result = result.substr(0, result.length - 1);
        }
        return result;
    };
    /** Append length-prefixed binary data */
    SerialBuffer.prototype.pushBytes = function (v) {
        this.pushVaruint32(v.length);
        this.pushArray(v);
    };
    /** Get length-prefixed binary data */
    SerialBuffer.prototype.getBytes = function () {
        return this.getUint8Array(this.getVaruint32());
    };
    /** Append a string */
    SerialBuffer.prototype.pushString = function (v) {
        this.pushBytes(this.textEncoder.encode(v));
    };
    /** Get a string */
    SerialBuffer.prototype.getString = function () {
        return this.textDecoder.decode(this.getBytes());
    };
    /** Append a `symbol_code`. Unlike `symbol`, `symbol_code` doesn't include a precision. */
    SerialBuffer.prototype.pushSymbolCode = function (name) {
        if (typeof name !== 'string') {
            throw new Error('Expected string containing symbol_code');
        }
        var a = [];
        a.push.apply(a, __spread(this.textEncoder.encode(name)));
        while (a.length < 8) {
            a.push(0);
        }
        this.pushArray(a.slice(0, 8));
    };
    /** Get a `symbol_code`. Unlike `symbol`, `symbol_code` doesn't include a precision. */
    SerialBuffer.prototype.getSymbolCode = function () {
        var a = this.getUint8Array(8);
        var len;
        for (len = 0; len < a.length; ++len) {
            if (!a[len]) {
                break;
            }
        }
        var name = this.textDecoder.decode(new Uint8Array(a.buffer, a.byteOffset, len));
        return name;
    };
    /** Append a `symbol` */
    SerialBuffer.prototype.pushSymbol = function (_a) {
        var name = _a.name, precision = _a.precision;
        var a = [precision & 0xff];
        a.push.apply(a, __spread(this.textEncoder.encode(name)));
        while (a.length < 8) {
            a.push(0);
        }
        this.pushArray(a.slice(0, 8));
    };
    /** Get a `symbol` */
    SerialBuffer.prototype.getSymbol = function () {
        var precision = this.get();
        var a = this.getUint8Array(7);
        var len;
        for (len = 0; len < a.length; ++len) {
            if (!a[len]) {
                break;
            }
        }
        var name = this.textDecoder.decode(new Uint8Array(a.buffer, a.byteOffset, len));
        return { name: name, precision: precision };
    };
    /** Append an asset */
    SerialBuffer.prototype.pushAsset = function (s) {
        if (typeof s !== 'string') {
            throw new Error('Expected string containing asset');
        }
        s = s.trim();
        var pos = 0;
        var amount = '';
        var precision = 0;
        if (s[pos] === '-') {
            amount += '-';
            ++pos;
        }
        var foundDigit = false;
        while (pos < s.length && s.charCodeAt(pos) >= '0'.charCodeAt(0) && s.charCodeAt(pos) <= '9'.charCodeAt(0)) {
            foundDigit = true;
            amount += s[pos];
            ++pos;
        }
        if (!foundDigit) {
            throw new Error('Asset must begin with a number');
        }
        if (s[pos] === '.') {
            ++pos;
            while (pos < s.length && s.charCodeAt(pos) >= '0'.charCodeAt(0) && s.charCodeAt(pos) <= '9'.charCodeAt(0)) {
                amount += s[pos];
                ++precision;
                ++pos;
            }
        }
        var name = s.substr(pos).trim();
        this.pushArray(numeric.signedDecimalToBinary(8, amount));
        this.pushSymbol({ name: name, precision: precision });
    };
    /** Get an asset */
    SerialBuffer.prototype.getAsset = function () {
        var amount = this.getUint8Array(8);
        var _a = this.getSymbol(), name = _a.name, precision = _a.precision;
        var s = numeric.signedBinaryToDecimal(amount, precision + 1);
        if (precision) {
            s = s.substr(0, s.length - precision) + '.' + s.substr(s.length - precision);
        }
        return s + ' ' + name;
    };
    /** Append a public key */
    SerialBuffer.prototype.pushPublicKey = function (s) {
        var key = numeric.stringToPublicKey(s);
        this.push(key.type);
        this.pushArray(key.data);
    };
    /** Get a public key */
    SerialBuffer.prototype.getPublicKey = function () {
        var type = this.get();
        var data = this.getUint8Array(numeric.publicKeyDataSize);
        return numeric.publicKeyToString({ type: type, data: data });
    };
    /** Append a private key */
    SerialBuffer.prototype.pushPrivateKey = function (s) {
        var key = numeric.stringToPrivateKey(s);
        this.push(key.type);
        this.pushArray(key.data);
    };
    /** Get a private key */
    SerialBuffer.prototype.getPrivateKey = function () {
        var type = this.get();
        var data = this.getUint8Array(numeric.privateKeyDataSize);
        return numeric.privateKeyToString({ type: type, data: data });
    };
    /** Append a signature */
    SerialBuffer.prototype.pushSignature = function (s) {
        var key = numeric.stringToSignature(s);
        this.push(key.type);
        this.pushArray(key.data);
    };
    /** Get a signature */
    SerialBuffer.prototype.getSignature = function () {
        var type = this.get();
        var data = this.getUint8Array(numeric.signatureDataSize);
        return numeric.signatureToString({ type: type, data: data });
    };
    return SerialBuffer;
}()); // SerialBuffer
exports.SerialBuffer = SerialBuffer;
/** Is this a supported ABI version? */
function supportedAbiVersion(version) {
    return version.startsWith('eosio::abi/1.');
}
exports.supportedAbiVersion = supportedAbiVersion;
function checkDateParse(date) {
    var result = Date.parse(date);
    if (Number.isNaN(result)) {
        throw new Error('Invalid time format');
    }
    return result;
}
/** Convert date in ISO format to `time_point` (miliseconds since epoch) */
function dateToTimePoint(date) {
    return Math.round(checkDateParse(date + 'Z') * 1000);
}
exports.dateToTimePoint = dateToTimePoint;
/** Convert `time_point` (miliseconds since epoch) to date in ISO format */
function timePointToDate(us) {
    var s = (new Date(us / 1000)).toISOString();
    return s.substr(0, s.length - 1);
}
exports.timePointToDate = timePointToDate;
/** Convert date in ISO format to `time_point_sec` (seconds since epoch) */
function dateToTimePointSec(date) {
    return Math.round(checkDateParse(date + 'Z') / 1000);
}
exports.dateToTimePointSec = dateToTimePointSec;
/** Convert `time_point_sec` (seconds since epoch) to to date in ISO format */
function timePointSecToDate(sec) {
    var s = (new Date(sec * 1000)).toISOString();
    return s.substr(0, s.length - 1);
}
exports.timePointSecToDate = timePointSecToDate;
/** Convert date in ISO format to `block_timestamp_type` (half-seconds since a different epoch) */
function dateToBlockTimestamp(date) {
    return Math.round((checkDateParse(date + 'Z') - 946684800000) / 500);
}
exports.dateToBlockTimestamp = dateToBlockTimestamp;
/** Convert `block_timestamp_type` (half-seconds since a different epoch) to to date in ISO format */
function blockTimestampToDate(slot) {
    var s = (new Date(slot * 500 + 946684800000)).toISOString();
    return s.substr(0, s.length - 1);
}
exports.blockTimestampToDate = blockTimestampToDate;
/** Convert `string` to `Symbol`. format: `precision,NAME`. */
function stringToSymbol(s) {
    if (typeof s !== 'string') {
        throw new Error('Expected string containing symbol');
    }
    var m = s.match(/^([0-9]+),([A-Z]+)$/);
    if (!m) {
        throw new Error('Invalid symbol');
    }
    return { name: m[2], precision: +m[1] };
}
exports.stringToSymbol = stringToSymbol;
/** Convert `Symbol` to `string`. format: `precision,NAME`. */
function symbolToString(_a) {
    var name = _a.name, precision = _a.precision;
    return precision + ',' + name;
}
exports.symbolToString = symbolToString;
/** Convert binary data to hex */
function arrayToHex(data) {
    var e_1, _a;
    var result = '';
    try {
        for (var data_1 = __values(data), data_1_1 = data_1.next(); !data_1_1.done; data_1_1 = data_1.next()) {
            var x = data_1_1.value;
            result += ('00' + x.toString(16)).slice(-2);
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (data_1_1 && !data_1_1.done && (_a = data_1.return)) _a.call(data_1);
        }
        finally { if (e_1) throw e_1.error; }
    }
    return result.toUpperCase();
}
exports.arrayToHex = arrayToHex;
/** Convert hex to binary data */
function hexToUint8Array(hex) {
    if (typeof hex !== 'string') {
        throw new Error('Expected string containing hex digits');
    }
    if (hex.length % 2) {
        throw new Error('Odd number of hex digits');
    }
    var l = hex.length / 2;
    var result = new Uint8Array(l);
    for (var i = 0; i < l; ++i) {
        var x = parseInt(hex.substr(i * 2, 2), 16);
        if (Number.isNaN(x)) {
            throw new Error('Expected hex string');
        }
        result[i] = x;
    }
    return result;
}
exports.hexToUint8Array = hexToUint8Array;
function serializeUnknown(buffer, data) {
    throw new Error('Don\'t know how to serialize ' + this.name);
}
function deserializeUnknown(buffer) {
    throw new Error('Don\'t know how to deserialize ' + this.name);
}
function serializeStruct(buffer, data, state, allowExtensions) {
    if (state === void 0) { state = new SerializerState(); }
    if (allowExtensions === void 0) { allowExtensions = true; }
    var e_2, _a;
    if (typeof data !== 'object') {
        throw new Error('expected object containing data: ' + JSON.stringify(data));
    }
    if (this.base) {
        this.base.serialize(buffer, data, state, allowExtensions);
    }
    try {
        for (var _b = __values(this.fields), _c = _b.next(); !_c.done; _c = _b.next()) {
            var field = _c.value;
            if (field.name in data) {
                if (state.skippedBinaryExtension) {
                    throw new Error('unexpected ' + this.name + '.' + field.name);
                }
                field.type.serialize(buffer, data[field.name], state, allowExtensions && field === this.fields[this.fields.length - 1]);
            }
            else {
                if (allowExtensions && field.type.extensionOf) {
                    state.skippedBinaryExtension = true;
                }
                else {
                    throw new Error('missing ' + this.name + '.' + field.name + ' (type=' + field.type.name + ')');
                }
            }
        }
    }
    catch (e_2_1) { e_2 = { error: e_2_1 }; }
    finally {
        try {
            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
        }
        finally { if (e_2) throw e_2.error; }
    }
}
function deserializeStruct(buffer, state, allowExtensions) {
    if (state === void 0) { state = new SerializerState(); }
    if (allowExtensions === void 0) { allowExtensions = true; }
    var e_3, _a;
    var result;
    if (this.base) {
        result = this.base.deserialize(buffer, state, allowExtensions);
    }
    else {
        result = {};
    }
    try {
        for (var _b = __values(this.fields), _c = _b.next(); !_c.done; _c = _b.next()) {
            var field = _c.value;
            if (allowExtensions && field.type.extensionOf && !buffer.haveReadData()) {
                state.skippedBinaryExtension = true;
            }
            else {
                result[field.name] = field.type.deserialize(buffer, state, allowExtensions);
            }
        }
    }
    catch (e_3_1) { e_3 = { error: e_3_1 }; }
    finally {
        try {
            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
        }
        finally { if (e_3) throw e_3.error; }
    }
    return result;
}
function serializeVariant(buffer, data, state, allowExtensions) {
    if (!Array.isArray(data) || data.length !== 2 || typeof data[0] !== 'string') {
        throw new Error('expected variant: ["type", value]');
    }
    var i = this.fields.findIndex(function (field) { return field.name === data[0]; });
    if (i < 0) {
        throw new Error("type \"" + data[0] + "\" is not valid for variant");
    }
    buffer.pushVaruint32(i);
    this.fields[i].type.serialize(buffer, data[1], state, allowExtensions);
}
function deserializeVariant(buffer, state, allowExtensions) {
    var i = buffer.getVaruint32();
    if (i >= this.fields.length) {
        throw new Error("type index " + i + " is not valid for variant");
    }
    var field = this.fields[i];
    return [field.name, field.type.deserialize(buffer, state, allowExtensions)];
}
function serializeArray(buffer, data, state, allowExtensions) {
    var e_4, _a;
    buffer.pushVaruint32(data.length);
    try {
        for (var data_2 = __values(data), data_2_1 = data_2.next(); !data_2_1.done; data_2_1 = data_2.next()) {
            var item = data_2_1.value;
            this.arrayOf.serialize(buffer, item, state, false);
        }
    }
    catch (e_4_1) { e_4 = { error: e_4_1 }; }
    finally {
        try {
            if (data_2_1 && !data_2_1.done && (_a = data_2.return)) _a.call(data_2);
        }
        finally { if (e_4) throw e_4.error; }
    }
}
function deserializeArray(buffer, state, allowExtensions) {
    var len = buffer.getVaruint32();
    var result = [];
    for (var i = 0; i < len; ++i) {
        result.push(this.arrayOf.deserialize(buffer, state, false));
    }
    return result;
}
function serializeOptional(buffer, data, state, allowExtensions) {
    if (data === null || data === undefined) {
        buffer.push(0);
    }
    else {
        buffer.push(1);
        this.optionalOf.serialize(buffer, data, state, allowExtensions);
    }
}
function deserializeOptional(buffer, state, allowExtensions) {
    if (buffer.get()) {
        return this.optionalOf.deserialize(buffer, state, allowExtensions);
    }
    else {
        return null;
    }
}
function serializeExtension(buffer, data, state, allowExtensions) {
    this.extensionOf.serialize(buffer, data, state, allowExtensions);
}
function deserializeExtension(buffer, state, allowExtensions) {
    return this.extensionOf.deserialize(buffer, state, allowExtensions);
}
function createType(attrs) {
    return __assign({ name: '<missing name>', aliasOfName: '', arrayOf: null, optionalOf: null, extensionOf: null, baseName: '', base: null, fields: [], serialize: serializeUnknown, deserialize: deserializeUnknown }, attrs);
}
function checkRange(orig, converted) {
    if (Number.isNaN(+orig) || Number.isNaN(+converted) || (typeof orig !== 'number' && typeof orig !== 'string')) {
        throw new Error('Expected number');
    }
    if (+orig !== +converted) {
        throw new Error('Number is out of range');
    }
    return +orig;
}
/** Create the set of types built-in to the abi format */
function createInitialTypes() {
    var result = new Map(Object.entries({
        bool: createType({
            name: 'bool',
            serialize: function (buffer, data) {
                if (typeof data !== 'boolean') {
                    throw new Error('Expected true or false');
                }
                buffer.push(data ? 1 : 0);
            },
            deserialize: function (buffer) { return !!buffer.get(); },
        }),
        uint8: createType({
            name: 'uint8',
            serialize: function (buffer, data) { buffer.push(checkRange(data, data & 0xff)); },
            deserialize: function (buffer) { return buffer.get(); },
        }),
        int8: createType({
            name: 'int8',
            serialize: function (buffer, data) { buffer.push(checkRange(data, data << 24 >> 24)); },
            deserialize: function (buffer) { return buffer.get() << 24 >> 24; },
        }),
        uint16: createType({
            name: 'uint16',
            serialize: function (buffer, data) { buffer.pushUint16(checkRange(data, data & 0xffff)); },
            deserialize: function (buffer) { return buffer.getUint16(); },
        }),
        int16: createType({
            name: 'int16',
            serialize: function (buffer, data) { buffer.pushUint16(checkRange(data, data << 16 >> 16)); },
            deserialize: function (buffer) { return buffer.getUint16() << 16 >> 16; },
        }),
        uint32: createType({
            name: 'uint32',
            serialize: function (buffer, data) { buffer.pushUint32(checkRange(data, data >>> 0)); },
            deserialize: function (buffer) { return buffer.getUint32(); },
        }),
        uint64: createType({
            name: 'uint64',
            serialize: function (buffer, data) {
                buffer.pushArray(numeric.decimalToBinary(8, '' + data));
            },
            deserialize: function (buffer) { return numeric.binaryToDecimal(buffer.getUint8Array(8)); },
        }),
        int64: createType({
            name: 'int64',
            serialize: function (buffer, data) {
                buffer.pushArray(numeric.signedDecimalToBinary(8, '' + data));
            },
            deserialize: function (buffer) { return numeric.signedBinaryToDecimal(buffer.getUint8Array(8)); },
        }),
        int32: createType({
            name: 'int32',
            serialize: function (buffer, data) { buffer.pushUint32(checkRange(data, data | 0)); },
            deserialize: function (buffer) { return buffer.getUint32() | 0; },
        }),
        varuint32: createType({
            name: 'varuint32',
            serialize: function (buffer, data) { buffer.pushVaruint32(checkRange(data, data >>> 0)); },
            deserialize: function (buffer) { return buffer.getVaruint32(); },
        }),
        varint32: createType({
            name: 'varint32',
            serialize: function (buffer, data) { buffer.pushVarint32(checkRange(data, data | 0)); },
            deserialize: function (buffer) { return buffer.getVarint32(); },
        }),
        uint128: createType({
            name: 'uint128',
            serialize: function (buffer, data) { buffer.pushArray(numeric.decimalToBinary(16, '' + data)); },
            deserialize: function (buffer) { return numeric.binaryToDecimal(buffer.getUint8Array(16)); },
        }),
        int128: createType({
            name: 'int128',
            serialize: function (buffer, data) {
                buffer.pushArray(numeric.signedDecimalToBinary(16, '' + data));
            },
            deserialize: function (buffer) { return numeric.signedBinaryToDecimal(buffer.getUint8Array(16)); },
        }),
        float32: createType({
            name: 'float32',
            serialize: function (buffer, data) { buffer.pushFloat32(data); },
            deserialize: function (buffer) { return buffer.getFloat32(); },
        }),
        float64: createType({
            name: 'float64',
            serialize: function (buffer, data) { buffer.pushFloat64(data); },
            deserialize: function (buffer) { return buffer.getFloat64(); },
        }),
        float128: createType({
            name: 'float128',
            serialize: function (buffer, data) { buffer.pushUint8ArrayChecked(hexToUint8Array(data), 16); },
            deserialize: function (buffer) { return arrayToHex(buffer.getUint8Array(16)); },
        }),
        bytes: createType({
            name: 'bytes',
            serialize: function (buffer, data) {
                if (data instanceof Uint8Array || Array.isArray(data)) {
                    buffer.pushBytes(data);
                }
                else {
                    buffer.pushBytes(hexToUint8Array(data));
                }
            },
            deserialize: function (buffer, state) {
                if (state && state.options.bytesAsUint8Array) {
                    return buffer.getBytes();
                }
                else {
                    return arrayToHex(buffer.getBytes());
                }
            },
        }),
        string: createType({
            name: 'string',
            serialize: function (buffer, data) { buffer.pushString(data); },
            deserialize: function (buffer) { return buffer.getString(); },
        }),
        name: createType({
            name: 'name',
            serialize: function (buffer, data) { buffer.pushName(data); },
            deserialize: function (buffer) { return buffer.getName(); },
        }),
        time_point: createType({
            name: 'time_point',
            serialize: function (buffer, data) { buffer.pushNumberAsUint64(dateToTimePoint(data)); },
            deserialize: function (buffer) { return timePointToDate(buffer.getUint64AsNumber()); },
        }),
        time_point_sec: createType({
            name: 'time_point_sec',
            serialize: function (buffer, data) { buffer.pushUint32(dateToTimePointSec(data)); },
            deserialize: function (buffer) { return timePointSecToDate(buffer.getUint32()); },
        }),
        block_timestamp_type: createType({
            name: 'block_timestamp_type',
            serialize: function (buffer, data) { buffer.pushUint32(dateToBlockTimestamp(data)); },
            deserialize: function (buffer) { return blockTimestampToDate(buffer.getUint32()); },
        }),
        symbol_code: createType({
            name: 'symbol_code',
            serialize: function (buffer, data) { buffer.pushSymbolCode(data); },
            deserialize: function (buffer) { return buffer.getSymbolCode(); },
        }),
        symbol: createType({
            name: 'symbol',
            serialize: function (buffer, data) { buffer.pushSymbol(stringToSymbol(data)); },
            deserialize: function (buffer) { return symbolToString(buffer.getSymbol()); },
        }),
        asset: createType({
            name: 'asset',
            serialize: function (buffer, data) { buffer.pushAsset(data); },
            deserialize: function (buffer) { return buffer.getAsset(); },
        }),
        checksum160: createType({
            name: 'checksum160',
            serialize: function (buffer, data) { buffer.pushUint8ArrayChecked(hexToUint8Array(data), 20); },
            deserialize: function (buffer) { return arrayToHex(buffer.getUint8Array(20)); },
        }),
        checksum256: createType({
            name: 'checksum256',
            serialize: function (buffer, data) { buffer.pushUint8ArrayChecked(hexToUint8Array(data), 32); },
            deserialize: function (buffer) { return arrayToHex(buffer.getUint8Array(32)); },
        }),
        checksum512: createType({
            name: 'checksum512',
            serialize: function (buffer, data) { buffer.pushUint8ArrayChecked(hexToUint8Array(data), 64); },
            deserialize: function (buffer) { return arrayToHex(buffer.getUint8Array(64)); },
        }),
        public_key: createType({
            name: 'public_key',
            serialize: function (buffer, data) { buffer.pushPublicKey(data); },
            deserialize: function (buffer) { return buffer.getPublicKey(); },
        }),
        private_key: createType({
            name: 'private_key',
            serialize: function (buffer, data) { buffer.pushPrivateKey(data); },
            deserialize: function (buffer) { return buffer.getPrivateKey(); },
        }),
        signature: createType({
            name: 'signature',
            serialize: function (buffer, data) { buffer.pushSignature(data); },
            deserialize: function (buffer) { return buffer.getSignature(); },
        }),
    }));
    result.set('extended_asset', createType({
        name: 'extended_asset',
        baseName: '',
        fields: [
            { name: 'quantity', typeName: 'asset', type: result.get('asset') },
            { name: 'contract', typeName: 'name', type: result.get('name') },
        ],
        serialize: serializeStruct,
        deserialize: deserializeStruct,
    }));
    return result;
} // createInitialTypes()
exports.createInitialTypes = createInitialTypes;
/** Get type from `types` */
function getType(types, name) {
    var type = types.get(name);
    if (type && type.aliasOfName) {
        return getType(types, type.aliasOfName);
    }
    if (type) {
        return type;
    }
    if (name.endsWith('[]')) {
        return createType({
            name: name,
            arrayOf: getType(types, name.substr(0, name.length - 2)),
            serialize: serializeArray,
            deserialize: deserializeArray,
        });
    }
    if (name.endsWith('?')) {
        return createType({
            name: name,
            optionalOf: getType(types, name.substr(0, name.length - 1)),
            serialize: serializeOptional,
            deserialize: deserializeOptional,
        });
    }
    if (name.endsWith('$')) {
        return createType({
            name: name,
            extensionOf: getType(types, name.substr(0, name.length - 1)),
            serialize: serializeExtension,
            deserialize: deserializeExtension,
        });
    }
    throw new Error('Unknown type: ' + name);
}
exports.getType = getType;
/**
 * Get types from abi
 * @param initialTypes Set of types to build on.
 *     In most cases, it's best to fill this from a fresh call to `getTypesFromAbi()`.
 */
function getTypesFromAbi(initialTypes, abi) {
    var e_5, _a, e_6, _b, e_7, _c, e_8, _d, e_9, _e;
    var types = new Map(initialTypes);
    if (abi.types) {
        try {
            for (var _f = __values(abi.types), _g = _f.next(); !_g.done; _g = _f.next()) {
                var _h = _g.value, new_type_name = _h.new_type_name, type = _h.type;
                types.set(new_type_name, createType({ name: new_type_name, aliasOfName: type }));
            }
        }
        catch (e_5_1) { e_5 = { error: e_5_1 }; }
        finally {
            try {
                if (_g && !_g.done && (_a = _f.return)) _a.call(_f);
            }
            finally { if (e_5) throw e_5.error; }
        }
    }
    if (abi.structs) {
        try {
            for (var _j = __values(abi.structs), _k = _j.next(); !_k.done; _k = _j.next()) {
                var _l = _k.value, name_1 = _l.name, base = _l.base, fields = _l.fields;
                types.set(name_1, createType({
                    name: name_1,
                    baseName: base,
                    fields: fields.map(function (_a) {
                        var n = _a.name, type = _a.type;
                        return ({ name: n, typeName: type, type: null });
                    }),
                    serialize: serializeStruct,
                    deserialize: deserializeStruct,
                }));
            }
        }
        catch (e_6_1) { e_6 = { error: e_6_1 }; }
        finally {
            try {
                if (_k && !_k.done && (_b = _j.return)) _b.call(_j);
            }
            finally { if (e_6) throw e_6.error; }
        }
    }
    if (abi.variants) {
        try {
            for (var _m = __values(abi.variants), _o = _m.next(); !_o.done; _o = _m.next()) {
                var _p = _o.value, name_2 = _p.name, t = _p.types;
                types.set(name_2, createType({
                    name: name_2,
                    fields: t.map(function (s) { return ({ name: s, typeName: s, type: null }); }),
                    serialize: serializeVariant,
                    deserialize: deserializeVariant,
                }));
            }
        }
        catch (e_7_1) { e_7 = { error: e_7_1 }; }
        finally {
            try {
                if (_o && !_o.done && (_c = _m.return)) _c.call(_m);
            }
            finally { if (e_7) throw e_7.error; }
        }
    }
    try {
        for (var types_1 = __values(types), types_1_1 = types_1.next(); !types_1_1.done; types_1_1 = types_1.next()) {
            var _q = __read(types_1_1.value, 2), name_3 = _q[0], type = _q[1];
            if (type.baseName) {
                type.base = getType(types, type.baseName);
            }
            try {
                for (var _r = __values(type.fields), _s = _r.next(); !_s.done; _s = _r.next()) {
                    var field = _s.value;
                    field.type = getType(types, field.typeName);
                }
            }
            catch (e_9_1) { e_9 = { error: e_9_1 }; }
            finally {
                try {
                    if (_s && !_s.done && (_e = _r.return)) _e.call(_r);
                }
                finally { if (e_9) throw e_9.error; }
            }
        }
    }
    catch (e_8_1) { e_8 = { error: e_8_1 }; }
    finally {
        try {
            if (types_1_1 && !types_1_1.done && (_d = types_1.return)) _d.call(types_1);
        }
        finally { if (e_8) throw e_8.error; }
    }
    return types;
} // getTypesFromAbi
exports.getTypesFromAbi = getTypesFromAbi;
/** TAPoS: Return transaction fields which reference `refBlock` and expire `expireSeconds` after `refBlock.timestamp` */
function transactionHeader(refBlock, expireSeconds) {
    return {
        expiration: timePointSecToDate(dateToTimePointSec(refBlock.timestamp) + expireSeconds),
        ref_block_num: refBlock.block_num & 0xffff,
        ref_block_prefix: refBlock.ref_block_prefix,
    };
}
exports.transactionHeader = transactionHeader;
/** Convert action data to serialized form (hex) */
function serializeActionData(contract, account, name, data, textEncoder, textDecoder) {
    var action = contract.actions.get(name);
    if (!action) {
        throw new Error("Unknown action " + name + " in contract " + account);
    }
    var buffer = new SerialBuffer({ textEncoder: textEncoder, textDecoder: textDecoder });
    action.serialize(buffer, data);
    return arrayToHex(buffer.asUint8Array());
}
exports.serializeActionData = serializeActionData;
/** Return action in serialized form */
function serializeAction(contract, account, name, authorization, data, textEncoder, textDecoder) {
    return {
        account: account,
        name: name,
        authorization: authorization,
        data: serializeActionData(contract, account, name, data, textEncoder, textDecoder),
    };
}
exports.serializeAction = serializeAction;
/** Deserialize action data. If `data` is a `string`, then it's assumed to be in hex. */
function deserializeActionData(contract, account, name, data, textEncoder, textDecoder) {
    var action = contract.actions.get(name);
    if (typeof data === 'string') {
        data = hexToUint8Array(data);
    }
    if (!action) {
        throw new Error("Unknown action " + name + " in contract " + account);
    }
    var buffer = new SerialBuffer({ textDecoder: textDecoder, textEncoder: textEncoder });
    buffer.pushArray(data);
    return action.deserialize(buffer);
}
exports.deserializeActionData = deserializeActionData;
/** Deserialize action. If `data` is a `string`, then it's assumed to be in hex. */
function deserializeAction(contract, account, name, authorization, data, textEncoder, textDecoder) {
    return {
        account: account,
        name: name,
        authorization: authorization,
        data: deserializeActionData(contract, account, name, data, textEncoder, textDecoder),
    };
}
exports.deserializeAction = deserializeAction;
//# sourceMappingURL=eosjs-serialize.js.map

/***/ }),
/* 47 */
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/**
 * @module Numeric
 */
// copyright defined in eosjs/LICENSE.txt
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
var __values = (this && this.__values) || function (o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
var ripemd160 = (__webpack_require__(48).RIPEMD160.hash);
var base58Chars = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz';
var base64Chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
function create_base58_map() {
    var base58M = Array(256).fill(-1);
    for (var i = 0; i < base58Chars.length; ++i) {
        base58M[base58Chars.charCodeAt(i)] = i;
    }
    return base58M;
}
var base58Map = create_base58_map();
function create_base64_map() {
    var base64M = Array(256).fill(-1);
    for (var i = 0; i < base64Chars.length; ++i) {
        base64M[base64Chars.charCodeAt(i)] = i;
    }
    base64M['='.charCodeAt(0)] = 0;
    return base64M;
}
var base64Map = create_base64_map();
/** Is `bignum` a negative number? */
function isNegative(bignum) {
    return (bignum[bignum.length - 1] & 0x80) !== 0;
}
exports.isNegative = isNegative;
/** Negate `bignum` */
function negate(bignum) {
    var carry = 1;
    for (var i = 0; i < bignum.length; ++i) {
        var x = (~bignum[i] & 0xff) + carry;
        bignum[i] = x;
        carry = x >> 8;
    }
}
exports.negate = negate;
/**
 * Convert an unsigned decimal number in `s` to a bignum
 * @param size bignum size (bytes)
 */
function decimalToBinary(size, s) {
    var result = new Uint8Array(size);
    for (var i = 0; i < s.length; ++i) {
        var srcDigit = s.charCodeAt(i);
        if (srcDigit < '0'.charCodeAt(0) || srcDigit > '9'.charCodeAt(0)) {
            throw new Error('invalid number');
        }
        var carry = srcDigit - '0'.charCodeAt(0);
        for (var j = 0; j < size; ++j) {
            var x = result[j] * 10 + carry;
            result[j] = x;
            carry = x >> 8;
        }
        if (carry) {
            throw new Error('number is out of range');
        }
    }
    return result;
}
exports.decimalToBinary = decimalToBinary;
/**
 * Convert a signed decimal number in `s` to a bignum
 * @param size bignum size (bytes)
 */
function signedDecimalToBinary(size, s) {
    var negative = s[0] === '-';
    if (negative) {
        s = s.substr(1);
    }
    var result = decimalToBinary(size, s);
    if (negative) {
        negate(result);
        if (!isNegative(result)) {
            throw new Error('number is out of range');
        }
    }
    else if (isNegative(result)) {
        throw new Error('number is out of range');
    }
    return result;
}
exports.signedDecimalToBinary = signedDecimalToBinary;
/**
 * Convert `bignum` to an unsigned decimal number
 * @param minDigits 0-pad result to this many digits
 */
function binaryToDecimal(bignum, minDigits) {
    if (minDigits === void 0) { minDigits = 1; }
    var result = Array(minDigits).fill('0'.charCodeAt(0));
    for (var i = bignum.length - 1; i >= 0; --i) {
        var carry = bignum[i];
        for (var j = 0; j < result.length; ++j) {
            var x = ((result[j] - '0'.charCodeAt(0)) << 8) + carry;
            result[j] = '0'.charCodeAt(0) + x % 10;
            carry = (x / 10) | 0;
        }
        while (carry) {
            result.push('0'.charCodeAt(0) + carry % 10);
            carry = (carry / 10) | 0;
        }
    }
    result.reverse();
    return String.fromCharCode.apply(String, __spread(result));
}
exports.binaryToDecimal = binaryToDecimal;
/**
 * Convert `bignum` to a signed decimal number
 * @param minDigits 0-pad result to this many digits
 */
function signedBinaryToDecimal(bignum, minDigits) {
    if (minDigits === void 0) { minDigits = 1; }
    if (isNegative(bignum)) {
        var x = bignum.slice();
        negate(x);
        return '-' + binaryToDecimal(x, minDigits);
    }
    return binaryToDecimal(bignum, minDigits);
}
exports.signedBinaryToDecimal = signedBinaryToDecimal;
/**
 * Convert an unsigned base-58 number in `s` to a bignum
 * @param size bignum size (bytes)
 */
function base58ToBinary(size, s) {
    var result = new Uint8Array(size);
    for (var i = 0; i < s.length; ++i) {
        var carry = base58Map[s.charCodeAt(i)];
        if (carry < 0) {
            throw new Error('invalid base-58 value');
        }
        for (var j = 0; j < size; ++j) {
            var x = result[j] * 58 + carry;
            result[j] = x;
            carry = x >> 8;
        }
        if (carry) {
            throw new Error('base-58 value is out of range');
        }
    }
    result.reverse();
    return result;
}
exports.base58ToBinary = base58ToBinary;
/**
 * Convert `bignum` to a base-58 number
 * @param minDigits 0-pad result to this many digits
 */
function binaryToBase58(bignum, minDigits) {
    if (minDigits === void 0) { minDigits = 1; }
    var e_1, _a, e_2, _b;
    var result = [];
    try {
        for (var bignum_1 = __values(bignum), bignum_1_1 = bignum_1.next(); !bignum_1_1.done; bignum_1_1 = bignum_1.next()) {
            var byte = bignum_1_1.value;
            var carry = byte;
            for (var j = 0; j < result.length; ++j) {
                var x = (base58Map[result[j]] << 8) + carry;
                result[j] = base58Chars.charCodeAt(x % 58);
                carry = (x / 58) | 0;
            }
            while (carry) {
                result.push(base58Chars.charCodeAt(carry % 58));
                carry = (carry / 58) | 0;
            }
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (bignum_1_1 && !bignum_1_1.done && (_a = bignum_1.return)) _a.call(bignum_1);
        }
        finally { if (e_1) throw e_1.error; }
    }
    try {
        for (var bignum_2 = __values(bignum), bignum_2_1 = bignum_2.next(); !bignum_2_1.done; bignum_2_1 = bignum_2.next()) {
            var byte = bignum_2_1.value;
            if (byte) {
                break;
            }
            else {
                result.push('1'.charCodeAt(0));
            }
        }
    }
    catch (e_2_1) { e_2 = { error: e_2_1 }; }
    finally {
        try {
            if (bignum_2_1 && !bignum_2_1.done && (_b = bignum_2.return)) _b.call(bignum_2);
        }
        finally { if (e_2) throw e_2.error; }
    }
    result.reverse();
    return String.fromCharCode.apply(String, __spread(result));
}
exports.binaryToBase58 = binaryToBase58;
/** Convert an unsigned base-64 number in `s` to a bignum */
function base64ToBinary(s) {
    var len = s.length;
    if ((len & 3) === 1 && s[len - 1] === '=') {
        len -= 1;
    } // fc appends an extra '='
    if ((len & 3) !== 0) {
        throw new Error('base-64 value is not padded correctly');
    }
    var groups = len >> 2;
    var bytes = groups * 3;
    if (len > 0 && s[len - 1] === '=') {
        if (s[len - 2] === '=') {
            bytes -= 2;
        }
        else {
            bytes -= 1;
        }
    }
    var result = new Uint8Array(bytes);
    for (var group = 0; group < groups; ++group) {
        var digit0 = base64Map[s.charCodeAt(group * 4 + 0)];
        var digit1 = base64Map[s.charCodeAt(group * 4 + 1)];
        var digit2 = base64Map[s.charCodeAt(group * 4 + 2)];
        var digit3 = base64Map[s.charCodeAt(group * 4 + 3)];
        result[group * 3 + 0] = (digit0 << 2) | (digit1 >> 4);
        if (group * 3 + 1 < bytes) {
            result[group * 3 + 1] = ((digit1 & 15) << 4) | (digit2 >> 2);
        }
        if (group * 3 + 2 < bytes) {
            result[group * 3 + 2] = ((digit2 & 3) << 6) | digit3;
        }
    }
    return result;
}
exports.base64ToBinary = base64ToBinary;
/** Key types this library supports */
var KeyType;
(function (KeyType) {
    KeyType[KeyType["k1"] = 0] = "k1";
    KeyType[KeyType["r1"] = 1] = "r1";
})(KeyType = exports.KeyType || (exports.KeyType = {}));
/** Public key data size, excluding type field */
exports.publicKeyDataSize = 33;
/** Private key data size, excluding type field */
exports.privateKeyDataSize = 32;
/** Signature data size, excluding type field */
exports.signatureDataSize = 65;
function digestSuffixRipemd160(data, suffix) {
    var d = new Uint8Array(data.length + suffix.length);
    for (var i = 0; i < data.length; ++i) {
        d[i] = data[i];
    }
    for (var i = 0; i < suffix.length; ++i) {
        d[data.length + i] = suffix.charCodeAt(i);
    }
    return ripemd160(d);
}
function stringToKey(s, type, size, suffix) {
    var whole = base58ToBinary(size + 4, s);
    var result = { type: type, data: new Uint8Array(whole.buffer, 0, size) };
    var digest = new Uint8Array(digestSuffixRipemd160(result.data, suffix));
    if (digest[0] !== whole[size + 0] || digest[1] !== whole[size + 1]
        || digest[2] !== whole[size + 2] || digest[3] !== whole[size + 3]) {
        throw new Error('checksum doesn\'t match');
    }
    return result;
}
function keyToString(key, suffix, prefix) {
    var digest = new Uint8Array(digestSuffixRipemd160(key.data, suffix));
    var whole = new Uint8Array(key.data.length + 4);
    for (var i = 0; i < key.data.length; ++i) {
        whole[i] = key.data[i];
    }
    for (var i = 0; i < 4; ++i) {
        whole[i + key.data.length] = digest[i];
    }
    return prefix + binaryToBase58(whole);
}
/** Convert key in `s` to binary form */
function stringToPublicKey(s) {
    if (typeof s !== 'string') {
        throw new Error('expected string containing public key');
    }
    if (s.substr(0, 3) === 'EOS') {
        var whole = base58ToBinary(exports.publicKeyDataSize + 4, s.substr(3));
        var key = { type: KeyType.k1, data: new Uint8Array(exports.publicKeyDataSize) };
        for (var i = 0; i < exports.publicKeyDataSize; ++i) {
            key.data[i] = whole[i];
        }
        var digest = new Uint8Array(ripemd160(key.data));
        if (digest[0] !== whole[exports.publicKeyDataSize] || digest[1] !== whole[34]
            || digest[2] !== whole[35] || digest[3] !== whole[36]) {
            throw new Error('checksum doesn\'t match');
        }
        return key;
    }
    else if (s.substr(0, 7) === 'PUB_K1_') {
        return stringToKey(s.substr(7), KeyType.k1, exports.publicKeyDataSize, 'K1');
    }
    else if (s.substr(0, 7) === 'PUB_R1_') {
        return stringToKey(s.substr(7), KeyType.r1, exports.publicKeyDataSize, 'R1');
    }
    else {
        throw new Error('unrecognized public key format');
    }
}
exports.stringToPublicKey = stringToPublicKey;
/** Convert `key` to string (base-58) form */
function publicKeyToString(key) {
    if (key.type === KeyType.k1 && key.data.length === exports.publicKeyDataSize) {
        return keyToString(key, 'K1', 'PUB_K1_');
    }
    else if (key.type === KeyType.r1 && key.data.length === exports.publicKeyDataSize) {
        return keyToString(key, 'R1', 'PUB_R1_');
    }
    else {
        throw new Error('unrecognized public key format');
    }
}
exports.publicKeyToString = publicKeyToString;
/** If a key is in the legacy format (`EOS` prefix), then convert it to the new format (`PUB_K1_`).
 * Leaves other formats untouched
 */
function convertLegacyPublicKey(s) {
    if (s.substr(0, 3) === 'EOS') {
        return publicKeyToString(stringToPublicKey(s));
    }
    return s;
}
exports.convertLegacyPublicKey = convertLegacyPublicKey;
/** If a key is in the legacy format (`EOS` prefix), then convert it to the new format (`PUB_K1_`).
 * Leaves other formats untouched
 */
function convertLegacyPublicKeys(keys) {
    return keys.map(convertLegacyPublicKey);
}
exports.convertLegacyPublicKeys = convertLegacyPublicKeys;
/** Convert key in `s` to binary form */
function stringToPrivateKey(s) {
    if (typeof s !== 'string') {
        throw new Error('expected string containing private key');
    }
    if (s.substr(0, 7) === 'PVT_R1_') {
        return stringToKey(s.substr(7), KeyType.r1, exports.privateKeyDataSize, 'R1');
    }
    else {
        throw new Error('unrecognized private key format');
    }
}
exports.stringToPrivateKey = stringToPrivateKey;
/** Convert `key` to string (base-58) form */
function privateKeyToString(key) {
    if (key.type === KeyType.r1) {
        return keyToString(key, 'R1', 'PVT_R1_');
    }
    else {
        throw new Error('unrecognized private key format');
    }
}
exports.privateKeyToString = privateKeyToString;
/** Convert key in `s` to binary form */
function stringToSignature(s) {
    if (typeof s !== 'string') {
        throw new Error('expected string containing signature');
    }
    if (s.substr(0, 7) === 'SIG_K1_') {
        return stringToKey(s.substr(7), KeyType.k1, exports.signatureDataSize, 'K1');
    }
    else if (s.substr(0, 7) === 'SIG_R1_') {
        return stringToKey(s.substr(7), KeyType.r1, exports.signatureDataSize, 'R1');
    }
    else {
        throw new Error('unrecognized signature format');
    }
}
exports.stringToSignature = stringToSignature;
/** Convert `signature` to string (base-58) form */
function signatureToString(signature) {
    if (signature.type === KeyType.k1) {
        return keyToString(signature, 'K1', 'SIG_K1_');
    }
    else if (signature.type === KeyType.r1) {
        return keyToString(signature, 'R1', 'SIG_R1_');
    }
    else {
        throw new Error('unrecognized signature format');
    }
}
exports.signatureToString = signatureToString;
//# sourceMappingURL=eosjs-numeric.js.map

/***/ }),
/* 48 */
/***/ ((module) => {

"use strict";
// https://gist.githubusercontent.com/wlzla000/bac83df6d3c51916c4dd0bc947e46947/raw/7ee3462b095ab22580ddaf191f44a590da6fe33b/RIPEMD-160.js

/*
	RIPEMD-160.js

		developed
			by K. (https://github.com/wlzla000)
			on December 27-29, 2017,

		licensed under


		the MIT license

		Copyright (c) 2017 K.

		 Permission is hereby granted, free of charge, to any person
		obtaining a copy of this software and associated documentation
		files (the "Software"), to deal in the Software without
		restriction, including without limitation the rights to use,
		copy, modify, merge, publish, distribute, sublicense, and/or
		sell copies of the Software, and to permit persons to whom the
		Software is furnished to do so, subject to the following
		conditions:

		 The above copyright notice and this permission notice shall be
		included in all copies or substantial portions of the Software.

		 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
		EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
		OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
		NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
		HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
		WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
		FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
		OTHER DEALINGS IN THE SOFTWARE.
*/



var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var RIPEMD160 = function () {
	function RIPEMD160() {
		// https://webcache.googleusercontent.com/search?q=cache:CnLOgolTHYEJ:https://www.cosic.esat.kuleuven.be/publications/article-317.pdf
		// http://shodhganga.inflibnet.ac.in/bitstream/10603/22978/13/13_appendix.pdf

		_classCallCheck(this, RIPEMD160);
	}

	_createClass(RIPEMD160, null, [{
		key: "get_n_pad_bytes",
		value: function get_n_pad_bytes(message_size /* in bytes, 1 byte is 8 bits. */) {
			//  Obtain the number of bytes needed to pad the message.
			// It does not contain the size of the message size information.
			/*
   	https://webcache.googleusercontent.com/search?q=cache:CnLOgolTHYEJ:https://www.cosic.esat.kuleuven.be/publications/article-317.pdf
   		The Cryptographic Hash Function RIPEMD-160
   		written by
   		Bart Preneel,
   		Hans Dobbertin,
   		Antoon Bosselaers
   	in
   		1997.
   		--------------------------------------------------
   		§5     Description of RIPEMD-160
   		......
   		 In order to guarantee that the total input size is a
   	multiple of 512 bits, the input is padded in the same
   	way as for all the members of the MD4-family: one
   	appends a single 1 followed by a string of 0s (the
   	number of 0s lies between 0 and 511); the last 64 bits
   	of the extended input contain the binary representation
   	of the input size in bits, least significant byte first.
   */
			/*
   	https://tools.ietf.org/rfc/rfc1186.txt
   		RFC 1186: MD4 Message Digest Algorithm.
   		written by
   		Ronald Linn Rivest
   	in
   		October 1990.
   		--------------------------------------------------
   		§3     MD4 Algorithm Description
   		......
   		Step 1. Append padding bits
   		 The message is "padded" (extended) so that its length
   	(in bits) is congruent to 448, modulo 512. That is, the
   	message is extended so that it is just 64 bits shy of
   	being a multiple of 512 bits long. Padding is always
   	performed, even if the length of the message is already
   	congruent to 448, modulo 512 (in which case 512 bits of
   	padding are added).
   		 Padding is performed as follows: a single "1" bit is
   	appended to the message, and then enough zero bits are
   	appended so that the length in bits of the padded
   	message becomes congruent to 448, modulo 512.
   		Step 2. Append length
   		 A 64-bit representation of b (the length of the message
   	before the padding bits were added) is appended to the
   	result of the previous step. In the unlikely event that
   	b is greater than 2^64, then only the low-order 64 bits
   	of b are used. (These bits are appended as two 32-bit
   	words and appended low-order word first in accordance
   	with the previous conventions.)
   		 At this point the resulting message (after padding with
   	bits and with b) has a length that is an exact multiple
   	of 512 bits. Equivalently, this message has a length
   	that is an exact multiple of 16 (32-bit) words. Let
   	M[0 ... N-1] denote the words of the resulting message,
   	where N is a multiple of 16.
   */
			// https://crypto.stackexchange.com/a/32407/54568
			/*
   	Example case  # 1
   		[0 bit: message.]
   		[1 bit: 1.]
   		[447 bits: 0.]
   		[64 bits: message size information.]
   		Example case  # 2
   		[512-bits: message]
   		[1 bit: 1.]
   		[447 bits: 0.]
   		[64 bits: message size information.]
   		Example case  # 3
   		[(512 - 64 = 448) bits: message.]
   		[1 bit: 1.]
   		[511 bits: 0.]
   		[64 bits: message size information.]
   		Example case  # 4
   		[(512 - 65 = 447) bits: message.]
   		[1 bit: 1.]
   		[0 bit: 0.]
   		[64 bits: message size information.]
   */
			// The number of padding zero bits:
			//      511 - [{(message size in bits) + 64} (mod 512)]
			return 64 - (message_size + 8 & 63 /* 63 */);
		}
	}, {
		key: "pad",
		value: function pad(message /* An ArrayBuffer. */) {
			var message_size = message.byteLength;
			var n_pad = RIPEMD160.get_n_pad_bytes(message_size);

			//  `Number.MAX_SAFE_INTEGER` is ((2 ** 53) - 1) and
			// bitwise operation in Javascript is done on 32-bits operands.
			var divmod = function divmod(dividend, divisor) {
				return [Math.floor(dividend / divisor), dividend % divisor];
			};
			/*
   To shift
     00000000 000????? ???????? ???????? ???????? ???????? ???????? ????????
                                      t o
    00000000 ???????? ???????? ???????? ???????? ???????? ???????? ?????000
   --------------------------------------------------------------------------------
   Method #1
      00000000 000????? ???????? ????????  ???????? ???????? ???????? ????????
    [00000000 000AAAAA AAAAAAAA AAAAAAAA] (<A> captured)
    [00000000 AAAAAAAA AAAAAAAA AAAAA000] (<A> shifted)
                          (<B> captured) [BBBBBBBB BBBBBBBB BBBBBBBB BBBBBBBB]
                      (<B> shifted) [BBB][BBBBBBBB BBBBBBBB BBBBBBBB BBBBB000]
    [00000000 AAAAAAAA AAAAAAAA AAAAABBB] (<A> & <B_2> merged)
    [00000000 AAAAAAAA AAAAAAAA AAAAABBB][BBBBBBBB BBBBBBBB BBBBBBBB BBBBB000]
     00000000 ???????? ???????? ????????  ???????? ???????? ???????? ?????000
   	const uint32_max_plus_1 = 0x100000000; // (2 ** 32)
   const [
   	msg_byte_size_most, // Value range [0, (2 ** 21) - 1].
   	msg_byte_size_least // Value range [0, (2 ** 32) - 1].
   ] = divmod(message_size, uint32_max_plus_1);
   const [
   	carry, // Value range [0, 7].
   	msg_bit_size_least // Value range [0, (2 ** 32) - 8].
   ] = divmod(message_byte_size_least * 8, uint32_max_plus_1);
   const message_bit_size_most = message_byte_size_most * 8
   	+ carry; // Value range [0, (2 ** 24) - 1].
   --------------------------------------------------------------------------------
   Method #2
     00000000 000????? ???????? ????????  ???????? ???????? ???????? ????????
       [00000 000AAAAA AAAAAAAA AAAAAAAA  AAA] (<A> captured)
                          (<B> captured) [000BBBBB BBBBBBBB BBBBBBBB BBBBBBBB]
                           (<B> shifted) [BBBBBBBB BBBBBBBB BBBBBBBB BBBBB000]
    [00000000 AAAAAAAA AAAAAAAA AAAAAAAA][BBBBBBBB BBBBBBBB BBBBBBBB BBBBB000]
     00000000 ???????? ???????? ????????  ???????? ???????? ???????? ?????000
   	*/

			var _divmod$map = divmod(message_size, 536870912 /* (2 ** 29) */).map(function (x, index) {
				return index ? x * 8 : x;
			}),
			    _divmod$map2 = _slicedToArray(_divmod$map, 2),
			    msg_bit_size_most = _divmod$map2[0],
			    msg_bit_size_least = _divmod$map2[1];

			// `ArrayBuffer.transfer()` is not supported.


			var padded = new Uint8Array(message_size + n_pad + 8);
			padded.set(new Uint8Array(message), 0);
			var data_view = new DataView(padded.buffer);
			data_view.setUint8(message_size, 128);
			data_view.setUint32(message_size + n_pad, msg_bit_size_least, true // Little-endian
			);
			data_view.setUint32(message_size + n_pad + 4, msg_bit_size_most, true // Little-endian
			);

			return padded.buffer;
		}
	}, {
		key: "f",
		value: function f(j, x, y, z) {
			if (0 <= j && j <= 15) {
				// Exclusive-OR
				return x ^ y ^ z;
			}
			if (16 <= j && j <= 31) {
				// Multiplexing (muxing)
				return x & y | ~x & z;
			}
			if (32 <= j && j <= 47) {
				return (x | ~y) ^ z;
			}
			if (48 <= j && j <= 63) {
				// Multiplexing (muxing)
				return x & z | y & ~z;
			}
			if (64 <= j && j <= 79) {
				return x ^ (y | ~z);
			}
		}
	}, {
		key: "K",
		value: function K(j) {
			if (0 <= j && j <= 15) {
				return 0x00000000;
			}
			if (16 <= j && j <= 31) {
				// Math.floor((2 ** 30) * Math.SQRT2)
				return 0x5A827999;
			}
			if (32 <= j && j <= 47) {
				// Math.floor((2 ** 30) * Math.sqrt(3))
				return 0x6ED9EBA1;
			}
			if (48 <= j && j <= 63) {
				// Math.floor((2 ** 30) * Math.sqrt(5))
				return 0x8F1BBCDC;
			}
			if (64 <= j && j <= 79) {
				// Math.floor((2 ** 30) * Math.sqrt(7))
				return 0xA953FD4E;
			}
		}
	}, {
		key: "KP",
		value: function KP(j) // K'
		{
			if (0 <= j && j <= 15) {
				// Math.floor((2 ** 30) * Math.cbrt(2))
				return 0x50A28BE6;
			}
			if (16 <= j && j <= 31) {
				// Math.floor((2 ** 30) * Math.cbrt(3))
				return 0x5C4DD124;
			}
			if (32 <= j && j <= 47) {
				// Math.floor((2 ** 30) * Math.cbrt(5))
				return 0x6D703EF3;
			}
			if (48 <= j && j <= 63) {
				// Math.floor((2 ** 30) * Math.cbrt(7))
				return 0x7A6D76E9;
			}
			if (64 <= j && j <= 79) {
				return 0x00000000;
			}
		}
	}, {
		key: "add_modulo32",
		value: function add_modulo32() /* ...... */{
			// 1.  Modulo addition (addition modulo) is associative.
			//    https://proofwiki.org/wiki/Modulo_Addition_is_Associative
			// 2.  Bitwise operation in Javascript
			//    is done on 32-bits operands
			//    and results in a 32-bits value.
			return Array.from(arguments).reduce(function (a, b) {
				return a + b;
			}, 0) | 0;
		}
	}, {
		key: "rol32",
		value: function rol32(value, count) {
			// Cyclic left shift (rotate) on 32-bits value.
			return value << count | value >>> 32 - count;
		}
	}, {
		key: "hash",
		value: function hash(message /* An ArrayBuffer. */) {
			//////////       Padding       //////////

			// The padded message.
			var padded = RIPEMD160.pad(message);

			//////////     Compression     //////////

			// Message word selectors.
			var r = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8, 3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12, 1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2, 4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13];
			var rP = [// r'
			5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12, 6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2, 15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13, 8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14, 12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11];

			// Amounts for 'rotate left' operation.
			var s = [11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8, 7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12, 11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5, 11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12, 9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6];
			var sP = [// s'
			8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6, 9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11, 9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5, 15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8, 8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11];

			// The size, in bytes, of a word.
			var word_size = 4;

			// The size, in bytes, of a 16-words block.
			var block_size = 64;

			// The number of the 16-words blocks.
			var t = padded.byteLength / block_size;

			//  The message after padding consists of t 16-word blocks that
			// are denoted with X_i[j], with 0≤i≤(t − 1) and 0≤j≤15.
			var X = new Array(t).fill(undefined).map(function (_, i) {
				return function (j) {
					return new DataView(padded, i * block_size, block_size).getUint32(j * word_size, true // Little-endian
					);
				};
			});

			//  The result of RIPEMD-160 is contained in five 32-bit words,
			// which form the internal state of the algorithm. The final
			// content of these five 32-bit words is converted to a 160-bit
			// string, again using the little-endian convention.
			var h = [0x67452301, // h_0
			0xEFCDAB89, // h_1
			0x98BADCFE, // h_2
			0x10325476, // h_3
			0xC3D2E1F0 // h_4
			];

			for (var i = 0; i < t; ++i) {
				var A = h[0],
				    B = h[1],
				    C = h[2],
				    D = h[3],
				    E = h[4];
				var AP = A,
				    BP = B,
				    CP = C,
				    DP = D,
				    EP = E;
				for (var j = 0; j < 80; ++j) {
					// Left rounds
					var _T = RIPEMD160.add_modulo32(RIPEMD160.rol32(RIPEMD160.add_modulo32(A, RIPEMD160.f(j, B, C, D), X[i](r[j]), RIPEMD160.K(j)), s[j]), E);
					A = E;
					E = D;
					D = RIPEMD160.rol32(C, 10);
					C = B;
					B = _T;

					// Right rounds
					_T = RIPEMD160.add_modulo32(RIPEMD160.rol32(RIPEMD160.add_modulo32(AP, RIPEMD160.f(79 - j, BP, CP, DP), X[i](rP[j]), RIPEMD160.KP(j)), sP[j]), EP);
					AP = EP;
					EP = DP;
					DP = RIPEMD160.rol32(CP, 10);
					CP = BP;
					BP = _T;
				}
				var T = RIPEMD160.add_modulo32(h[1], C, DP);
				h[1] = RIPEMD160.add_modulo32(h[2], D, EP);
				h[2] = RIPEMD160.add_modulo32(h[3], E, AP);
				h[3] = RIPEMD160.add_modulo32(h[4], A, BP);
				h[4] = RIPEMD160.add_modulo32(h[0], B, CP);
				h[0] = T;
			}

			//  The final output string then consists of the concatenatation
			// of h_0, h_1, h_2, h_3, and h_4 after converting each h_i to a
			// 4-byte string using the little-endian convention.
			var result = new ArrayBuffer(20);
			var data_view = new DataView(result);
			h.forEach(function (h_i, i) {
				return data_view.setUint32(i * 4, h_i, true);
			});
			return result;
		}
	}]);

	return RIPEMD160;
}();

module.exports = {
	RIPEMD160: RIPEMD160
};


/***/ }),
/* 49 */
/***/ ((module) => {

"use strict";
module.exports = JSON.parse('{"version":"eosio::abi/1.1","structs":[{"name":"extensions_entry","base":"","fields":[{"name":"tag","type":"uint16"},{"name":"value","type":"bytes"}]},{"name":"type_def","base":"","fields":[{"name":"new_type_name","type":"string"},{"name":"type","type":"string"}]},{"name":"field_def","base":"","fields":[{"name":"name","type":"string"},{"name":"type","type":"string"}]},{"name":"struct_def","base":"","fields":[{"name":"name","type":"string"},{"name":"base","type":"string"},{"name":"fields","type":"field_def[]"}]},{"name":"action_def","base":"","fields":[{"name":"name","type":"name"},{"name":"type","type":"string"},{"name":"ricardian_contract","type":"string"}]},{"name":"table_def","base":"","fields":[{"name":"name","type":"name"},{"name":"index_type","type":"string"},{"name":"key_names","type":"string[]"},{"name":"key_types","type":"string[]"},{"name":"type","type":"string"}]},{"name":"clause_pair","base":"","fields":[{"name":"id","type":"string"},{"name":"body","type":"string"}]},{"name":"error_message","base":"","fields":[{"name":"error_code","type":"uint64"},{"name":"error_msg","type":"string"}]},{"name":"variant_def","base":"","fields":[{"name":"name","type":"string"},{"name":"types","type":"string[]"}]},{"name":"abi_def","base":"","fields":[{"name":"version","type":"string"},{"name":"types","type":"type_def[]"},{"name":"structs","type":"struct_def[]"},{"name":"actions","type":"action_def[]"},{"name":"tables","type":"table_def[]"},{"name":"ricardian_clauses","type":"clause_pair[]"},{"name":"error_messages","type":"error_message[]"},{"name":"abi_extensions","type":"extensions_entry[]"},{"name":"variants","type":"variant_def[]$"}]}]}');

/***/ }),
/* 50 */
/***/ ((module) => {

"use strict";
module.exports = JSON.parse('{"version":"eosio::abi/1.0","types":[{"new_type_name":"account_name","type":"name"},{"new_type_name":"action_name","type":"name"},{"new_type_name":"permission_name","type":"name"}],"structs":[{"name":"permission_level","base":"","fields":[{"name":"actor","type":"account_name"},{"name":"permission","type":"permission_name"}]},{"name":"action","base":"","fields":[{"name":"account","type":"account_name"},{"name":"name","type":"action_name"},{"name":"authorization","type":"permission_level[]"},{"name":"data","type":"bytes"}]},{"name":"extension","base":"","fields":[{"name":"type","type":"uint16"},{"name":"data","type":"bytes"}]},{"name":"transaction_header","base":"","fields":[{"name":"expiration","type":"time_point_sec"},{"name":"ref_block_num","type":"uint16"},{"name":"ref_block_prefix","type":"uint32"},{"name":"max_net_usage_words","type":"varuint32"},{"name":"max_cpu_usage_ms","type":"uint8"},{"name":"delay_sec","type":"varuint32"}]},{"name":"transaction","base":"transaction_header","fields":[{"name":"context_free_actions","type":"action[]"},{"name":"actions","type":"action[]"},{"name":"transaction_extensions","type":"extension[]"}]}]}');

/***/ }),
/* 51 */
/***/ ((__unused_webpack_module, exports) => {

"use strict";

// copyright defined in eosjs/LICENSE.txt
Object.defineProperty(exports, "__esModule", ({ value: true }));
//# sourceMappingURL=eosjs-api-interfaces.js.map

/***/ }),
/* 52 */
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/**
 * @module JSON-RPC
 */
// copyright defined in eosjs/LICENSE.txt
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __values = (this && this.__values) || function (o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
var eosjs_numeric_1 = __webpack_require__(47);
var eosjs_rpcerror_1 = __webpack_require__(53);
function arrayToHex(data) {
    var e_1, _a;
    var result = '';
    try {
        for (var data_1 = __values(data), data_1_1 = data_1.next(); !data_1_1.done; data_1_1 = data_1.next()) {
            var x = data_1_1.value;
            result += ('00' + x.toString(16)).slice(-2);
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (data_1_1 && !data_1_1.done && (_a = data_1.return)) _a.call(data_1);
        }
        finally { if (e_1) throw e_1.error; }
    }
    return result;
}
/** Make RPC calls */
var JsonRpc = /** @class */ (function () {
    /**
     * @param args
     *    * `fetch`:
     *    * browsers: leave `null` or `undefined`
     *    * node: provide an implementation
     */
    function JsonRpc(endpoint, args) {
        if (args === void 0) { args = {}; }
        this.endpoint = endpoint;
        if (args.fetch) {
            this.fetchBuiltin = args.fetch;
        }
        else {
            this.fetchBuiltin = __webpack_require__.g.fetch;
        }
    }
    /** Post `body` to `endpoint + path`. Throws detailed error information in `RpcError` when available. */
    JsonRpc.prototype.fetch = function (path, body) {
        return __awaiter(this, void 0, void 0, function () {
            var response, json, f, e_2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 3, , 4]);
                        f = this.fetchBuiltin;
                        return [4 /*yield*/, f(this.endpoint + path, {
                                body: JSON.stringify(body),
                                method: 'POST',
                            })];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.json()];
                    case 2:
                        json = _a.sent();
                        if (json.processed && json.processed.except) {
                            throw new eosjs_rpcerror_1.RpcError(json);
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        e_2 = _a.sent();
                        e_2.isFetchError = true;
                        throw e_2;
                    case 4:
                        if (!response.ok) {
                            throw new eosjs_rpcerror_1.RpcError(json);
                        }
                        return [2 /*return*/, json];
                }
            });
        });
    };
    /** Raw call to `/v1/chain/get_abi` */
    JsonRpc.prototype.get_abi = function (accountName) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.fetch('/v1/chain/get_abi', { account_name: accountName })];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /** Raw call to `/v1/chain/get_account` */
    JsonRpc.prototype.get_account = function (accountName) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.fetch('/v1/chain/get_account', { account_name: accountName })];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /** Raw call to `/v1/chain/get_block_header_state` */
    JsonRpc.prototype.get_block_header_state = function (blockNumOrId) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.fetch('/v1/chain/get_block_header_state', { block_num_or_id: blockNumOrId })];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /** Raw call to `/v1/chain/get_block` */
    JsonRpc.prototype.get_block = function (blockNumOrId) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.fetch('/v1/chain/get_block', { block_num_or_id: blockNumOrId })];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /** Raw call to `/v1/chain/get_code` */
    JsonRpc.prototype.get_code = function (accountName) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.fetch('/v1/chain/get_code', { account_name: accountName })];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /** Raw call to `/v1/chain/get_currency_balance` */
    JsonRpc.prototype.get_currency_balance = function (code, account, symbol) {
        if (symbol === void 0) { symbol = null; }
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.fetch('/v1/chain/get_currency_balance', { code: code, account: account, symbol: symbol })];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /** Raw call to `/v1/chain/get_currency_stats` */
    JsonRpc.prototype.get_currency_stats = function (code, symbol) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.fetch('/v1/chain/get_currency_stats', { code: code, symbol: symbol })];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /** Raw call to `/v1/chain/get_info` */
    JsonRpc.prototype.get_info = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.fetch('/v1/chain/get_info', {})];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /** Raw call to `/v1/chain/get_producer_schedule` */
    JsonRpc.prototype.get_producer_schedule = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.fetch('/v1/chain/get_producer_schedule', {})];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /** Raw call to `/v1/chain/get_producers` */
    JsonRpc.prototype.get_producers = function (json, lowerBound, limit) {
        if (json === void 0) { json = true; }
        if (lowerBound === void 0) { lowerBound = ''; }
        if (limit === void 0) { limit = 50; }
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.fetch('/v1/chain/get_producers', { json: json, lower_bound: lowerBound, limit: limit })];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /** Raw call to `/v1/chain/get_raw_code_and_abi` */
    JsonRpc.prototype.get_raw_code_and_abi = function (accountName) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.fetch('/v1/chain/get_raw_code_and_abi', { account_name: accountName })];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /** calls `/v1/chain/get_raw_code_and_abi` and pulls out unneeded raw wasm code */
    // TODO: use `/v1/chain/get_raw_abi` directly when it becomes available
    JsonRpc.prototype.getRawAbi = function (accountName) {
        return __awaiter(this, void 0, void 0, function () {
            var rawCodeAndAbi, abi;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.get_raw_code_and_abi(accountName)];
                    case 1:
                        rawCodeAndAbi = _a.sent();
                        abi = eosjs_numeric_1.base64ToBinary(rawCodeAndAbi.abi);
                        return [2 /*return*/, { accountName: rawCodeAndAbi.account_name, abi: abi }];
                }
            });
        });
    };
    /** Raw call to `/v1/chain/get_table_rows` */
    JsonRpc.prototype.get_table_rows = function (_a) {
        var _b = _a.json, json = _b === void 0 ? true : _b, code = _a.code, scope = _a.scope, table = _a.table, _c = _a.table_key, table_key = _c === void 0 ? '' : _c, _d = _a.lower_bound, lower_bound = _d === void 0 ? '' : _d, _e = _a.upper_bound, upper_bound = _e === void 0 ? '' : _e, _f = _a.index_position, index_position = _f === void 0 ? 1 : _f, _g = _a.key_type, key_type = _g === void 0 ? '' : _g, _h = _a.limit, limit = _h === void 0 ? 10 : _h, _j = _a.reverse, reverse = _j === void 0 ? false : _j, _k = _a.show_payer, show_payer = _k === void 0 ? false : _k;
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_l) {
                switch (_l.label) {
                    case 0: return [4 /*yield*/, this.fetch('/v1/chain/get_table_rows', {
                            json: json,
                            code: code,
                            scope: scope,
                            table: table,
                            table_key: table_key,
                            lower_bound: lower_bound,
                            upper_bound: upper_bound,
                            index_position: index_position,
                            key_type: key_type,
                            limit: limit,
                            reverse: reverse,
                            show_payer: show_payer,
                        })];
                    case 1: return [2 /*return*/, _l.sent()];
                }
            });
        });
    };
    /** Raw call to `/v1/chain/get_table_by_scope` */
    JsonRpc.prototype.get_table_by_scope = function (_a) {
        var code = _a.code, table = _a.table, _b = _a.lower_bound, lower_bound = _b === void 0 ? '' : _b, _c = _a.upper_bound, upper_bound = _c === void 0 ? '' : _c, _d = _a.limit, limit = _d === void 0 ? 10 : _d;
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_e) {
                switch (_e.label) {
                    case 0: return [4 /*yield*/, this.fetch('/v1/chain/get_table_by_scope', {
                            code: code,
                            table: table,
                            lower_bound: lower_bound,
                            upper_bound: upper_bound,
                            limit: limit,
                        })];
                    case 1: return [2 /*return*/, _e.sent()];
                }
            });
        });
    };
    /** Get subset of `availableKeys` needed to meet authorities in `transaction`. Implements `AuthorityProvider` */
    JsonRpc.prototype.getRequiredKeys = function (args) {
        return __awaiter(this, void 0, void 0, function () {
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = eosjs_numeric_1.convertLegacyPublicKeys;
                        return [4 /*yield*/, this.fetch('/v1/chain/get_required_keys', {
                                transaction: args.transaction,
                                available_keys: args.availableKeys,
                            })];
                    case 1: return [2 /*return*/, _a.apply(void 0, [(_b.sent()).required_keys])];
                }
            });
        });
    };
    /** Push a serialized transaction */
    JsonRpc.prototype.push_transaction = function (_a) {
        var signatures = _a.signatures, serializedTransaction = _a.serializedTransaction;
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, this.fetch('/v1/chain/push_transaction', {
                            signatures: signatures,
                            compression: 0,
                            packed_context_free_data: '',
                            packed_trx: arrayToHex(serializedTransaction),
                        })];
                    case 1: return [2 /*return*/, _b.sent()];
                }
            });
        });
    };
    /** Raw call to `/v1/db_size/get` */
    JsonRpc.prototype.db_size_get = function () {
        return __awaiter(this, void 0, void 0, function () { return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, this.fetch('/v1/db_size/get', {})];
                case 1: return [2 /*return*/, _a.sent()];
            }
        }); });
    };
    /** Raw call to `/v1/history/get_actions` */
    JsonRpc.prototype.history_get_actions = function (accountName, pos, offset) {
        if (pos === void 0) { pos = null; }
        if (offset === void 0) { offset = null; }
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.fetch('/v1/history/get_actions', { account_name: accountName, pos: pos, offset: offset })];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /** Raw call to `/v1/history/get_transaction` */
    JsonRpc.prototype.history_get_transaction = function (id, blockNumHint) {
        if (blockNumHint === void 0) { blockNumHint = null; }
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.fetch('/v1/history/get_transaction', { id: id, block_num_hint: blockNumHint })];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /** Raw call to `/v1/history/get_key_accounts` */
    JsonRpc.prototype.history_get_key_accounts = function (publicKey) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.fetch('/v1/history/get_key_accounts', { public_key: publicKey })];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /** Raw call to `/v1/history/get_controlled_accounts` */
    JsonRpc.prototype.history_get_controlled_accounts = function (controllingAccount) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.fetch('/v1/history/get_controlled_accounts', { controlling_account: controllingAccount })];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    return JsonRpc;
}()); // JsonRpc
exports.JsonRpc = JsonRpc;
//# sourceMappingURL=eosjs-jsonrpc.js.map

/***/ }),
/* 53 */
/***/ (function(__unused_webpack_module, exports) {

"use strict";

/**
 * @module RPC-Error
 */
// copyright defined in eosjs/LICENSE.txt
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", ({ value: true }));
/** Holds detailed error information */
var RpcError = /** @class */ (function (_super) {
    __extends(RpcError, _super);
    function RpcError(json) {
        var _this = this;
        if (json.error && json.error.details && json.error.details.length && json.error.details[0].message) {
            _this = _super.call(this, json.error.details[0].message) || this;
        }
        else if (json.processed && json.processed.except && json.processed.except.message) {
            _this = _super.call(this, json.processed.except.message) || this;
        }
        else {
            _this = _super.call(this, json.message) || this;
        }
        Object.setPrototypeOf(_this, RpcError.prototype);
        _this.json = json;
        return _this;
    }
    return RpcError;
}(Error));
exports.RpcError = RpcError;
//# sourceMappingURL=eosjs-rpcerror.js.map

/***/ }),
/* 54 */
/***/ ((__unused_webpack_module, exports) => {

"use strict";

// copyright defined in eosjs/LICENSE.txt
Object.defineProperty(exports, "__esModule", ({ value: true }));
//# sourceMappingURL=eosjs-rpc-interfaces.js.map

/***/ }),
/* 55 */
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
function makeStateContainer(initialState) {
    var state = initialState;
    var listeners = [];
    return {
        getState: function () {
            return state;
        },
        updateState: function (updater) {
            state =
                typeof updater === 'function'
                    ? updater(state)
                    : updater;
            for (var _i = 0, listeners_1 = listeners; _i < listeners_1.length; _i++) {
                var listener = listeners_1[_i];
                listener(state);
            }
        },
        subscribe: function (listenerFn) {
            listeners.push(listenerFn);
            return function unsubscribe() {
                listeners = listeners.filter(function (l) { return l !== listenerFn; });
            };
        }
    };
}
exports.makeStateContainer = makeStateContainer;
//# sourceMappingURL=stateContainer.js.map

/***/ }),
/* 56 */
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
var eosjs_1 = __webpack_require__(44);
var v4_1 = __importDefault(__webpack_require__(57));
var stateContainer_1 = __webpack_require__(55);
var util_1 = __webpack_require__(60);
var DEFAULT_STATE = {
    connecting: false,
    connected: false,
    connectionError: false,
    connectionErrorMessage: void 0,
    auth: void 0,
    authenticating: false,
    authenticated: false,
    authenticationConfirmed: false,
    authenticationError: false,
    authenticationErrorMessage: void 0,
    accountInfo: void 0,
    accountFetching: false,
    accountFetchError: false,
    accountFetchErrorMessage: void 0
};
function initWallet(walletProvider, ctx) {
    var _instanceId = v4_1.default();
    var _stateContainer = stateContainer_1.makeStateContainer(__assign({}, DEFAULT_STATE));
    //let discoverData: DiscoveryData = { keyToAccountMap: [], keys: [] };
    var discoverData = { keyToAccountMap: [] };
    var counter = 0;
    var getState = _stateContainer.getState;
    var eosApi = new eosjs_1.Api({
        // Api() constructor requires a JsonRpc - even if we dont want one for non-eos, so create empty JsonRpc here
        rpc: ctx.eosRpc ? ctx.eosRpc : new eosjs_1.JsonRpc(''),
        chainId: ctx.network.chainId,
        signatureProvider: walletProvider.signatureProvider
    });
    // Account helpers
    function fetchAccountInfo(accountName) {
        if (!accountName) {
            return Promise.reject('No `accountName` was passed in order to fetch the account info');
        }
        _stateContainer.updateState(function (state) { return (__assign({}, state, { accountFetching: true, accountFetchError: false, accountFetchErrorMessage: void 0 })); });
        // NonEOS Support: if ctx.eosRpc is undefined,
        // return AccountInfo with just accountName
        if (!ctx.eosRpc) {
            var accountInfo_1 = { name: accountName };
            _stateContainer.updateState(function (state) { return (__assign({}, state, { accountFetching: false, accountInfo: accountInfo_1 })); });
            return Promise.resolve(accountInfo_1);
        }
        return ctx.eosRpc
            .get_account(accountName)
            .then(function (accountData) {
            var accountInfo = __assign({}, accountData);
            _stateContainer.updateState(function (state) { return (__assign({}, state, { accountFetching: false, accountInfo: accountInfo })); });
            return accountInfo;
        })
            .catch(function (error) {
            _stateContainer.updateState(function (state) { return (__assign({}, state, { accountFetching: false, accountInfo: void 0, accountFetchError: true, accountFetchErrorMessage: util_1.getErrorMessage(error) })); });
            return Promise.reject(error);
        });
    }
    // Connection
    function connect() {
        _stateContainer.updateState(function (state) { return (__assign({}, state, { connected: false, connecting: true, connectionError: false, connectionErrorMessage: void 0 })); });
        return walletProvider
            .connect(ctx.appName)
            .then(function () {
            _stateContainer.updateState(function (state) { return (__assign({}, state, { connecting: false, connected: true })); });
            return true;
        })
            .catch(function (error) {
            _stateContainer.updateState(function (state) { return (__assign({}, state, { connecting: false, connectionError: true, connectionErrorMessage: util_1.getErrorMessage(error) })); });
            return Promise.reject(error);
        });
    }
    function discover(discoveryOptions) {
        return __awaiter(this, void 0, void 0, function () {
            var accountsDataObjToMerge, discoverResult;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        accountsDataObjToMerge = { keyToAccountMap: [] };
                        return [4 /*yield*/, walletProvider.discover(discoveryOptions).then(function (walletDiscoveryData) { return __awaiter(_this, void 0, void 0, function () {
                                var modifiedData, promises, _loop_1, _i, _a, keyData;
                                var _this = this;
                                return __generator(this, function (_b) {
                                    switch (_b.label) {
                                        case 0:
                                            console.log('walletDiscoveryData');
                                            console.log(walletDiscoveryData);
                                            //Merge any properties that were returned from the wallets specific discovery process. This allows the wallet to add custom properties to the response if needed.
                                            accountsDataObjToMerge = __assign({}, accountsDataObjToMerge, walletDiscoveryData);
                                            delete accountsDataObjToMerge.keys;
                                            // let keys: string[] = []; // If the discover fuction in the wallet doesn't return any keys we know the login function is going to have to prompt the user to select one.
                                            // if (walletDiscoveryData.keys) {
                                            // 	keys = walletDiscoveryData.keys;
                                            // }
                                            // A callback of this kind can be supplied to the discover function, which will allow the caller to modify the list of keys before the account lookup process happens. 
                                            // The feature was added so that key returned from the Ledger device can be modified to have a ENU prefix when in use with the the enumivo chain 
                                            if (discoveryOptions.keyModifierFunc !== undefined) {
                                                modifiedData = discoveryOptions.keyModifierFunc(walletDiscoveryData);
                                                walletDiscoveryData = modifiedData;
                                            }
                                            if (!(discoveryOptions.keyLookupFunc !== undefined)) return [3 /*break*/, 1];
                                            // discoveryOptions.keyLookupFunc(walletDiscoveryData);
                                            discoveryOptions.keyLookupFunc(walletDiscoveryData, function (discoveredAccounts) {
                                                accountsDataObjToMerge.keyToAccountMap = discoveredAccounts;
                                                console.log('accountsDataObjToMerge(keyLookupFunc)');
                                                console.log({ accountsDataObjToMerge: accountsDataObjToMerge });
                                                return Promise.resolve({ accountsDataObjToMerge: accountsDataObjToMerge });
                                            });
                                            return [3 /*break*/, 3];
                                        case 1:
                                            promises = [];
                                            _loop_1 = function (keyData) {
                                                var key = keyData.key;
                                                var keyIndex = keyData.index;
                                                var cached = false;
                                                if (discoverData.keyToAccountMap) {
                                                    var foundInCache = discoverData.keyToAccountMap.findIndex(function (y) { return y.index == keyIndex; });
                                                    if (foundInCache > -1)
                                                        cached = true;
                                                }
                                                if (key && !cached && ctx.eosRpc) {
                                                    var p = ctx.eosRpc.history_get_key_accounts(key).then(function (accountData) { return __awaiter(_this, void 0, void 0, function () {
                                                        var accountEntry, _loop_2, _i, _a, account;
                                                        var _this = this;
                                                        return __generator(this, function (_b) {
                                                            switch (_b.label) {
                                                                case 0:
                                                                    accountEntry = {
                                                                        index: keyIndex,
                                                                        key: key,
                                                                        accounts: []
                                                                    };
                                                                    if (!(accountData.account_names.length > 0)) return [3 /*break*/, 4];
                                                                    _loop_2 = function (account) {
                                                                        return __generator(this, function (_a) {
                                                                            switch (_a.label) {
                                                                                case 0: return [4 /*yield*/, ctx.eosRpc.get_account(account).then(function (accountInfo) { return __awaiter(_this, void 0, void 0, function () {
                                                                                        var _i, _a, permission, _b, _c, permissionKey;
                                                                                        return __generator(this, function (_d) {
                                                                                            for (_i = 0, _a = accountInfo.permissions; _i < _a.length; _i++) {
                                                                                                permission = _a[_i];
                                                                                                for (_b = 0, _c = permission.required_auth.keys; _b < _c.length; _b++) {
                                                                                                    permissionKey = _c[_b];
                                                                                                    if (permissionKey.key == key) {
                                                                                                        accountEntry.accounts.push({
                                                                                                            account: account,
                                                                                                            authorization: permission.perm_name
                                                                                                        });
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                            return [2 /*return*/];
                                                                                        });
                                                                                    }); })];
                                                                                case 1:
                                                                                    _a.sent();
                                                                                    return [2 /*return*/];
                                                                            }
                                                                        });
                                                                    };
                                                                    _i = 0, _a = accountData.account_names;
                                                                    _b.label = 1;
                                                                case 1:
                                                                    if (!(_i < _a.length)) return [3 /*break*/, 4];
                                                                    account = _a[_i];
                                                                    return [5 /*yield**/, _loop_2(account)];
                                                                case 2:
                                                                    _b.sent();
                                                                    _b.label = 3;
                                                                case 3:
                                                                    _i++;
                                                                    return [3 /*break*/, 1];
                                                                case 4: return [2 /*return*/, accountEntry];
                                                            }
                                                        });
                                                    }); });
                                                    promises.push(p);
                                                }
                                            };
                                            for (_i = 0, _a = walletDiscoveryData.keys; _i < _a.length; _i++) {
                                                keyData = _a[_i];
                                                _loop_1(keyData);
                                            }
                                            return [4 /*yield*/, Promise.all(promises).then(function (results) {
                                                    accountsDataObjToMerge.keyToAccountMap = results || [];
                                                    console.log('accountsDataObjToMerge');
                                                    console.log({ accountsDataObjToMerge: accountsDataObjToMerge });
                                                    return Promise.resolve({ accountsDataObjToMerge: accountsDataObjToMerge });
                                                })];
                                        case 2:
                                            _b.sent();
                                            _b.label = 3;
                                        case 3: return [2 /*return*/];
                                    }
                                });
                            }); })];
                    case 1:
                        discoverResult = _a.sent();
                        counter++;
                        if (discoverData.keyToAccountMap.length == 0) {
                            discoverData = __assign({}, discoverData, accountsDataObjToMerge);
                        }
                        else {
                            accountsDataObjToMerge.keyToAccountMap.forEach(function (newKey) {
                                discoverData.keyToAccountMap.push(newKey);
                                // discoverData.keys = accountsDataObjToMerge.keys;
                            });
                        }
                        // console.log(discoverData);
                        return [2 /*return*/, Promise.resolve(discoverData)];
                }
            });
        });
    }
    function disconnect() {
        return walletProvider.disconnect().then(function () {
            _stateContainer.updateState(function (state) { return (__assign({}, state, { connecting: false, connected: false, connectionError: false, connectionErrorMessage: void 0 })); });
            return true;
        });
    }
    // Authentication
    function login(accountName, authorization) {
        _stateContainer.updateState(function (state) { return (__assign({}, state, { accountInfo: void 0, authenticated: false, authenticationConfirmed: false, authenticating: true, authenticationError: false, authenticationErrorMessage: void 0 })); });
        var index = -1;
        var key = undefined;
        //If we've done discovery then we should be able to find the account trying to login in the discoverData
        if (discoverData.keyToAccountMap.length > 0) {
            // console.log('see if we can find ' + accountName + ' ' + authorization);
            if (accountName && authorization) {
                discoverData.keyToAccountMap.forEach(function (indexObj) {
                    var found = indexObj.accounts.find(function (account) {
                        return account.account == accountName && account.authorization == authorization;
                    });
                    if (found) {
                        index = indexObj.index;
                        key = indexObj.key;
                    }
                });
            }
            if (!key) {
                throw 'Loging was not able to determine the Key and Index for ' + authorization + '@' + accountName;
            }
        }
        return walletProvider
            .login(accountName, authorization, index, key)
            .then(function (walletAuth) {
            _stateContainer.updateState(function (state) { return (__assign({}, state, { auth: walletAuth, authenticated: true, authenticating: false })); });
            return fetchAccountInfo(walletAuth.accountName);
        })
            .then(function (accountInfo) {
            _stateContainer.updateState(function (state) { return (__assign({}, state, { accountInfo: accountInfo })); });
            return accountInfo;
        })
            .catch(function (error) {
            _stateContainer.updateState(function (state) { return (__assign({}, state, { authenticating: false, authenticationError: true, authenticationErrorMessage: util_1.getErrorMessage(error) })); });
            return Promise.reject(error);
        });
    }
    function logout() {
        return walletProvider.logout().then(function () {
            _stateContainer.updateState(function (state) { return (__assign({}, state, { accountInfo: void 0, authenticating: false, authenticated: false, authenticationError: false, authenticationErrorMessage: void 0 })); });
            return true;
        });
    }
    function signArbitrary(data, userMessage, metadata) {
        return walletProvider.signArbitrary(data, userMessage, metadata);
    }
    var wallet = {
        _instanceId: _instanceId,
        ctx: ctx,
        provider: walletProvider,
        eosApi: eosApi,
        get state() {
            return getState() || __assign({}, DEFAULT_STATE);
        },
        // Shortcut state accessors
        get auth() {
            var state = getState();
            return (state && state.auth) || void 0;
        },
        get accountInfo() {
            var state = getState();
            return (state && state.accountInfo) || void 0;
        },
        get connected() {
            var state = getState();
            return (state && state.connected) || false;
        },
        get authenticated() {
            var state = getState();
            return (state && state.authenticated) || false;
        },
        get inProgress() {
            var state = getState();
            if (!state)
                return false;
            var connecting = state.connecting, authenticating = state.authenticating, accountFetching = state.accountFetching;
            return !!(connecting || authenticating || accountFetching);
        },
        get active() {
            var state = getState();
            if (!state)
                return false;
            var connected = state.connected, authenticated = state.authenticated, accountInfo = state.accountInfo;
            return !!(connected && authenticated && accountInfo);
        },
        get hasError() {
            var state = getState();
            if (!state)
                return false;
            var connectionError = state.connectionError, authenticationError = state.authenticationError, accountFetchError = state.accountFetchError;
            return !!(connectionError || authenticationError || accountFetchError);
        },
        get errorMessage() {
            var state = getState();
            if (!state)
                return void 0;
            if (!wallet.hasError)
                return void 0;
            var connectionErrorMessage = state.connectionErrorMessage, authenticationErrorMessage = state.authenticationErrorMessage, accountFetchErrorMessage = state.accountFetchErrorMessage;
            return (connectionErrorMessage ||
                authenticationErrorMessage ||
                accountFetchErrorMessage ||
                'Wallet connection error');
        },
        connect: connect,
        discover: discover,
        disconnect: disconnect,
        login: login,
        logout: logout,
        fetchAccountInfo: fetchAccountInfo,
        terminate: function () {
            return logout().then(disconnect).then(function () {
                ctx.detachWallet(wallet);
                return true;
            });
        },
        subscribe: function (listener) {
            return _stateContainer.subscribe(listener);
        },
        signArbitrary: signArbitrary
    };
    return wallet;
}
exports.initWallet = initWallet;
//# sourceMappingURL=wallet.js.map

/***/ }),
/* 57 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var rng = __webpack_require__(58);
var bytesToUuid = __webpack_require__(59);

function v4(options, buf, offset) {
  var i = buf && offset || 0;

  if (typeof(options) == 'string') {
    buf = options === 'binary' ? new Array(16) : null;
    options = null;
  }
  options = options || {};

  var rnds = options.random || (options.rng || rng)();

  // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`
  rnds[6] = (rnds[6] & 0x0f) | 0x40;
  rnds[8] = (rnds[8] & 0x3f) | 0x80;

  // Copy bytes to buffer, if provided
  if (buf) {
    for (var ii = 0; ii < 16; ++ii) {
      buf[i + ii] = rnds[ii];
    }
  }

  return buf || bytesToUuid(rnds);
}

module.exports = v4;


/***/ }),
/* 58 */
/***/ ((module) => {

// Unique ID creation requires a high quality random # generator.  In the
// browser this is a little complicated due to unknown quality of Math.random()
// and inconsistent support for the `crypto` API.  We do the best we can via
// feature-detection

// getRandomValues needs to be invoked in a context where "this" is a Crypto
// implementation. Also, find the complete implementation of crypto on IE11.
var getRandomValues = (typeof(crypto) != 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto)) ||
                      (typeof(msCrypto) != 'undefined' && typeof window.msCrypto.getRandomValues == 'function' && msCrypto.getRandomValues.bind(msCrypto));

if (getRandomValues) {
  // WHATWG crypto RNG - http://wiki.whatwg.org/wiki/Crypto
  var rnds8 = new Uint8Array(16); // eslint-disable-line no-undef

  module.exports = function whatwgRNG() {
    getRandomValues(rnds8);
    return rnds8;
  };
} else {
  // Math.random()-based (RNG)
  //
  // If all else fails, use Math.random().  It's fast, but is of unspecified
  // quality.
  var rnds = new Array(16);

  module.exports = function mathRNG() {
    for (var i = 0, r; i < 16; i++) {
      if ((i & 0x03) === 0) r = Math.random() * 0x100000000;
      rnds[i] = r >>> ((i & 0x03) << 3) & 0xff;
    }

    return rnds;
  };
}


/***/ }),
/* 59 */
/***/ ((module) => {

/**
 * Convert array of 16 byte values to UUID string format of the form:
 * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX
 */
var byteToHex = [];
for (var i = 0; i < 256; ++i) {
  byteToHex[i] = (i + 0x100).toString(16).substr(1);
}

function bytesToUuid(buf, offset) {
  var i = offset || 0;
  var bth = byteToHex;
  // join used to fix memory issue caused by concatenation: https://bugs.chromium.org/p/v8/issues/detail?id=3175#c4
  return ([
    bth[buf[i++]], bth[buf[i++]],
    bth[buf[i++]], bth[buf[i++]], '-',
    bth[buf[i++]], bth[buf[i++]], '-',
    bth[buf[i++]], bth[buf[i++]], '-',
    bth[buf[i++]], bth[buf[i++]], '-',
    bth[buf[i++]], bth[buf[i++]],
    bth[buf[i++]], bth[buf[i++]],
    bth[buf[i++]], bth[buf[i++]]
  ]).join('');
}

module.exports = bytesToUuid;


/***/ }),
/* 60 */
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
function getNetworkUrl(_a) {
    var protocol = _a.protocol, host = _a.host, port = _a.port;
    return (protocol ? protocol : 'http') + "://" + host + (port ? ":" + port : '');
}
exports.getNetworkUrl = getNetworkUrl;
function getErrorMessage(error, fallbackMessage) {
    if (fallbackMessage === void 0) { fallbackMessage = 'Error'; }
    if (error) {
        return typeof error === 'string' ? error : error.message || fallbackMessage;
    }
    return fallbackMessage;
}
exports.getErrorMessage = getErrorMessage;
//# sourceMappingURL=util.js.map

/***/ }),
/* 61 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "msgPackEncode": () => (/* binding */ msgPackEncode)
/* harmony export */ });
/* harmony import */ var _msgpack_msgpack__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(62);
/* eslint-disable no-prototype-builtins */

/* eslint-disable prefer-const */
 // This funciton copied from algoSdk - https://github.com/algorand/js-algorand-sdk/blob/dcec38cc7926de7f54328ce28e76290ffea9fe41/src/encoding/encoding.js#L24

/**
 * containsEmpty returns true if any of the object's values are empty, false otherwise.
 * Empty arrays considered empty
 * @param obj
 * @returns {{firstEmptyKey: string, containsEmpty: boolean}} {true, empty key} if contains empty, {false, undefined} otherwise
 */

function containsEmpty(obj) {
  // eslint-disable-next-line no-restricted-syntax
  for (var key in obj) {
    if (obj.hasOwnProperty(key)) {
      if (!obj[key] || obj[key].length === 0) {
        return {
          containsEmpty: true,
          firstEmptyKey: key
        };
      }
    }
  }

  return {
    containsEmpty: false,
    firstEmptyKey: undefined
  };
} // This funciton copied from algoSdk - https://github.com/algorand/js-algorand-sdk/blob/dcec38cc7926de7f54328ce28e76290ffea9fe41/src/encoding/encoding.js#L41

/**
 * encode encodes objects using msgpack
 * @param obj a dictionary to be encoded. Must not contain empty or 0 values.
 * @returns {Uint8Array} msgpack representation of the object
 * @throws Error containing ERROR_CONTAINS_EMPTY_STRING if the object contains empty or zero values
 */


function msgPackEncode(obj) {
  var ERROR_CONTAINS_EMPTY_STRING = 'The object contains empty or 0 values. First empty or 0 value encountered during encoding: '; // Check for empty values

  var emptyCheck = containsEmpty(obj);

  if (emptyCheck.containsEmpty) {
    throw new Error(ERROR_CONTAINS_EMPTY_STRING + emptyCheck.firstEmptyKey);
  } // enable the canonical option


  var options = {
    sortKeys: true
  };
  return (0,_msgpack_msgpack__WEBPACK_IMPORTED_MODULE_0__.encode)(obj, options);
}

/***/ }),
/* 62 */
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "encode": () => (/* binding */ encode)
/* harmony export */ });
/* harmony import */ var _Encoder_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(63);

var defaultEncodeOptions = {};
/**
 * It encodes `value` in the MessagePack format and
 * returns a byte buffer.
 *
 * The returned buffer is a slice of a larger `ArrayBuffer`, so you have to use its `#byteOffset` and `#byteLength` in order to convert it to another typed arrays including NodeJS `Buffer`.
 */
function encode(value, options) {
    if (options === void 0) { options = defaultEncodeOptions; }
    var encoder = new _Encoder_mjs__WEBPACK_IMPORTED_MODULE_0__.Encoder(options.extensionCodec, options.context, options.maxDepth, options.initialBufferSize, options.sortKeys, options.forceFloat32, options.ignoreUndefined, options.forceIntegerToFloat);
    return encoder.encodeSharedRef(value);
}
//# sourceMappingURL=encode.mjs.map

/***/ }),
/* 63 */
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DEFAULT_INITIAL_BUFFER_SIZE": () => (/* binding */ DEFAULT_INITIAL_BUFFER_SIZE),
/* harmony export */   "DEFAULT_MAX_DEPTH": () => (/* binding */ DEFAULT_MAX_DEPTH),
/* harmony export */   "Encoder": () => (/* binding */ Encoder)
/* harmony export */ });
/* harmony import */ var _utils_utf8_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(69);
/* harmony import */ var _ExtensionCodec_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(64);
/* harmony import */ var _utils_int_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(66);
/* harmony import */ var _utils_typedArrays_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(70);




var DEFAULT_MAX_DEPTH = 100;
var DEFAULT_INITIAL_BUFFER_SIZE = 2048;
var Encoder = /** @class */ (function () {
    function Encoder(extensionCodec, context, maxDepth, initialBufferSize, sortKeys, forceFloat32, ignoreUndefined, forceIntegerToFloat) {
        if (extensionCodec === void 0) { extensionCodec = _ExtensionCodec_mjs__WEBPACK_IMPORTED_MODULE_0__.ExtensionCodec.defaultCodec; }
        if (context === void 0) { context = undefined; }
        if (maxDepth === void 0) { maxDepth = DEFAULT_MAX_DEPTH; }
        if (initialBufferSize === void 0) { initialBufferSize = DEFAULT_INITIAL_BUFFER_SIZE; }
        if (sortKeys === void 0) { sortKeys = false; }
        if (forceFloat32 === void 0) { forceFloat32 = false; }
        if (ignoreUndefined === void 0) { ignoreUndefined = false; }
        if (forceIntegerToFloat === void 0) { forceIntegerToFloat = false; }
        this.extensionCodec = extensionCodec;
        this.context = context;
        this.maxDepth = maxDepth;
        this.initialBufferSize = initialBufferSize;
        this.sortKeys = sortKeys;
        this.forceFloat32 = forceFloat32;
        this.ignoreUndefined = ignoreUndefined;
        this.forceIntegerToFloat = forceIntegerToFloat;
        this.pos = 0;
        this.view = new DataView(new ArrayBuffer(this.initialBufferSize));
        this.bytes = new Uint8Array(this.view.buffer);
    }
    Encoder.prototype.reinitializeState = function () {
        this.pos = 0;
    };
    /**
     * This is almost equivalent to {@link Encoder#encode}, but it returns an reference of the encoder's internal buffer and thus much faster than {@link Encoder#encode}.
     *
     * @returns Encodes the object and returns a shared reference the encoder's internal buffer.
     */
    Encoder.prototype.encodeSharedRef = function (object) {
        this.reinitializeState();
        this.doEncode(object, 1);
        return this.bytes.subarray(0, this.pos);
    };
    /**
     * @returns Encodes the object and returns a copy of the encoder's internal buffer.
     */
    Encoder.prototype.encode = function (object) {
        this.reinitializeState();
        this.doEncode(object, 1);
        return this.bytes.slice(0, this.pos);
    };
    Encoder.prototype.doEncode = function (object, depth) {
        if (depth > this.maxDepth) {
            throw new Error("Too deep objects in depth ".concat(depth));
        }
        if (object == null) {
            this.encodeNil();
        }
        else if (typeof object === "boolean") {
            this.encodeBoolean(object);
        }
        else if (typeof object === "number") {
            this.encodeNumber(object);
        }
        else if (typeof object === "string") {
            this.encodeString(object);
        }
        else {
            this.encodeObject(object, depth);
        }
    };
    Encoder.prototype.ensureBufferSizeToWrite = function (sizeToWrite) {
        var requiredSize = this.pos + sizeToWrite;
        if (this.view.byteLength < requiredSize) {
            this.resizeBuffer(requiredSize * 2);
        }
    };
    Encoder.prototype.resizeBuffer = function (newSize) {
        var newBuffer = new ArrayBuffer(newSize);
        var newBytes = new Uint8Array(newBuffer);
        var newView = new DataView(newBuffer);
        newBytes.set(this.bytes);
        this.view = newView;
        this.bytes = newBytes;
    };
    Encoder.prototype.encodeNil = function () {
        this.writeU8(0xc0);
    };
    Encoder.prototype.encodeBoolean = function (object) {
        if (object === false) {
            this.writeU8(0xc2);
        }
        else {
            this.writeU8(0xc3);
        }
    };
    Encoder.prototype.encodeNumber = function (object) {
        if (Number.isSafeInteger(object) && !this.forceIntegerToFloat) {
            if (object >= 0) {
                if (object < 0x80) {
                    // positive fixint
                    this.writeU8(object);
                }
                else if (object < 0x100) {
                    // uint 8
                    this.writeU8(0xcc);
                    this.writeU8(object);
                }
                else if (object < 0x10000) {
                    // uint 16
                    this.writeU8(0xcd);
                    this.writeU16(object);
                }
                else if (object < 0x100000000) {
                    // uint 32
                    this.writeU8(0xce);
                    this.writeU32(object);
                }
                else {
                    // uint 64
                    this.writeU8(0xcf);
                    this.writeU64(object);
                }
            }
            else {
                if (object >= -0x20) {
                    // negative fixint
                    this.writeU8(0xe0 | (object + 0x20));
                }
                else if (object >= -0x80) {
                    // int 8
                    this.writeU8(0xd0);
                    this.writeI8(object);
                }
                else if (object >= -0x8000) {
                    // int 16
                    this.writeU8(0xd1);
                    this.writeI16(object);
                }
                else if (object >= -0x80000000) {
                    // int 32
                    this.writeU8(0xd2);
                    this.writeI32(object);
                }
                else {
                    // int 64
                    this.writeU8(0xd3);
                    this.writeI64(object);
                }
            }
        }
        else {
            // non-integer numbers
            if (this.forceFloat32) {
                // float 32
                this.writeU8(0xca);
                this.writeF32(object);
            }
            else {
                // float 64
                this.writeU8(0xcb);
                this.writeF64(object);
            }
        }
    };
    Encoder.prototype.writeStringHeader = function (byteLength) {
        if (byteLength < 32) {
            // fixstr
            this.writeU8(0xa0 + byteLength);
        }
        else if (byteLength < 0x100) {
            // str 8
            this.writeU8(0xd9);
            this.writeU8(byteLength);
        }
        else if (byteLength < 0x10000) {
            // str 16
            this.writeU8(0xda);
            this.writeU16(byteLength);
        }
        else if (byteLength < 0x100000000) {
            // str 32
            this.writeU8(0xdb);
            this.writeU32(byteLength);
        }
        else {
            throw new Error("Too long string: ".concat(byteLength, " bytes in UTF-8"));
        }
    };
    Encoder.prototype.encodeString = function (object) {
        var maxHeaderSize = 1 + 4;
        var strLength = object.length;
        if (strLength > _utils_utf8_mjs__WEBPACK_IMPORTED_MODULE_1__.TEXT_ENCODER_THRESHOLD) {
            var byteLength = (0,_utils_utf8_mjs__WEBPACK_IMPORTED_MODULE_1__.utf8Count)(object);
            this.ensureBufferSizeToWrite(maxHeaderSize + byteLength);
            this.writeStringHeader(byteLength);
            (0,_utils_utf8_mjs__WEBPACK_IMPORTED_MODULE_1__.utf8EncodeTE)(object, this.bytes, this.pos);
            this.pos += byteLength;
        }
        else {
            var byteLength = (0,_utils_utf8_mjs__WEBPACK_IMPORTED_MODULE_1__.utf8Count)(object);
            this.ensureBufferSizeToWrite(maxHeaderSize + byteLength);
            this.writeStringHeader(byteLength);
            (0,_utils_utf8_mjs__WEBPACK_IMPORTED_MODULE_1__.utf8EncodeJs)(object, this.bytes, this.pos);
            this.pos += byteLength;
        }
    };
    Encoder.prototype.encodeObject = function (object, depth) {
        // try to encode objects with custom codec first of non-primitives
        var ext = this.extensionCodec.tryToEncode(object, this.context);
        if (ext != null) {
            this.encodeExtension(ext);
        }
        else if (Array.isArray(object)) {
            this.encodeArray(object, depth);
        }
        else if (ArrayBuffer.isView(object)) {
            this.encodeBinary(object);
        }
        else if (typeof object === "object") {
            this.encodeMap(object, depth);
        }
        else {
            // symbol, function and other special object come here unless extensionCodec handles them.
            throw new Error("Unrecognized object: ".concat(Object.prototype.toString.apply(object)));
        }
    };
    Encoder.prototype.encodeBinary = function (object) {
        var size = object.byteLength;
        if (size < 0x100) {
            // bin 8
            this.writeU8(0xc4);
            this.writeU8(size);
        }
        else if (size < 0x10000) {
            // bin 16
            this.writeU8(0xc5);
            this.writeU16(size);
        }
        else if (size < 0x100000000) {
            // bin 32
            this.writeU8(0xc6);
            this.writeU32(size);
        }
        else {
            throw new Error("Too large binary: ".concat(size));
        }
        var bytes = (0,_utils_typedArrays_mjs__WEBPACK_IMPORTED_MODULE_2__.ensureUint8Array)(object);
        this.writeU8a(bytes);
    };
    Encoder.prototype.encodeArray = function (object, depth) {
        var size = object.length;
        if (size < 16) {
            // fixarray
            this.writeU8(0x90 + size);
        }
        else if (size < 0x10000) {
            // array 16
            this.writeU8(0xdc);
            this.writeU16(size);
        }
        else if (size < 0x100000000) {
            // array 32
            this.writeU8(0xdd);
            this.writeU32(size);
        }
        else {
            throw new Error("Too large array: ".concat(size));
        }
        for (var _i = 0, object_1 = object; _i < object_1.length; _i++) {
            var item = object_1[_i];
            this.doEncode(item, depth + 1);
        }
    };
    Encoder.prototype.countWithoutUndefined = function (object, keys) {
        var count = 0;
        for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {
            var key = keys_1[_i];
            if (object[key] !== undefined) {
                count++;
            }
        }
        return count;
    };
    Encoder.prototype.encodeMap = function (object, depth) {
        var keys = Object.keys(object);
        if (this.sortKeys) {
            keys.sort();
        }
        var size = this.ignoreUndefined ? this.countWithoutUndefined(object, keys) : keys.length;
        if (size < 16) {
            // fixmap
            this.writeU8(0x80 + size);
        }
        else if (size < 0x10000) {
            // map 16
            this.writeU8(0xde);
            this.writeU16(size);
        }
        else if (size < 0x100000000) {
            // map 32
            this.writeU8(0xdf);
            this.writeU32(size);
        }
        else {
            throw new Error("Too large map object: ".concat(size));
        }
        for (var _i = 0, keys_2 = keys; _i < keys_2.length; _i++) {
            var key = keys_2[_i];
            var value = object[key];
            if (!(this.ignoreUndefined && value === undefined)) {
                this.encodeString(key);
                this.doEncode(value, depth + 1);
            }
        }
    };
    Encoder.prototype.encodeExtension = function (ext) {
        var size = ext.data.length;
        if (size === 1) {
            // fixext 1
            this.writeU8(0xd4);
        }
        else if (size === 2) {
            // fixext 2
            this.writeU8(0xd5);
        }
        else if (size === 4) {
            // fixext 4
            this.writeU8(0xd6);
        }
        else if (size === 8) {
            // fixext 8
            this.writeU8(0xd7);
        }
        else if (size === 16) {
            // fixext 16
            this.writeU8(0xd8);
        }
        else if (size < 0x100) {
            // ext 8
            this.writeU8(0xc7);
            this.writeU8(size);
        }
        else if (size < 0x10000) {
            // ext 16
            this.writeU8(0xc8);
            this.writeU16(size);
        }
        else if (size < 0x100000000) {
            // ext 32
            this.writeU8(0xc9);
            this.writeU32(size);
        }
        else {
            throw new Error("Too large extension object: ".concat(size));
        }
        this.writeI8(ext.type);
        this.writeU8a(ext.data);
    };
    Encoder.prototype.writeU8 = function (value) {
        this.ensureBufferSizeToWrite(1);
        this.view.setUint8(this.pos, value);
        this.pos++;
    };
    Encoder.prototype.writeU8a = function (values) {
        var size = values.length;
        this.ensureBufferSizeToWrite(size);
        this.bytes.set(values, this.pos);
        this.pos += size;
    };
    Encoder.prototype.writeI8 = function (value) {
        this.ensureBufferSizeToWrite(1);
        this.view.setInt8(this.pos, value);
        this.pos++;
    };
    Encoder.prototype.writeU16 = function (value) {
        this.ensureBufferSizeToWrite(2);
        this.view.setUint16(this.pos, value);
        this.pos += 2;
    };
    Encoder.prototype.writeI16 = function (value) {
        this.ensureBufferSizeToWrite(2);
        this.view.setInt16(this.pos, value);
        this.pos += 2;
    };
    Encoder.prototype.writeU32 = function (value) {
        this.ensureBufferSizeToWrite(4);
        this.view.setUint32(this.pos, value);
        this.pos += 4;
    };
    Encoder.prototype.writeI32 = function (value) {
        this.ensureBufferSizeToWrite(4);
        this.view.setInt32(this.pos, value);
        this.pos += 4;
    };
    Encoder.prototype.writeF32 = function (value) {
        this.ensureBufferSizeToWrite(4);
        this.view.setFloat32(this.pos, value);
        this.pos += 4;
    };
    Encoder.prototype.writeF64 = function (value) {
        this.ensureBufferSizeToWrite(8);
        this.view.setFloat64(this.pos, value);
        this.pos += 8;
    };
    Encoder.prototype.writeU64 = function (value) {
        this.ensureBufferSizeToWrite(8);
        (0,_utils_int_mjs__WEBPACK_IMPORTED_MODULE_3__.setUint64)(this.view, this.pos, value);
        this.pos += 8;
    };
    Encoder.prototype.writeI64 = function (value) {
        this.ensureBufferSizeToWrite(8);
        (0,_utils_int_mjs__WEBPACK_IMPORTED_MODULE_3__.setInt64)(this.view, this.pos, value);
        this.pos += 8;
    };
    return Encoder;
}());

//# sourceMappingURL=Encoder.mjs.map

/***/ }),
/* 64 */
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ExtensionCodec": () => (/* binding */ ExtensionCodec)
/* harmony export */ });
/* harmony import */ var _ExtData_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(68);
/* harmony import */ var _timestamp_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(65);
// ExtensionCodec to handle MessagePack extensions


var ExtensionCodec = /** @class */ (function () {
    function ExtensionCodec() {
        // built-in extensions
        this.builtInEncoders = [];
        this.builtInDecoders = [];
        // custom extensions
        this.encoders = [];
        this.decoders = [];
        this.register(_timestamp_mjs__WEBPACK_IMPORTED_MODULE_0__.timestampExtension);
    }
    ExtensionCodec.prototype.register = function (_a) {
        var type = _a.type, encode = _a.encode, decode = _a.decode;
        if (type >= 0) {
            // custom extensions
            this.encoders[type] = encode;
            this.decoders[type] = decode;
        }
        else {
            // built-in extensions
            var index = 1 + type;
            this.builtInEncoders[index] = encode;
            this.builtInDecoders[index] = decode;
        }
    };
    ExtensionCodec.prototype.tryToEncode = function (object, context) {
        // built-in extensions
        for (var i = 0; i < this.builtInEncoders.length; i++) {
            var encodeExt = this.builtInEncoders[i];
            if (encodeExt != null) {
                var data = encodeExt(object, context);
                if (data != null) {
                    var type = -1 - i;
                    return new _ExtData_mjs__WEBPACK_IMPORTED_MODULE_1__.ExtData(type, data);
                }
            }
        }
        // custom extensions
        for (var i = 0; i < this.encoders.length; i++) {
            var encodeExt = this.encoders[i];
            if (encodeExt != null) {
                var data = encodeExt(object, context);
                if (data != null) {
                    var type = i;
                    return new _ExtData_mjs__WEBPACK_IMPORTED_MODULE_1__.ExtData(type, data);
                }
            }
        }
        if (object instanceof _ExtData_mjs__WEBPACK_IMPORTED_MODULE_1__.ExtData) {
            // to keep ExtData as is
            return object;
        }
        return null;
    };
    ExtensionCodec.prototype.decode = function (data, type, context) {
        var decodeExt = type < 0 ? this.builtInDecoders[-1 - type] : this.decoders[type];
        if (decodeExt) {
            return decodeExt(data, type, context);
        }
        else {
            // decode() does not fail, returns ExtData instead.
            return new _ExtData_mjs__WEBPACK_IMPORTED_MODULE_1__.ExtData(type, data);
        }
    };
    ExtensionCodec.defaultCodec = new ExtensionCodec();
    return ExtensionCodec;
}());

//# sourceMappingURL=ExtensionCodec.mjs.map

/***/ }),
/* 65 */
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "EXT_TIMESTAMP": () => (/* binding */ EXT_TIMESTAMP),
/* harmony export */   "decodeTimestampExtension": () => (/* binding */ decodeTimestampExtension),
/* harmony export */   "decodeTimestampToTimeSpec": () => (/* binding */ decodeTimestampToTimeSpec),
/* harmony export */   "encodeDateToTimeSpec": () => (/* binding */ encodeDateToTimeSpec),
/* harmony export */   "encodeTimeSpecToTimestamp": () => (/* binding */ encodeTimeSpecToTimestamp),
/* harmony export */   "encodeTimestampExtension": () => (/* binding */ encodeTimestampExtension),
/* harmony export */   "timestampExtension": () => (/* binding */ timestampExtension)
/* harmony export */ });
/* harmony import */ var _DecodeError_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(67);
/* harmony import */ var _utils_int_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(66);
// https://github.com/msgpack/msgpack/blob/master/spec.md#timestamp-extension-type


var EXT_TIMESTAMP = -1;
var TIMESTAMP32_MAX_SEC = 0x100000000 - 1; // 32-bit unsigned int
var TIMESTAMP64_MAX_SEC = 0x400000000 - 1; // 34-bit unsigned int
function encodeTimeSpecToTimestamp(_a) {
    var sec = _a.sec, nsec = _a.nsec;
    if (sec >= 0 && nsec >= 0 && sec <= TIMESTAMP64_MAX_SEC) {
        // Here sec >= 0 && nsec >= 0
        if (nsec === 0 && sec <= TIMESTAMP32_MAX_SEC) {
            // timestamp 32 = { sec32 (unsigned) }
            var rv = new Uint8Array(4);
            var view = new DataView(rv.buffer);
            view.setUint32(0, sec);
            return rv;
        }
        else {
            // timestamp 64 = { nsec30 (unsigned), sec34 (unsigned) }
            var secHigh = sec / 0x100000000;
            var secLow = sec & 0xffffffff;
            var rv = new Uint8Array(8);
            var view = new DataView(rv.buffer);
            // nsec30 | secHigh2
            view.setUint32(0, (nsec << 2) | (secHigh & 0x3));
            // secLow32
            view.setUint32(4, secLow);
            return rv;
        }
    }
    else {
        // timestamp 96 = { nsec32 (unsigned), sec64 (signed) }
        var rv = new Uint8Array(12);
        var view = new DataView(rv.buffer);
        view.setUint32(0, nsec);
        (0,_utils_int_mjs__WEBPACK_IMPORTED_MODULE_0__.setInt64)(view, 4, sec);
        return rv;
    }
}
function encodeDateToTimeSpec(date) {
    var msec = date.getTime();
    var sec = Math.floor(msec / 1e3);
    var nsec = (msec - sec * 1e3) * 1e6;
    // Normalizes { sec, nsec } to ensure nsec is unsigned.
    var nsecInSec = Math.floor(nsec / 1e9);
    return {
        sec: sec + nsecInSec,
        nsec: nsec - nsecInSec * 1e9,
    };
}
function encodeTimestampExtension(object) {
    if (object instanceof Date) {
        var timeSpec = encodeDateToTimeSpec(object);
        return encodeTimeSpecToTimestamp(timeSpec);
    }
    else {
        return null;
    }
}
function decodeTimestampToTimeSpec(data) {
    var view = new DataView(data.buffer, data.byteOffset, data.byteLength);
    // data may be 32, 64, or 96 bits
    switch (data.byteLength) {
        case 4: {
            // timestamp 32 = { sec32 }
            var sec = view.getUint32(0);
            var nsec = 0;
            return { sec: sec, nsec: nsec };
        }
        case 8: {
            // timestamp 64 = { nsec30, sec34 }
            var nsec30AndSecHigh2 = view.getUint32(0);
            var secLow32 = view.getUint32(4);
            var sec = (nsec30AndSecHigh2 & 0x3) * 0x100000000 + secLow32;
            var nsec = nsec30AndSecHigh2 >>> 2;
            return { sec: sec, nsec: nsec };
        }
        case 12: {
            // timestamp 96 = { nsec32 (unsigned), sec64 (signed) }
            var sec = (0,_utils_int_mjs__WEBPACK_IMPORTED_MODULE_0__.getInt64)(view, 4);
            var nsec = view.getUint32(0);
            return { sec: sec, nsec: nsec };
        }
        default:
            throw new _DecodeError_mjs__WEBPACK_IMPORTED_MODULE_1__.DecodeError("Unrecognized data size for timestamp (expected 4, 8, or 12): ".concat(data.length));
    }
}
function decodeTimestampExtension(data) {
    var timeSpec = decodeTimestampToTimeSpec(data);
    return new Date(timeSpec.sec * 1e3 + timeSpec.nsec / 1e6);
}
var timestampExtension = {
    type: EXT_TIMESTAMP,
    encode: encodeTimestampExtension,
    decode: decodeTimestampExtension,
};
//# sourceMappingURL=timestamp.mjs.map

/***/ }),
/* 66 */
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "UINT32_MAX": () => (/* binding */ UINT32_MAX),
/* harmony export */   "getInt64": () => (/* binding */ getInt64),
/* harmony export */   "getUint64": () => (/* binding */ getUint64),
/* harmony export */   "setInt64": () => (/* binding */ setInt64),
/* harmony export */   "setUint64": () => (/* binding */ setUint64)
/* harmony export */ });
// Integer Utility
var UINT32_MAX = 4294967295;
// DataView extension to handle int64 / uint64,
// where the actual range is 53-bits integer (a.k.a. safe integer)
function setUint64(view, offset, value) {
    var high = value / 4294967296;
    var low = value; // high bits are truncated by DataView
    view.setUint32(offset, high);
    view.setUint32(offset + 4, low);
}
function setInt64(view, offset, value) {
    var high = Math.floor(value / 4294967296);
    var low = value; // high bits are truncated by DataView
    view.setUint32(offset, high);
    view.setUint32(offset + 4, low);
}
function getInt64(view, offset) {
    var high = view.getInt32(offset);
    var low = view.getUint32(offset + 4);
    return high * 4294967296 + low;
}
function getUint64(view, offset) {
    var high = view.getUint32(offset);
    var low = view.getUint32(offset + 4);
    return high * 4294967296 + low;
}
//# sourceMappingURL=int.mjs.map

/***/ }),
/* 67 */
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DecodeError": () => (/* binding */ DecodeError)
/* harmony export */ });
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var DecodeError = /** @class */ (function (_super) {
    __extends(DecodeError, _super);
    function DecodeError(message) {
        var _this = _super.call(this, message) || this;
        // fix the prototype chain in a cross-platform way
        var proto = Object.create(DecodeError.prototype);
        Object.setPrototypeOf(_this, proto);
        Object.defineProperty(_this, "name", {
            configurable: true,
            enumerable: false,
            value: DecodeError.name,
        });
        return _this;
    }
    return DecodeError;
}(Error));

//# sourceMappingURL=DecodeError.mjs.map

/***/ }),
/* 68 */
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ExtData": () => (/* binding */ ExtData)
/* harmony export */ });
/**
 * ExtData is used to handle Extension Types that are not registered to ExtensionCodec.
 */
var ExtData = /** @class */ (function () {
    function ExtData(type, data) {
        this.type = type;
        this.data = data;
    }
    return ExtData;
}());

//# sourceMappingURL=ExtData.mjs.map

/***/ }),
/* 69 */
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "TEXT_DECODER_THRESHOLD": () => (/* binding */ TEXT_DECODER_THRESHOLD),
/* harmony export */   "TEXT_ENCODER_THRESHOLD": () => (/* binding */ TEXT_ENCODER_THRESHOLD),
/* harmony export */   "utf8Count": () => (/* binding */ utf8Count),
/* harmony export */   "utf8DecodeJs": () => (/* binding */ utf8DecodeJs),
/* harmony export */   "utf8DecodeTD": () => (/* binding */ utf8DecodeTD),
/* harmony export */   "utf8EncodeJs": () => (/* binding */ utf8EncodeJs),
/* harmony export */   "utf8EncodeTE": () => (/* binding */ utf8EncodeTE)
/* harmony export */ });
/* harmony import */ var _int_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(66);
var _a, _b, _c;
/* eslint-disable @typescript-eslint/no-unnecessary-condition */

var TEXT_ENCODING_AVAILABLE = (typeof process === "undefined" || ((_a = process === null || process === void 0 ? void 0 : process.env) === null || _a === void 0 ? void 0 : _a["TEXT_ENCODING"]) !== "never") &&
    typeof TextEncoder !== "undefined" &&
    typeof TextDecoder !== "undefined";
function utf8Count(str) {
    var strLength = str.length;
    var byteLength = 0;
    var pos = 0;
    while (pos < strLength) {
        var value = str.charCodeAt(pos++);
        if ((value & 0xffffff80) === 0) {
            // 1-byte
            byteLength++;
            continue;
        }
        else if ((value & 0xfffff800) === 0) {
            // 2-bytes
            byteLength += 2;
        }
        else {
            // handle surrogate pair
            if (value >= 0xd800 && value <= 0xdbff) {
                // high surrogate
                if (pos < strLength) {
                    var extra = str.charCodeAt(pos);
                    if ((extra & 0xfc00) === 0xdc00) {
                        ++pos;
                        value = ((value & 0x3ff) << 10) + (extra & 0x3ff) + 0x10000;
                    }
                }
            }
            if ((value & 0xffff0000) === 0) {
                // 3-byte
                byteLength += 3;
            }
            else {
                // 4-byte
                byteLength += 4;
            }
        }
    }
    return byteLength;
}
function utf8EncodeJs(str, output, outputOffset) {
    var strLength = str.length;
    var offset = outputOffset;
    var pos = 0;
    while (pos < strLength) {
        var value = str.charCodeAt(pos++);
        if ((value & 0xffffff80) === 0) {
            // 1-byte
            output[offset++] = value;
            continue;
        }
        else if ((value & 0xfffff800) === 0) {
            // 2-bytes
            output[offset++] = ((value >> 6) & 0x1f) | 0xc0;
        }
        else {
            // handle surrogate pair
            if (value >= 0xd800 && value <= 0xdbff) {
                // high surrogate
                if (pos < strLength) {
                    var extra = str.charCodeAt(pos);
                    if ((extra & 0xfc00) === 0xdc00) {
                        ++pos;
                        value = ((value & 0x3ff) << 10) + (extra & 0x3ff) + 0x10000;
                    }
                }
            }
            if ((value & 0xffff0000) === 0) {
                // 3-byte
                output[offset++] = ((value >> 12) & 0x0f) | 0xe0;
                output[offset++] = ((value >> 6) & 0x3f) | 0x80;
            }
            else {
                // 4-byte
                output[offset++] = ((value >> 18) & 0x07) | 0xf0;
                output[offset++] = ((value >> 12) & 0x3f) | 0x80;
                output[offset++] = ((value >> 6) & 0x3f) | 0x80;
            }
        }
        output[offset++] = (value & 0x3f) | 0x80;
    }
}
var sharedTextEncoder = TEXT_ENCODING_AVAILABLE ? new TextEncoder() : undefined;
var TEXT_ENCODER_THRESHOLD = !TEXT_ENCODING_AVAILABLE
    ? _int_mjs__WEBPACK_IMPORTED_MODULE_0__.UINT32_MAX
    : typeof process !== "undefined" && ((_b = process === null || process === void 0 ? void 0 : process.env) === null || _b === void 0 ? void 0 : _b["TEXT_ENCODING"]) !== "force"
        ? 200
        : 0;
function utf8EncodeTEencode(str, output, outputOffset) {
    output.set(sharedTextEncoder.encode(str), outputOffset);
}
function utf8EncodeTEencodeInto(str, output, outputOffset) {
    sharedTextEncoder.encodeInto(str, output.subarray(outputOffset));
}
var utf8EncodeTE = (sharedTextEncoder === null || sharedTextEncoder === void 0 ? void 0 : sharedTextEncoder.encodeInto) ? utf8EncodeTEencodeInto : utf8EncodeTEencode;
var CHUNK_SIZE = 4096;
function utf8DecodeJs(bytes, inputOffset, byteLength) {
    var offset = inputOffset;
    var end = offset + byteLength;
    var units = [];
    var result = "";
    while (offset < end) {
        var byte1 = bytes[offset++];
        if ((byte1 & 0x80) === 0) {
            // 1 byte
            units.push(byte1);
        }
        else if ((byte1 & 0xe0) === 0xc0) {
            // 2 bytes
            var byte2 = bytes[offset++] & 0x3f;
            units.push(((byte1 & 0x1f) << 6) | byte2);
        }
        else if ((byte1 & 0xf0) === 0xe0) {
            // 3 bytes
            var byte2 = bytes[offset++] & 0x3f;
            var byte3 = bytes[offset++] & 0x3f;
            units.push(((byte1 & 0x1f) << 12) | (byte2 << 6) | byte3);
        }
        else if ((byte1 & 0xf8) === 0xf0) {
            // 4 bytes
            var byte2 = bytes[offset++] & 0x3f;
            var byte3 = bytes[offset++] & 0x3f;
            var byte4 = bytes[offset++] & 0x3f;
            var unit = ((byte1 & 0x07) << 0x12) | (byte2 << 0x0c) | (byte3 << 0x06) | byte4;
            if (unit > 0xffff) {
                unit -= 0x10000;
                units.push(((unit >>> 10) & 0x3ff) | 0xd800);
                unit = 0xdc00 | (unit & 0x3ff);
            }
            units.push(unit);
        }
        else {
            units.push(byte1);
        }
        if (units.length >= CHUNK_SIZE) {
            result += String.fromCharCode.apply(String, units);
            units.length = 0;
        }
    }
    if (units.length > 0) {
        result += String.fromCharCode.apply(String, units);
    }
    return result;
}
var sharedTextDecoder = TEXT_ENCODING_AVAILABLE ? new TextDecoder() : null;
var TEXT_DECODER_THRESHOLD = !TEXT_ENCODING_AVAILABLE
    ? _int_mjs__WEBPACK_IMPORTED_MODULE_0__.UINT32_MAX
    : typeof process !== "undefined" && ((_c = process === null || process === void 0 ? void 0 : process.env) === null || _c === void 0 ? void 0 : _c["TEXT_DECODER"]) !== "force"
        ? 200
        : 0;
function utf8DecodeTD(bytes, inputOffset, byteLength) {
    var stringBytes = bytes.subarray(inputOffset, inputOffset + byteLength);
    return sharedTextDecoder.decode(stringBytes);
}
//# sourceMappingURL=utf8.mjs.map

/***/ }),
/* 70 */
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createDataView": () => (/* binding */ createDataView),
/* harmony export */   "ensureUint8Array": () => (/* binding */ ensureUint8Array)
/* harmony export */ });
function ensureUint8Array(buffer) {
    if (buffer instanceof Uint8Array) {
        return buffer;
    }
    else if (ArrayBuffer.isView(buffer)) {
        return new Uint8Array(buffer.buffer, buffer.byteOffset, buffer.byteLength);
    }
    else if (buffer instanceof ArrayBuffer) {
        return new Uint8Array(buffer);
    }
    else {
        // ArrayLike<number>
        return Uint8Array.from(buffer);
    }
}
function createDataView(buffer) {
    if (buffer instanceof ArrayBuffer) {
        return new DataView(buffer);
    }
    var bufferView = ensureUint8Array(buffer);
    return new DataView(bufferView.buffer, bufferView.byteOffset, bufferView.byteLength);
}
//# sourceMappingURL=typedArrays.mjs.map

/***/ }),
/* 71 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getTransitProviderAttributes": () => (/* binding */ getTransitProviderAttributes),
/* harmony export */   "getTransitProviderAttributesByChain": () => (/* binding */ getTransitProviderAttributesByChain),
/* harmony export */   "getTransitProviderAttributesByProviderId": () => (/* binding */ getTransitProviderAttributesByProviderId),
/* harmony export */   "supportedTransitProviders": () => (/* binding */ supportedTransitProviders),
/* harmony export */   "transitProviderAttributesData": () => (/* binding */ transitProviderAttributesData)
/* harmony export */ });
/* harmony import */ var _common_models__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(8);


/** Function used within transit provider to transform a wallet's public key to a full account strucutre */
var AlgorandDiscoveryKeyLookupFunc = function AlgorandDiscoveryKeyLookupFunc(discoveryData, callback) {
  var accountInfoArray = discoveryData.keys.map(function (key) {
    // note holds a stringified JSON object - composed by Algosigner Transit plugin
    var account = JSON.parse(key.note);
    return {
      index: key.index,
      key: key.key,
      accounts: [{
        account: account === null || account === void 0 ? void 0 : account.accountName,
        authorization: account === null || account === void 0 ? void 0 : account.permission
      }]
    };
  });
  callback(accountInfoArray);
};
/** Pass-through function used within eos-transit host - if not provided, wallet will try to use EOS to transform keys */


var NonEosDiscoveryKeyLookupFunc = function NonEosDiscoveryKeyLookupFunc(discoveryData, callback) {
  callback(discoveryData.keyToAccountMap);
};

var transitProviderAttributesData = [{
  providerName: _common_models__WEBPACK_IMPORTED_MODULE_0__.ExternalWalletType.AlgoSigner,
  chainType: _common_models__WEBPACK_IMPORTED_MODULE_0__.ChainPlatformType.algorand,
  providerId: 'algosigner',
  requiresLogin: false,
  supportsDiscovery: true,
  supportsSignArbitrary: false,
  requiresLogoutLoginToDiscover: false,
  requiresDiscoverToLogin: false,
  helpText: {
    login: 'This wallet doesn’t require you to login.',
    sign: '',
    discover: '',
    versionsRequired: ''
  },
  discoveryKeyLookupFunc: AlgorandDiscoveryKeyLookupFunc,
  logoUrl: 'https://storage.googleapis.com/oreid-files/partners/wallet-algosigner-logo.png'
}, {
  providerName: _common_models__WEBPACK_IMPORTED_MODULE_0__.ExternalWalletType.Keycat,
  chainType: _common_models__WEBPACK_IMPORTED_MODULE_0__.ChainPlatformType.eos,
  providerId: 'Keycat',
  requiresLogin: true,
  supportsDiscovery: false,
  supportsSignArbitrary: true,
  requiresLogoutLoginToDiscover: true,
  requiresDiscoverToLogin: false,
  helpText: {
    login: 'Keycat requires logging in through the Keycat app.',
    sign: '',
    discover: '',
    versionsRequired: ''
  },
  logoUrl: 'https://storage.googleapis.com/oreid-files/partners/wallet-keycat-logo.png'
}, {
  providerName: _common_models__WEBPACK_IMPORTED_MODULE_0__.ExternalWalletType.Ledger,
  chainType: _common_models__WEBPACK_IMPORTED_MODULE_0__.ChainPlatformType.eos,
  providerId: 'ledger',
  requiresLogin: true,
  supportsDiscovery: true,
  supportsSignArbitrary: false,
  requiresLogoutLoginToDiscover: false,
  requiresDiscoverToLogin: true,
  defaultDiscoveryPathIndexList: [0, 1, 2],
  helpText: {
    login: 'This wallet doesn’t require you to login',
    sign: 'Connect and unlock your Ledger with your PIN code. Launch the EOS app on the device.',
    discover: 'Connect and unlock your Ledger with your PIN code. Launch the EOS app on the device.',
    versionsRequired: 'You need to have recent versions of your browser, Ledger firmware, and the Ledger EOS app. Click here for more details.'
  },
  logoUrl: 'https://storage.googleapis.com/oreid-files/partners/wallet-ledger-logo.png'
}, {
  providerName: _common_models__WEBPACK_IMPORTED_MODULE_0__.ExternalWalletType.Lynx,
  chainType: _common_models__WEBPACK_IMPORTED_MODULE_0__.ChainPlatformType.eos,
  providerId: 'EOS Lynx',
  requiresLogin: true,
  supportsDiscovery: false,
  supportsSignArbitrary: true,
  requiresLogoutLoginToDiscover: true,
  requiresDiscoverToLogin: false,
  helpText: {
    login: 'EOS Lynx requires logging in through the EOS Lynx app.',
    sign: '',
    discover: '',
    versionsRequired: ''
  },
  logoUrl: 'https://storage.googleapis.com/oreid-files/partners/wallet-lynx-logo.png'
}, {
  providerName: _common_models__WEBPACK_IMPORTED_MODULE_0__.ExternalWalletType.Meetone,
  chainType: _common_models__WEBPACK_IMPORTED_MODULE_0__.ChainPlatformType.eos,
  providerId: 'meetone_provider',
  requiresLogin: false,
  supportsDiscovery: false,
  supportsSignArbitrary: true,
  requiresLogoutLoginToDiscover: true,
  requiresDiscoverToLogin: false,
  helpText: {
    login: 'This wallet doesn’t require you to login',
    sign: '',
    discover: '',
    versionsRequired: ''
  },
  logoUrl: 'https://storage.googleapis.com/oreid-files/partners/wallet-meetone-logo.png'
}, {
  providerName: _common_models__WEBPACK_IMPORTED_MODULE_0__.ExternalWalletType.Metro,
  chainType: _common_models__WEBPACK_IMPORTED_MODULE_0__.ChainPlatformType.eos,
  providerId: 'metro',
  requiresLogin: false,
  supportsDiscovery: false,
  supportsSignArbitrary: false,
  requiresLogoutLoginToDiscover: false,
  requiresDiscoverToLogin: false,
  helpText: {
    login: 'This wallet doesn’t require you to login',
    sign: '',
    discover: '',
    versionsRequired: ''
  },
  logoUrl: 'https://storage.googleapis.com/oreid-files/partners/wallet-generic-logo.png'
}, {
  providerName: _common_models__WEBPACK_IMPORTED_MODULE_0__.ExternalWalletType.Portis,
  chainType: _common_models__WEBPACK_IMPORTED_MODULE_0__.ChainPlatformType.eos,
  providerId: 'PortisProvider',
  requiresLogin: true,
  supportsDiscovery: false,
  supportsSignArbitrary: false,
  requiresLogoutLoginToDiscover: true,
  requiresDiscoverToLogin: false,
  helpText: {
    login: 'Portis requires logging in through the Portis app.',
    sign: '',
    discover: '',
    versionsRequired: ''
  },
  logoUrl: 'https://storage.googleapis.com/oreid-files/partners/wallet-portis-logo.png'
}, {
  providerName: _common_models__WEBPACK_IMPORTED_MODULE_0__.ExternalWalletType.Scatter,
  chainType: _common_models__WEBPACK_IMPORTED_MODULE_0__.ChainPlatformType.eos,
  providerId: 'scatter',
  requiresLogin: true,
  supportsDiscovery: false,
  supportsSignArbitrary: true,
  requiresLogoutLoginToDiscover: true,
  requiresDiscoverToLogin: false,
  helpText: {
    login: 'Scatter requires logging in through the Scatter app.',
    sign: '',
    discover: '',
    versionsRequired: ''
  },
  logoUrl: 'https://storage.googleapis.com/oreid-files/partners/wallet-scatter-logo.png'
}, {
  providerName: _common_models__WEBPACK_IMPORTED_MODULE_0__.ExternalWalletType.SimpleEos,
  chainType: _common_models__WEBPACK_IMPORTED_MODULE_0__.ChainPlatformType.eos,
  providerId: 'simpleos',
  requiresLogin: true,
  supportsDiscovery: false,
  supportsSignArbitrary: false,
  requiresLogoutLoginToDiscover: true,
  requiresDiscoverToLogin: false,
  helpText: {
    login: 'Simpleos requires logging in through the Simpleos app.',
    sign: '',
    discover: '',
    versionsRequired: ''
  },
  logoUrl: 'https://storage.googleapis.com/oreid-files/partners/wallet-simpleos-logo.png'
}, {
  providerName: _common_models__WEBPACK_IMPORTED_MODULE_0__.ExternalWalletType.TokenPocket,
  chainType: _common_models__WEBPACK_IMPORTED_MODULE_0__.ChainPlatformType.eos,
  providerId: 'TokenPocket',
  requiresLogin: true,
  supportsDiscovery: false,
  supportsSignArbitrary: true,
  requiresLogoutLoginToDiscover: true,
  requiresDiscoverToLogin: false,
  helpText: {
    login: 'This wallet doesn’t require you to login',
    sign: '',
    discover: '',
    versionsRequired: ''
  },
  logoUrl: 'https://storage.googleapis.com/oreid-files/partners/wallet-generic-logo.png'
}, {
  providerName: _common_models__WEBPACK_IMPORTED_MODULE_0__.ExternalWalletType.WalletConnect,
  chainType: _common_models__WEBPACK_IMPORTED_MODULE_0__.ChainPlatformType.ethereum,
  providerId: 'walletconnect',
  requiresLogin: false,
  supportsDiscovery: true,
  supportsSignArbitrary: true,
  requiresLogoutLoginToDiscover: false,
  requiresDiscoverToLogin: false,
  helpText: {
    login: 'This wallet doesn’t require you to login.',
    sign: '',
    discover: '',
    versionsRequired: ''
  },
  discoveryKeyLookupFunc: NonEosDiscoveryKeyLookupFunc,
  logoUrl: 'https://storage.googleapis.com/oreid-files/partners/wallet-walletconnect-logo.png'
}, {
  providerName: _common_models__WEBPACK_IMPORTED_MODULE_0__.ExternalWalletType.Web3,
  chainType: _common_models__WEBPACK_IMPORTED_MODULE_0__.ChainPlatformType.ethereum,
  providerId: 'web3',
  requiresLogin: false,
  supportsDiscovery: true,
  supportsSignArbitrary: true,
  requiresLogoutLoginToDiscover: false,
  requiresDiscoverToLogin: false,
  helpText: {
    login: 'This wallet doesn’t require you to login.',
    sign: '',
    discover: '',
    versionsRequired: ''
  },
  discoveryKeyLookupFunc: NonEosDiscoveryKeyLookupFunc,
  logoUrl: 'https://storage.googleapis.com/oreid-files/partners/wallet-web3-logo.png'
}, {
  providerName: _common_models__WEBPACK_IMPORTED_MODULE_0__.ExternalWalletType.WhaleVault,
  chainType: _common_models__WEBPACK_IMPORTED_MODULE_0__.ChainPlatformType.eos,
  providerId: 'whalevault',
  requiresLogin: true,
  supportsDiscovery: false,
  supportsSignArbitrary: true,
  requiresLogoutLoginToDiscover: true,
  requiresDiscoverToLogin: false,
  helpText: {
    login: 'Whalevault requires logging in through the Whalevault app.',
    sign: '',
    discover: '',
    versionsRequired: ''
  },
  logoUrl: 'https://storage.googleapis.com/oreid-files/partners/wallet-whalevault-logo.png'
}];
/** Get provider-specific settings and metadata */

function getTransitProviderAttributes(walletType) {
  return transitProviderAttributesData.find(function (tp) {
    return tp.providerName === walletType.toString();
  });
}
/** Get provider-specific settings and metadata */

function getTransitProviderAttributesByProviderId(providerId) {
  return transitProviderAttributesData.find(function (tp) {
    return tp.providerId === providerId;
  });
}
/** Get the list of provider attributes for a given chain */

function getTransitProviderAttributesByChain(chain) {
  return transitProviderAttributesData.filter(function (p) {
    return p.chainType === chain;
  });
}
var supportedTransitProviders = transitProviderAttributesData.map(function (tp) {
  return tp.providerName;
});

/***/ }),
/* 72 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ UalHelper)
/* harmony export */ });
/* harmony import */ var _ualProviders__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(73);
/* harmony import */ var _utils_helpers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(17);
/* harmony import */ var _models__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(5);
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, $Symbol = "function" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, ""); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return generator._invoke = function (innerFn, self, context) { var state = "suspendedStart"; return function (method, arg) { if ("executing" === state) throw new Error("Generator is already running"); if ("completed" === state) { if ("throw" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) { if ("suspendedStart" === state) throw state = "completed", context.arg; context.dispatchException(context.arg); } else "return" === context.method && context.abrupt("return", context.arg); state = "executing"; var record = tryCatch(innerFn, self, context); if ("normal" === record.type) { if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg); } }; }(innerFn, self, context), generator; } function tryCatch(fn, obj, arg) { try { return { type: "normal", arg: fn.call(obj, arg) }; } catch (err) { return { type: "throw", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { ["next", "throw", "return"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if ("throw" !== record.type) { var result = record.arg, value = result.value; return value && "object" == _typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke("next", value, resolve, reject); }, function (err) { invoke("throw", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke("throw", error, resolve, reject); }); } reject(record.arg); } var previousPromise; this._invoke = function (method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); }; } function maybeInvokeDelegate(delegate, context) { var method = delegate.iterator[context.method]; if (undefined === method) { if (context.delegate = null, "throw" === context.method) { if (delegate.iterator["return"] && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method)) return ContinueSentinel; context.method = "throw", context.arg = new TypeError("The iterator does not provide a 'throw' method"); } return ContinueSentinel; } var record = tryCatch(method, delegate.iterator, context.arg); if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = "normal", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: "root" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if ("function" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, "constructor", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) { var ctor = "function" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, "toString", function () { return "[object Generator]"; }), exports.keys = function (object) { var keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if ("throw" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if ("root" === entry.tryLoc) return handle("end"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error("try statement without catch or finally"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if ("throw" === record.type) throw record.arg; return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, "catch": function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if ("throw" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, "next" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }





var UalHelper = /*#__PURE__*/function () {
  function UalHelper(args) {
    _classCallCheck(this, UalHelper);

    this._oreIdContext = args.oreIdContext;
    this._user = args.user;
  }

  _createClass(UalHelper, [{
    key: "installUalProviders",
    value:
    /** Verifies that all plugins have a valid name
     *  Stores a list of the installed providerNames for all working plugins in ualProvidersInstalled
     */
    function () {
      var _installUalProviders = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(ualWalletProviders) {
        return _regeneratorRuntime().wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                // Maps installed UALProviders to array of ExternaLWalletType names
                this._oreIdContext.ualProvidersInstalled = (ualWalletProviders || []).map(function (ualProviderFactory) {
                  var _getUalProviderAttrib;

                  return (_getUalProviderAttrib = (0,_ualProviders__WEBPACK_IMPORTED_MODULE_0__.getUalProviderAttributesByUalName)(ualProviderFactory === null || ualProviderFactory === void 0 ? void 0 : ualProviderFactory.name)) === null || _getUalProviderAttrib === void 0 ? void 0 : _getUalProviderAttrib.providerName;
                });

              case 1:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function installUalProviders(_x) {
        return _installUalProviders.apply(this, arguments);
      }

      return installUalProviders;
    }()
    /** Retrieve the user and their account/permission details for the matching chainNetwork
     *  Returns null if nothing in wallet for chainNetwork
     */

  }, {
    key: "loginToUalProvider",
    value: function () {
      var _loginToUalProvider = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(walletType, authenticator, chainNetwork, chainAccount) {
        var _this = this;

        var users, usersWithAccountsDetails, userForChain, _error$message, message;

        return _regeneratorRuntime().wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                this.assertHasProviderInstalled(walletType, _models__WEBPACK_IMPORTED_MODULE_2__.ExternalWalletInterface.Ual);
                this.assertProviderValidForChainNetwork(walletType, chainNetwork);
                _context3.prev = 2;
                _context3.next = 5;
                return authenticator.login(chainAccount);

              case 5:
                users = _context3.sent;

                if (!_utils_helpers__WEBPACK_IMPORTED_MODULE_1__["default"].isNullOrEmpty(users)) {
                  _context3.next = 8;
                  break;
                }

                return _context3.abrupt("return", null);

              case 8:
                // for every supported chain, populate a result with the user and user's account/permission info
                usersWithAccountsDetails = [];
                _context3.next = 11;
                return _utils_helpers__WEBPACK_IMPORTED_MODULE_1__["default"].asyncForEach(users, /*#__PURE__*/function () {
                  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(user) {
                    var userPermissions;
                    return _regeneratorRuntime().wrap(function _callee2$(_context2) {
                      while (1) {
                        switch (_context2.prev = _context2.next) {
                          case 0:
                            _context2.next = 2;
                            return _this.getAccountAndPermissionsFromUalUser(user);

                          case 2:
                            userPermissions = _context2.sent;
                            usersWithAccountsDetails.push({
                              user: user,
                              userPermissions: userPermissions
                            });

                          case 4:
                          case "end":
                            return _context2.stop();
                        }
                      }
                    }, _callee2);
                  }));

                  return function (_x6) {
                    return _ref.apply(this, arguments);
                  };
                }());

              case 11:
                // get only the user matching the desired chainNetwork
                userForChain = usersWithAccountsDetails.find(function (uwa) {
                  return uwa.userPermissions.chainNetwork === chainNetwork;
                });
                return _context3.abrupt("return", userForChain);

              case 15:
                _context3.prev = 15;
                _context3.t0 = _context3["catch"](2);
                _error$message = _context3.t0.message, message = _error$message === void 0 ? '' : _error$message;

                if (!message.includes('unknown key (boost::tuples::tuple')) {
                  _context3.next = 22;
                  break;
                }

                throw new Error("The account selected by the wallet for login isn't on the ".concat(chainNetwork, " chain"));

              case 22:
                throw _context3.t0;

              case 23:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this, [[2, 15]]);
      }));

      function loginToUalProvider(_x2, _x3, _x4, _x5) {
        return _loginToUalProvider.apply(this, arguments);
      }

      return loginToUalProvider;
    }() // TODO: We should cache the wallet/user object to avoid calling login everytime we need to sign

  }, {
    key: "connectToUalProvider",
    value: function () {
      var _connectToUalProvider = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(_ref2) {
        var walletType, chainNetwork, _ref2$chainAccount, chainAccount, options, SelectedAuthenticator, networkConfig, ualNetworkConfig, authenticator, ualError, userForChain, response;

        return _regeneratorRuntime().wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                walletType = _ref2.walletType, chainNetwork = _ref2.chainNetwork, _ref2$chainAccount = _ref2.chainAccount, chainAccount = _ref2$chainAccount === void 0 ? null : _ref2$chainAccount;
                this.assertHasProviderInstalled(walletType, _models__WEBPACK_IMPORTED_MODULE_2__.ExternalWalletInterface.Ual);
                this.assertProviderValidForChainNetwork(walletType, chainNetwork);
                options = this._oreIdContext.options;
                SelectedAuthenticator = options.ualAuthenticators.find(function (ualAuthenticator) {
                  return ualAuthenticator.name.toLowerCase() === walletType;
                });
                _context4.prev = 5;
                _context4.next = 8;
                return this._oreIdContext.settings.getChainNetworkNextworkConfig(chainNetwork);

              case 8:
                networkConfig = _context4.sent;
                ualNetworkConfig = {
                  chainId: networkConfig.chainId,
                  rpcEndpoints: [_objectSpread({}, networkConfig)]
                }; // construct authenticator

                authenticator = new SelectedAuthenticator([ualNetworkConfig], {
                  appName: options.appName
                });

                this._oreIdContext.setIsBusy(true); // busy is cleared by waitWhileWalletIsBusy when done


                _context4.next = 14;
                return authenticator.init();

              case 14:
                _context4.next = 16;
                return this.waitWhileWalletIsBusy(authenticator, walletType);

              case 16:
                if (!authenticator.isErrored()) {
                  _context4.next = 20;
                  break;
                }

                ualError = authenticator.getError();
                console.log("Error connecting to UAL wallet type: ".concat(ualError.name), ualError.cause);
                throw ualError.cause;

              case 20:
                _context4.next = 22;
                return this.loginToUalProvider(walletType, authenticator, chainNetwork, chainAccount);

              case 22:
                userForChain = _context4.sent;

                if (userForChain) {
                  _context4.next = 26;
                  break;
                }

                console.log("User doesn't have an account for the chainNetwork: ".concat(chainNetwork, " in wallet type: ").concat(walletType));
                return _context4.abrupt("return", null);

              case 26:
                _context4.prev = 26;
                _context4.next = 29;
                return this.updateOreAccountPermissionsfromUalUser(userForChain.user, walletType);

              case 29:
                _context4.next = 34;
                break;

              case 31:
                _context4.prev = 31;
                _context4.t0 = _context4["catch"](26);
                console.log("Failed to add newly discovered chain accounts in connectToUalProvider for chainNetwork: ".concat(chainNetwork, " in wallet type: ").concat(walletType), _context4.t0);

              case 34:
                // const {
                //   account,
                //   chainNetwork: chainNetworkFromAuthenticator, // get the chainNetwork from the UALProvider since we cant tell it what network to use
                //   permissions,
                // } = await this.getAccountAndPermissionsFromUalUser(user)
                // const publicKeys = await user.getKeys()
                // const account = await user.getAccountName()
                // const permissions = [{ name: 'active', publicKey: publicKeys[0] }]
                response = {
                  isLoggedIn: true,
                  chainAccount: userForChain.userPermissions.chainAccount,
                  chainNetwork: userForChain.userPermissions.chainNetwork,
                  permissions: userForChain.userPermissions.permissions,
                  walletType: walletType,
                  authenticator: authenticator,
                  ualUser: userForChain.user
                };
                return _context4.abrupt("return", response);

              case 38:
                _context4.prev = 38;
                _context4.t1 = _context4["catch"](5);
                console.log("Failed to connect to ".concat(walletType, " wallet:"), _context4.t1);
                throw _context4.t1;

              case 42:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this, [[5, 38], [26, 31]]);
      }));

      function connectToUalProvider(_x7) {
        return _connectToUalProvider.apply(this, arguments);
      }

      return connectToUalProvider;
    }()
    /** Extract user account/permission for all publicKeys in the User's wallet */

  }, {
    key: "getAccountAndPermissionsFromUalUser",
    value: function () {
      var _getAccountAndPermissionsFromUalUser = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(ualUser) {
        var chainId, chainNetwork, account, publicKeys, permissions;
        return _regeneratorRuntime().wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                _context5.next = 2;
                return ualUser.getChainId();

              case 2:
                chainId = _context5.sent;
                _context5.next = 5;
                return this._oreIdContext.settings.getChainNetworkByChainId(chainId);

              case 5:
                chainNetwork = _context5.sent;
                _context5.next = 8;
                return ualUser.getAccountName();

              case 8:
                account = _context5.sent;
                _context5.next = 11;
                return this.getKeys(ualUser);

              case 11:
                publicKeys = _context5.sent;
                // for each publicKey in the user's wallet, return a WalletPermission object
                permissions = publicKeys.map(function (publicKey) {
                  return {
                    account: account,
                    publicKey: publicKey,
                    name: 'active' // UAL doesn't return the permission so we default to active
                    // todo: add parent permission when available

                  };
                });
                return _context5.abrupt("return", {
                  chainAccount: account,
                  chainNetwork: chainNetwork,
                  permissions: permissions
                });

              case 14:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      function getAccountAndPermissionsFromUalUser(_x8) {
        return _getAccountAndPermissionsFromUalUser.apply(this, arguments);
      }

      return getAccountAndPermissionsFromUalUser;
    }()
    /** Login using the wallet provider */

  }, {
    key: "loginWithUalProvider",
    value: function () {
      var _loginWithUalProvider = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(loginOptions) {
        var walletType, chainAccount, chainNetwork, response, authenticator, isLoggedIn, userForChain;
        return _regeneratorRuntime().wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                walletType = loginOptions.walletType, chainAccount = loginOptions.chainAccount, chainNetwork = loginOptions.chainNetwork; // Connect to Provider

                _context6.next = 3;
                return this.connectToUalProvider({
                  walletType: walletType,
                  chainAccount: chainAccount,
                  chainNetwork: chainNetwork
                });

              case 3:
                response = _context6.sent;
                authenticator = response.authenticator, isLoggedIn = response.isLoggedIn; // Login if needed - if not logged-in by connectToUalProvider, then call login explicitly

                if (isLoggedIn) {
                  _context6.next = 12;
                  break;
                }

                _context6.next = 8;
                return this.loginToUalProvider(walletType, authenticator, chainNetwork, chainAccount);

              case 8:
                userForChain = _context6.sent;

                if (!userForChain) {
                  _context6.next = 12;
                  break;
                }

                _context6.next = 12;
                return this.updateOreAccountPermissionsfromUalUser(userForChain.user, walletType);

              case 12:
                return _context6.abrupt("return", response);

              case 13:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6, this);
      }));

      function loginWithUalProvider(_x9) {
        return _loginWithUalProvider.apply(this, arguments);
      }

      return loginWithUalProvider;
    }()
    /** Throw if the required plug-in is not installed */

  }, {
    key: "assertHasProviderInstalled",
    value: function assertHasProviderInstalled(provider, providerType) {
      if (providerType === _models__WEBPACK_IMPORTED_MODULE_2__.ExternalWalletInterface.Ual) {
        if (!this.hasUalProvider(provider)) {
          throw Error("UAL authenticator:\"".concat(provider, "\" not installed. Please pass it in via ualAuthenticators."));
        }
      }
    }
    /** sign with a UAL wallet */

  }, {
    key: "signWithUalProvider",
    value: function () {
      var _signWithUalProvider = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7(transactionData, walletType) {
        var chainNetwork, transaction, chainAccount, signOptions, provider, broadcast, _yield$this$connectTo, ualUser, signedTransactionResponse, serializedTransaction;

        return _regeneratorRuntime().wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                chainNetwork = transactionData.chainNetwork, transaction = transactionData.transaction, chainAccount = transactionData.chainAccount, signOptions = transactionData.signOptions;
                provider = signOptions.provider, broadcast = signOptions.broadcast;
                this.assertHasProviderInstalled(walletType, _models__WEBPACK_IMPORTED_MODULE_2__.ExternalWalletInterface.Ual);
                this.assertProviderValidForChainNetwork(walletType, chainNetwork);
                _context7.next = 6;
                return this.connectToUalProvider({
                  walletType: walletType,
                  chainNetwork: chainNetwork,
                  chainAccount: chainAccount
                });

              case 6:
                _yield$this$connectTo = _context7.sent;
                ualUser = _yield$this$connectTo.ualUser;
                _context7.prev = 8;

                this._oreIdContext.setIsBusy(true);

                _context7.next = 12;
                return ualUser.signTransaction(transaction, {
                  broadcast: broadcast
                });

              case 12:
                signedTransactionResponse = _context7.sent;
                // Convert serializedTransaction from UInt8Array to Buffer
                // i.e. when stringified change from: '{\"0\":129,\"1\":163'} to {"type":"Buffer","data":[129,163]}
                serializedTransaction = signedTransactionResponse.transaction.serializedTransaction;

                if (serializedTransaction) {
                  signedTransactionResponse.transaction.serializedTransaction = Buffer.from(serializedTransaction);
                }

                return _context7.abrupt("return", {
                  signedTransaction: signedTransactionResponse.transaction
                });

              case 18:
                _context7.prev = 18;
                _context7.t0 = _context7["catch"](8);
                console.error(_context7.t0);
                throw _context7.t0;

              case 22:
                _context7.prev = 22;

                this._oreIdContext.setIsBusy(false);

                return _context7.finish(22);

              case 25:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee7, this, [[8, 18, 22, 25]]);
      }));

      function signWithUalProvider(_x10, _x11) {
        return _signWithUalProvider.apply(this, arguments);
      }

      return signWithUalProvider;
    }()
    /** Signs an arbitrary string using a specific provider */

  }, {
    key: "signStringWithUalProvider",
    value: function () {
      var _signStringWithUalProvider = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8(_ref3) {
        var walletType, chainNetwork, string, chainAccount, message, _yield$this$connectTo2, ualUser, keys, response;

        return _regeneratorRuntime().wrap(function _callee8$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                walletType = _ref3.walletType, chainNetwork = _ref3.chainNetwork, string = _ref3.string, chainAccount = _ref3.chainAccount, message = _ref3.message;
                this.assertHasProviderInstalled(walletType, _models__WEBPACK_IMPORTED_MODULE_2__.ExternalWalletInterface.Ual);
                this.assertProviderValidForChainNetwork(walletType, chainNetwork);
                _context8.next = 5;
                return this.connectToUalProvider({
                  walletType: walletType,
                  chainNetwork: chainNetwork,
                  chainAccount: chainAccount
                });

              case 5:
                _yield$this$connectTo2 = _context8.sent;
                ualUser = _yield$this$connectTo2.ualUser;
                _context8.prev = 7;

                this._oreIdContext.setIsBusy(true);

                _context8.next = 11;
                return this.getKeys(ualUser);

              case 11:
                keys = _context8.sent;
                _context8.next = 14;
                return ualUser.signArbitrary(keys[0], string, message);

              case 14:
                response = _context8.sent;
                return _context8.abrupt("return", {
                  signedString: response
                });

              case 18:
                _context8.prev = 18;
                _context8.t0 = _context8["catch"](7);
                console.error(_context8.t0);
                throw _context8.t0;

              case 22:
                _context8.prev = 22;

                this._oreIdContext.setIsBusy(false);

                return _context8.finish(22);

              case 25:
              case "end":
                return _context8.stop();
            }
          }
        }, _callee8, this, [[7, 18, 22, 25]]);
      }));

      function signStringWithUalProvider(_x12) {
        return _signStringWithUalProvider.apply(this, arguments);
      }

      return signStringWithUalProvider;
    }()
    /** Add the account selected in the UAL User to the ORE account's list of account/permissions */

  }, {
    key: "updateOreAccountPermissionsfromUalUser",
    value: function () {
      var _updateOreAccountPermissionsfromUalUser = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee9(user, walletType) {
        var _this$_user;

        var _yield$this$getAccoun, chainAccount, chainNetwork, permissions;

        return _regeneratorRuntime().wrap(function _callee9$(_context9) {
          while (1) {
            switch (_context9.prev = _context9.next) {
              case 0:
                if (user) {
                  _context9.next = 2;
                  break;
                }

                return _context9.abrupt("return");

              case 2:
                _context9.next = 4;
                return this.getAccountAndPermissionsFromUalUser(user);

              case 4:
                _yield$this$getAccoun = _context9.sent;
                chainAccount = _yield$this$getAccoun.chainAccount;
                chainNetwork = _yield$this$getAccoun.chainNetwork;
                permissions = _yield$this$getAccoun.permissions;

                if (!(!chainAccount || !permissions || !chainNetwork)) {
                  _context9.next = 10;
                  break;
                }

                return _context9.abrupt("return");

              case 10:
                _context9.next = 12;
                return (_this$_user = this._user) === null || _this$_user === void 0 ? void 0 : _this$_user.updatePermissionsIfNecessary({
                  chainAccount: chainAccount,
                  chainNetwork: chainNetwork,
                  permissions: permissions,
                  walletType: walletType
                });

              case 12:
                return _context9.abrupt("return");

              case 13:
              case "end":
                return _context9.stop();
            }
          }
        }, _callee9, this);
      }));

      function updateOreAccountPermissionsfromUalUser(_x13, _x14) {
        return _updateOreAccountPermissionsfromUalUser.apply(this, arguments);
      }

      return updateOreAccountPermissionsfromUalUser;
    }()
    /** Whether this UAL provider was installed upon instantiation */

  }, {
    key: "isUalProvider",
    value: function isUalProvider(walletType) {
      var walletProviderType = _utils_helpers__WEBPACK_IMPORTED_MODULE_1__["default"].mapAuthProviderToWalletType(walletType);
      if (!walletProviderType) return false;
      return _ualProviders__WEBPACK_IMPORTED_MODULE_0__.supportedUALProviders.includes(walletProviderType);
    }
    /** Whether this UAL provider was installed upon instantiation */

  }, {
    key: "hasUalProvider",
    value: function hasUalProvider(walletType) {
      return this._oreIdContext.ualProvidersInstalled.includes(walletType);
    }
    /**
     * get user account keys
     * some wallets don't support getKeys
     */

  }, {
    key: "getKeys",
    value: function () {
      var _getKeys = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee10(ualUser) {
        var keys;
        return _regeneratorRuntime().wrap(function _callee10$(_context10) {
          while (1) {
            switch (_context10.prev = _context10.next) {
              case 0:
                _context10.prev = 0;
                _context10.next = 3;
                return ualUser.getKeys();

              case 3:
                keys = _context10.sent;
                _context10.next = 9;
                break;

              case 6:
                _context10.prev = 6;
                _context10.t0 = _context10["catch"](0);
                // TODO: add logic to get permissions from eos chain for this account
                // const account = await ualUser.getAccountName()
                // const ualUserAccount = (ualUser as any).client && (await (ualUser as any).client.v1.chain.get_account(account))
                // const keys = await (ualUser as any).extractAccountKeys(ualUserAccount)
                keys = [];

              case 9:
                return _context10.abrupt("return", keys);

              case 10:
              case "end":
                return _context10.stop();
            }
          }
        }, _callee10, null, [[0, 6]]);
      }));

      function getKeys(_x15) {
        return _getKeys.apply(this, arguments);
      }

      return getKeys;
    }()
    /** Throw if the provider doesnt support the specified chainNetwork */

  }, {
    key: "assertProviderValidForChainNetwork",
    value: function () {
      var _assertProviderValidForChainNetwork = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee11(walletType, chainNetwork) {
        var _getUalProviderAttrib2, chainType, networks, isValid;

        return _regeneratorRuntime().wrap(function _callee11$(_context11) {
          while (1) {
            switch (_context11.prev = _context11.next) {
              case 0:
                _getUalProviderAttrib2 = (0,_ualProviders__WEBPACK_IMPORTED_MODULE_0__.getUalProviderAttributes)(walletType), chainType = _getUalProviderAttrib2.chainType;
                _context11.next = 3;
                return this._oreIdContext.settings.getAllChainNetworkSettings();

              case 3:
                networks = _context11.sent;
                isValid = !!networks.find(function (n) {
                  return n.network === chainNetwork && n.type === chainType;
                });

                if (isValid) {
                  _context11.next = 7;
                  break;
                }

                throw Error("External Wallet Type: ".concat(walletType, " doesnt support chainNetwork ").concat(chainNetwork, ". Hint: It supports networks of type ").concat(chainType, "."));

              case 7:
              case "end":
                return _context11.stop();
            }
          }
        }, _callee11, this);
      }));

      function assertProviderValidForChainNetwork(_x16, _x17) {
        return _assertProviderValidForChainNetwork.apply(this, arguments);
      }

      return assertProviderValidForChainNetwork;
    }()
    /** set isBusy on oreIdContext while wallet authenticator isLoading */

  }, {
    key: "waitWhileWalletIsBusy",
    value: function () {
      var _waitWhileWalletIsBusy = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee12(ualAuthenticator, walletType) {
        return _regeneratorRuntime().wrap(function _callee12$(_context12) {
          while (1) {
            switch (_context12.prev = _context12.next) {
              case 0:
                if (!ualAuthenticator.isLoading()) {
                  _context12.next = 7;
                  break;
                }

                this._oreIdContext.setIsBusy(true); // todo: add timeout
                // eslint-disable-next-line no-await-in-loop


                _context12.next = 4;
                return _utils_helpers__WEBPACK_IMPORTED_MODULE_1__["default"].sleep(250);

              case 4:
                // this is here to help a developer debug - dont remove this - if a wallet is not open to connect to, it will hang here
                console.log("connecting to ".concat(walletType, " via UAL wallet in progress:"), ualAuthenticator.isLoading());
                _context12.next = 0;
                break;

              case 7:
                this._oreIdContext.setIsBusy(false);

              case 8:
              case "end":
                return _context12.stop();
            }
          }
        }, _callee12, this);
      }));

      function waitWhileWalletIsBusy(_x18, _x19) {
        return _waitWhileWalletIsBusy.apply(this, arguments);
      }

      return waitWhileWalletIsBusy;
    }() // Supported features by provider

    /** whether discovery is supported by the provider */

  }, {
    key: "canDiscover",
    value: function canDiscover(walletType) {
      if (this.hasUalProvider(walletType)) {
        return (0,_ualProviders__WEBPACK_IMPORTED_MODULE_0__.getUalProviderAttributes)(walletType).supportsDiscovery;
      }

      return false;
    }
    /** whether signString is supported by the provider */

  }, {
    key: "canSignString",
    value: function canSignString(walletType) {
      if (this.hasUalProvider(walletType)) {
        return (0,_ualProviders__WEBPACK_IMPORTED_MODULE_0__.getUalProviderAttributes)(walletType).supportsSignArbitrary;
      }

      return false;
    }
    /** whether call to discover is required by provider before login */

  }, {
    key: "requiresDiscoverToLogin",
    value: function requiresDiscoverToLogin(walletType) {
      if (this.hasUalProvider(walletType)) {
        return (0,_ualProviders__WEBPACK_IMPORTED_MODULE_0__.getUalProviderAttributes)(walletType).requiresDiscoverToLogin;
      }

      return false;
    }
    /** whether call to logout then login is required by provider before discover */

  }, {
    key: "requiresLogoutLoginToDiscover",
    value: function requiresLogoutLoginToDiscover(walletType) {
      if (this.hasUalProvider(walletType)) {
        return (0,_ualProviders__WEBPACK_IMPORTED_MODULE_0__.getUalProviderAttributes)(walletType).requiresLogoutLoginToDiscover;
      }

      return false;
    }
    /** default path index for provider (if any) */

  }, {
    key: "defaultDiscoveryPathIndexList",
    value: function defaultDiscoveryPathIndexList(walletType) {
      if (this.hasUalProvider(walletType)) {
        var _getUalProviderAttrib3;

        return (_getUalProviderAttrib3 = (0,_ualProviders__WEBPACK_IMPORTED_MODULE_0__.getUalProviderAttributes)(walletType)) === null || _getUalProviderAttrib3 === void 0 ? void 0 : _getUalProviderAttrib3.defaultDiscoveryPathIndexList;
      }

      return null;
    }
    /** help text displayed to user for provider */

  }, {
    key: "helpTextForProvider",
    value: function helpTextForProvider(walletType) {
      if (this.hasUalProvider(walletType)) {
        return (0,_ualProviders__WEBPACK_IMPORTED_MODULE_0__.getUalProviderAttributes)(walletType).helpText;
      }

      return null;
    }
  }]);

  return UalHelper;
}();



/***/ }),
/* 73 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getUalProviderAttributes": () => (/* binding */ getUalProviderAttributes),
/* harmony export */   "getUalProviderAttributesByUalName": () => (/* binding */ getUalProviderAttributesByUalName),
/* harmony export */   "supportedUALProviders": () => (/* binding */ supportedUALProviders),
/* harmony export */   "ualProviderAttributesData": () => (/* binding */ ualProviderAttributesData)
/* harmony export */ });
/* harmony import */ var _common_models__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(8);

var ualProviderAttributesData = [{
  providerName: _common_models__WEBPACK_IMPORTED_MODULE_0__.ExternalWalletType.Anchor,
  providerId: 'Anchor',
  chainType: _common_models__WEBPACK_IMPORTED_MODULE_0__.ChainPlatformType.eos,
  requiresLogin: true,
  supportsSignArbitrary: false,
  requiresLogoutLoginToDiscover: false,
  requiresDiscoverToLogin: false,
  supportsDiscovery: false,
  helpText: {
    login: 'This wallet doesn’t require you to login',
    sign: '',
    discover: '',
    versionsRequired: ''
  },
  logoUrl: 'https://storage.googleapis.com/oreid-files/partners/wallet-generic-logo.png' // TODO: Add actual logo

}, {
  providerName: _common_models__WEBPACK_IMPORTED_MODULE_0__.ExternalWalletType.Ledger,
  providerId: 'Ledger',
  chainType: _common_models__WEBPACK_IMPORTED_MODULE_0__.ChainPlatformType.eos,
  requiresLogin: true,
  supportsSignArbitrary: false,
  requiresLogoutLoginToDiscover: false,
  requiresDiscoverToLogin: false,
  supportsDiscovery: false,
  helpText: {
    login: 'This wallet doesn’t require you to login',
    sign: 'Connect and unlock your Ledger with your PIN code. Launch the EOS app on the device.',
    discover: 'Connect and unlock your Ledger with your PIN code. Launch the EOS app on the device.',
    versionsRequired: 'You need to have recent versions of your browser, Ledger firmware, and the Ledger EOS app. Click here for more details.'
  },
  logoUrl: 'https://storage.googleapis.com/oreid-files/partners/wallet-ledger-logo.png'
}, {
  providerName: _common_models__WEBPACK_IMPORTED_MODULE_0__.ExternalWalletType.Lynx,
  providerId: 'Lynx',
  chainType: _common_models__WEBPACK_IMPORTED_MODULE_0__.ChainPlatformType.eos,
  requiresLogin: false,
  supportsSignArbitrary: true,
  requiresLogoutLoginToDiscover: false,
  requiresDiscoverToLogin: false,
  supportsDiscovery: false,
  helpText: {
    login: 'This wallet doesn’t require you to login',
    sign: '',
    discover: '',
    versionsRequired: ''
  },
  logoUrl: 'https://storage.googleapis.com/oreid-files/partners/wallet-lynx-logo.png'
}, {
  providerName: _common_models__WEBPACK_IMPORTED_MODULE_0__.ExternalWalletType.Scatter,
  providerId: 'Scatter',
  chainType: _common_models__WEBPACK_IMPORTED_MODULE_0__.ChainPlatformType.eos,
  requiresLogin: true,
  supportsSignArbitrary: true,
  requiresLogoutLoginToDiscover: false,
  requiresDiscoverToLogin: false,
  supportsDiscovery: false,
  helpText: {
    login: 'Scatter requires logging in through the Scatter app.',
    sign: '',
    discover: '',
    versionsRequired: ''
  },
  logoUrl: 'https://storage.googleapis.com/oreid-files/partners/wallet-scatter-logo.png'
}, {
  providerName: _common_models__WEBPACK_IMPORTED_MODULE_0__.ExternalWalletType.TokenPocket,
  providerId: 'Token Pocket',
  chainType: _common_models__WEBPACK_IMPORTED_MODULE_0__.ChainPlatformType.eos,
  requiresLogin: false,
  supportsSignArbitrary: true,
  requiresLogoutLoginToDiscover: false,
  requiresDiscoverToLogin: false,
  supportsDiscovery: false,
  helpText: {
    login: 'This wallet doesn’t require you to login',
    sign: '',
    discover: '',
    versionsRequired: ''
  },
  logoUrl: 'https://storage.googleapis.com/oreid-files/partners/wallet-generic-logo.png'
}, {
  providerName: _common_models__WEBPACK_IMPORTED_MODULE_0__.ExternalWalletType.Wombat,
  providerId: 'Wombat',
  chainType: _common_models__WEBPACK_IMPORTED_MODULE_0__.ChainPlatformType.eos,
  requiresLogin: true,
  supportsSignArbitrary: true,
  requiresLogoutLoginToDiscover: false,
  requiresDiscoverToLogin: false,
  supportsDiscovery: false,
  helpText: {
    login: 'This wallet doesn’t require you to login',
    sign: '',
    discover: '',
    versionsRequired: ''
  },
  logoUrl: 'https://storage.googleapis.com/oreid-files/partners/wallet-wombat-logo.png' // TODO: Add actual logo

}];
/** Get provider-specific settings and metadata */

function getUalProviderAttributes(walletType) {
  return ualProviderAttributesData.find(function (up) {
    return up.providerName === walletType.toString().toLowerCase();
  });
}
/** Get provider-specific settings and metadata by the UAL provider name */

function getUalProviderAttributesByUalName(walletType) {
  return ualProviderAttributesData.find(function (up) {
    return up.providerName === walletType.toLowerCase();
  });
}
var supportedUALProviders = ualProviderAttributesData.map(function (tp) {
  return tp.providerName;
});

/***/ }),
/* 74 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "User": () => (/* binding */ User)
/* harmony export */ });
/* harmony import */ var _api__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2);
/* harmony import */ var _api_endpoints_addPermission__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(4);
/* harmony import */ var _core_urlGenerators__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(40);
/* harmony import */ var _utils_helpers__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(17);
/* harmony import */ var _utils_observable__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(75);
/* harmony import */ var _common_models__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(8);
/* harmony import */ var _api_endpoints_updateDelayWalletSetup__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(76);
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

var _excluded = ["permissions"],
    _excluded2 = ["chainNetwork", "chainAccount", "permission"];

function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, $Symbol = "function" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, ""); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return generator._invoke = function (innerFn, self, context) { var state = "suspendedStart"; return function (method, arg) { if ("executing" === state) throw new Error("Generator is already running"); if ("completed" === state) { if ("throw" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) { if ("suspendedStart" === state) throw state = "completed", context.arg; context.dispatchException(context.arg); } else "return" === context.method && context.abrupt("return", context.arg); state = "executing"; var record = tryCatch(innerFn, self, context); if ("normal" === record.type) { if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg); } }; }(innerFn, self, context), generator; } function tryCatch(fn, obj, arg) { try { return { type: "normal", arg: fn.call(obj, arg) }; } catch (err) { return { type: "throw", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { ["next", "throw", "return"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if ("throw" !== record.type) { var result = record.arg, value = result.value; return value && "object" == _typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke("next", value, resolve, reject); }, function (err) { invoke("throw", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke("throw", error, resolve, reject); }); } reject(record.arg); } var previousPromise; this._invoke = function (method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); }; } function maybeInvokeDelegate(delegate, context) { var method = delegate.iterator[context.method]; if (undefined === method) { if (context.delegate = null, "throw" === context.method) { if (delegate.iterator["return"] && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method)) return ContinueSentinel; context.method = "throw", context.arg = new TypeError("The iterator does not provide a 'throw' method"); } return ContinueSentinel; } var record = tryCatch(method, delegate.iterator, context.arg); if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = "normal", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: "root" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if ("function" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, "constructor", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) { var ctor = "function" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, "toString", function () { return "[object Generator]"; }), exports.keys = function (object) { var keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if ("throw" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if ("root" === entry.tryLoc) return handle("end"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error("try statement without catch or finally"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if ("throw" === record.type) throw record.arg; return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, "catch": function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if ("throw" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, "next" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _get() { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get.bind(); } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }








var isNullOrEmpty = _utils_helpers__WEBPACK_IMPORTED_MODULE_3__["default"].isNullOrEmpty;
var User = /*#__PURE__*/function (_Observable) {
  _inherits(User, _Observable);

  var _super = _createSuper(User);

  function User(args) {
    var _thisSuper, _this;

    _classCallCheck(this, User);

    _this = _super.call(this);

    _defineProperty(_assertThisInitialized(_this), "onUpdateAccessTokenHelper", function (newAccessTokenHelper) {
      _this._accountName = newAccessTokenHelper.accountName;

      _get((_thisSuper = _assertThisInitialized(_this), _getPrototypeOf(User.prototype)), "callSubscribers", _thisSuper).call(_thisSuper);
    });

    _this._oreIdContext = args.oreIdContext;
    _this._accessTokenHelper = args.accessTokenHelper; // reference to current accessToken (via getter)

    _this._accountName = args.accountName;

    _this._accessTokenHelper.subscribe(_this.onUpdateAccessTokenHelper);

    return _this;
  } // pulled from the accessToken


  _createClass(User, [{
    key: "accessToken",
    get: function get() {
      return this._accessTokenHelper.accessToken;
    }
    /** User's OreID (accountName) */

  }, {
    key: "accountName",
    get: function get() {
      return this._accountName;
    }
    /** User's personal info (e.g. name, email, picture) */

  }, {
    key: "data",
    get: function get() {
      this.assertUserHasData();

      var _this$_userSourceData = this._userSourceData,
          permissions = _this$_userSourceData.permissions,
          otherInfo = _objectWithoutProperties(_this$_userSourceData, _excluded);

      return _objectSpread(_objectSpread({}, otherInfo), {}, {
        chainAccounts: this.getChainAccounts()
      });
    }
    /** Whether user's data has been retrieved with getData() */

  }, {
    key: "hasData",
    get: function get() {
      return !isNullOrEmpty(this === null || this === void 0 ? void 0 : this._userSourceData);
    }
  }, {
    key: "setUserSourceData",
    value: function setUserSourceData(userSourceData) {
      this._userSourceData = userSourceData;

      _get(_getPrototypeOf(User.prototype), "callSubscribers", this).call(this);
    }
    /** Return Blockchain accounts associated with the user's OreId account */

  }, {
    key: "getChainAccounts",
    value: function getChainAccounts() {
      var _this2 = this;

      this.assertUserHasData();
      var chainAccounts = (this._userSourceData.permissions || []).map(function (perm) {
        var _this2$getDefaultPerm = _this2.getDefaultPermissionForChainAccount(perm.chainAccount, perm.chainNetwork),
            _this2$getDefaultPerm2 = _slicedToArray(_this2$getDefaultPerm, 1),
            defaultPermission = _this2$getDefaultPerm2[0];

        return {
          chainAccount: perm.chainAccount,
          chainNetwork: perm.chainNetwork,
          defaultPermission: defaultPermission,
          permissions: _this2.getPermissionForChainAccount(perm.chainAccount, perm.chainNetwork)
        };
      }); // only return unique combinations of chainAccount and chainNetwork

      return _utils_helpers__WEBPACK_IMPORTED_MODULE_3__["default"].getUniqueValues(chainAccounts);
    }
    /** Whether we have a valid access token for the current user */

  }, {
    key: "isLoggedIn",
    get: function get() {
      return !!this.accessToken;
    }
    /** runs when accessTokenHelper changes */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars

  }, {
    key: "assertUserHasData",
    value:
    /** throw if user data hasn't been retrieved yet */
    function assertUserHasData() {
      if (!this.hasData) {
        throw new Error('User data hasnt been retrieved. Call user.getData() first.');
      }
    }
    /** throw if user hasn't have a valid email (i.e. user.email) */

  }, {
    key: "assertUserHasValidEmail",
    value: function assertUserHasValidEmail() {
      this.assertUserHasData();

      var _ref = (this === null || this === void 0 ? void 0 : this.data) || {},
          email = _ref.email;

      if (!_utils_helpers__WEBPACK_IMPORTED_MODULE_3__["default"].isValidEmail(email)) throw new Error('User doesnt have a valid email');
    }
    /** Get the user info from ORE ID API for a given user account and (usually) save the user into localStorage 'cache'
     *  Must have a valid accessToken to retrieve user
     */

  }, {
    key: "getData",
    value: function () {
      var _getData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(forceRefresh) {
        var accessToken, account, params, userSourceData;
        return _regeneratorRuntime().wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                if (!(this.hasData && !forceRefresh)) {
                  _context.next = 2;
                  break;
                }

                return _context.abrupt("return", this.data);

              case 2:
                // eslint-disable-next-line prefer-destructuring
                accessToken = this.accessToken;

                if (accessToken) {
                  _context.next = 5;
                  break;
                }

                throw new Error('AccessToken is missing or has expired');

              case 5:
                // get account specified in access token
                account = this === null || this === void 0 ? void 0 : this._accountName;
                params = {
                  account: account
                };
                _context.next = 9;
                return (0,_api__WEBPACK_IMPORTED_MODULE_0__.callApiGetUser)(this._oreIdContext, params);

              case 9:
                userSourceData = _context.sent;
                this._accountName = account;
                this.setUserSourceData(userSourceData);
                return _context.abrupt("return", this.data);

              case 13:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function getData(_x) {
        return _getData.apply(this, arguments);
      }

      return getData;
    }()
    /** Clears user's accessToken and user profile data */

  }, {
    key: "logout",
    value: function logout() {
      this._oreIdContext.logout();
    }
    /** Request OREID to create a new blockchain account in an existing user's wallet
     *  This is an advanced feature - it most cases, blockchain accounts will be created automatically upon first login
     */
    // async newChainAccount(newAccountOptions: NewAccountOptions) {
    //   // TODO - call API to create chain account (requires apiKey with createAccount right)
    //   // for webwidget, it should just refresh user info upon callback
    // }

    /** Returns a fully formed url to redirect the user's browser to create a new chain account using ORE ID
     *  This function calls the /new-account web endpoint
     *  Returns: Callback returns new chainAccount name */

  }, {
    key: "getNewChainAccountUrl",
    value: function () {
      var _getNewChainAccountUrl = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(newAccountOptions) {
        var _ref2, account, accountType, chainNetwork, accountOptions, provider, state, _this$_oreIdContext$o, newAccountCallbackUrl, backgroundColor, args, newAccountUrl;

        return _regeneratorRuntime().wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _ref2 = newAccountOptions || {}, account = _ref2.account, accountType = _ref2.accountType, chainNetwork = _ref2.chainNetwork, accountOptions = _ref2.accountOptions, provider = _ref2.provider, state = _ref2.state;
                _this$_oreIdContext$o = this._oreIdContext.options, newAccountCallbackUrl = _this$_oreIdContext$o.newAccountCallbackUrl, backgroundColor = _this$_oreIdContext$o.backgroundColor;
                args = {
                  account: account,
                  accountType: accountType,
                  backgroundColor: backgroundColor,
                  chainNetwork: chainNetwork,
                  accountOptions: accountOptions,
                  provider: provider,
                  callbackUrl: newAccountCallbackUrl,
                  state: state
                };
                _context2.next = 5;
                return (0,_core_urlGenerators__WEBPACK_IMPORTED_MODULE_2__.getOreIdNewChainAccountUrl)(this._oreIdContext, args);

              case 5:
                newAccountUrl = _context2.sent;
                return _context2.abrupt("return", {
                  newAccountUrl: newAccountUrl,
                  errors: null
                });

              case 7:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function getNewChainAccountUrl(_x2) {
        return _getNewChainAccountUrl.apply(this, arguments);
      }

      return getNewChainAccountUrl;
    }()
    /** Delete a test user
     * Test users are created by setting isTestUser:true on first authentication)
     */

  }, {
    key: "deleteTestUser",
    value: function () {
      var _deleteTestUser = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {
        var result;
        return _regeneratorRuntime().wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                if (this !== null && this !== void 0 && this.accountName) {
                  _context3.next = 2;
                  break;
                }

                throw new Error('User not authenticated. Must be logged-in (or have set an accessToken).');

              case 2:
                _context3.next = 4;
                return (0,_api__WEBPACK_IMPORTED_MODULE_0__.callApiDeleteTestUser)(this._oreIdContext, {
                  account: this.accountName
                });

              case 4:
                result = _context3.sent;
                return _context3.abrupt("return", result);

              case 6:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function deleteTestUser() {
        return _deleteTestUser.apply(this, arguments);
      }

      return deleteTestUser;
    }()
    /** If the user hasn't already setup their wallet, this will prompt the setup on their next interactive authentication
     * Used to turn-off the delayWalletSetup for a user's account
     * delayWalletSetup is enabled by passing delayWalletSetup:true for a user's first authentication (e.g. popup.auth(delayWalletSetup:true))
     * Delayed Wallet Setup allows a user to login without creating blockchain accounts right away
     * Call this function (to disable delayWalletSetup) just before the user needs a blockchain account (e.g. before signing a transaction)
     */

  }, {
    key: "disableDelayedWalletSetup",
    value: function () {
      var _disableDelayedWalletSetup = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {
        var result;
        return _regeneratorRuntime().wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                if (this !== null && this !== void 0 && this.accountName) {
                  _context4.next = 2;
                  break;
                }

                throw new Error('User not authenticated. Must be logged-in (or have set an accessToken).');

              case 2:
                _context4.next = 4;
                return (0,_api_endpoints_updateDelayWalletSetup__WEBPACK_IMPORTED_MODULE_6__.callApiUpdateDelayWalletSetup)(this._oreIdContext, {
                  account: this.accountName,
                  delayWalletSetup: false
                });

              case 4:
                result = _context4.sent;
                _context4.next = 7;
                return this.getData(true);

              case 7:
                return _context4.abrupt("return", result);

              case 8:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      function disableDelayedWalletSetup() {
        return _disableDelayedWalletSetup.apply(this, arguments);
      }

      return disableDelayedWalletSetup;
    }()
    /** Send a code to the user's primary email (user.email) - in order to verify the user has access to it
     *  After sending the code, use checkVerificationCodeForEmail() to verify that the user received the code */

  }, {
    key: "sendVerificationCodeToEmail",
    value: function () {
      var _sendVerificationCodeToEmail = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {
        var _this$data;

        var result;
        return _regeneratorRuntime().wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                this.assertUserHasValidEmail();
                _context5.next = 3;
                return (0,_api__WEBPACK_IMPORTED_MODULE_0__.callApiPasswordLessSendCode)(this._oreIdContext, {
                  email: this === null || this === void 0 ? void 0 : (_this$data = this.data) === null || _this$data === void 0 ? void 0 : _this$data.email,
                  provider: _common_models__WEBPACK_IMPORTED_MODULE_5__.AuthProvider.Email
                });

              case 3:
                result = _context5.sent;
                return _context5.abrupt("return", result);

              case 5:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      function sendVerificationCodeToEmail() {
        return _sendVerificationCodeToEmail.apply(this, arguments);
      }

      return sendVerificationCodeToEmail;
    }()
    /** Confirm that the code matches the last one just sent to the email by sendVerificationCodeToEmail() */

  }, {
    key: "checkVerificationCodeForEmail",
    value: function () {
      var _checkVerificationCodeForEmail = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(_ref3) {
        var _this$data2;

        var code, result;
        return _regeneratorRuntime().wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                code = _ref3.code;
                this.assertUserHasValidEmail();
                _context6.next = 4;
                return (0,_api__WEBPACK_IMPORTED_MODULE_0__.callApiPasswordLessVerifyCode)(this._oreIdContext, {
                  code: code,
                  email: this === null || this === void 0 ? void 0 : (_this$data2 = this.data) === null || _this$data2 === void 0 ? void 0 : _this$data2.email,
                  provider: _common_models__WEBPACK_IMPORTED_MODULE_5__.AuthProvider.Email
                });

              case 4:
                result = _context6.sent;
                return _context6.abrupt("return", result);

              case 6:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6, this);
      }));

      function checkVerificationCodeForEmail(_x3) {
        return _checkVerificationCodeForEmail.apply(this, arguments);
      }

      return checkVerificationCodeForEmail;
    }() // TODO: rename sendVerificationCodeToEmail - passwordlessVerificationSendCode(type, email, phone)
    // TODO: rename checkVerificationCodeForEmail - passwordlessVerificationVerifyCode(type, email, phone)

    /** Map permission from server data to local UserPermission object */

  }, {
    key: "mapUserPermission",
    value: function mapUserPermission(permission) {
      if (isNullOrEmpty(permission)) return null;

      var chainNetwork = permission.chainNetwork,
          chainAccount = permission.chainAccount,
          permissionName = permission.permission,
          other = _objectWithoutProperties(permission, _excluded2);

      return _objectSpread(_objectSpread({}, other), {}, {
        name: permissionName
      });
    }
    /** returns the UserPermissins a chainNetwork/chainAccount
     * if defaultOnly = true, returns the single default permission for the chainAccount
     */

  }, {
    key: "getPermissionForChainAccount",
    value: function getPermissionForChainAccount(chainAccount, chainNetwork) {
      var accountPermissions = this._userSourceData.permissions.filter(function (p) {
        return p.chainAccount === chainAccount && p.chainNetwork === chainNetwork;
      });

      return accountPermissions.map(this.mapUserPermission);
    }
  }, {
    key: "getDefaultPermissionForChainAccount",
    value: function getDefaultPermissionForChainAccount(chainAccount, chainNetwork) {
      var accountPermissions = this.getPermissionForChainAccount(chainAccount, chainNetwork);
      var defaultPermission = accountPermissions.filter(function (p) {
        return p.isDefault === true;
      }); // if no default is defined, and there is only one permission, use it as the default - this might be an external key

      if (isNullOrEmpty(defaultPermission) && (accountPermissions === null || accountPermissions === void 0 ? void 0 : accountPermissions.length) === 1) {
        defaultPermission = accountPermissions;
      }

      return defaultPermission;
    }
    /** Update permissions for user's ORE Account if any */

  }, {
    key: "updatePermissionsIfNecessary",
    value: function () {
      var _updatePermissionsIfNecessary = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7(args) {
        return _regeneratorRuntime().wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                _context7.next = 2;
                return this.addWalletPermissionsToOreIdAccount(args);

              case 2:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee7, this);
      }));

      function updatePermissionsIfNecessary(_x4) {
        return _updatePermissionsIfNecessary.apply(this, arguments);
      }

      return updatePermissionsIfNecessary;
    }() // for each permission in the wallet, add to ORE ID (if not in user's record)

    /** for all walletPermissions not already in the user's OreID wallet, add it by calling the api (addPermission) */

  }, {
    key: "addWalletPermissionsToOreIdAccount",
    value: function () {
      var _addWalletPermissionsToOreIdAccount = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee9(args) {
        var _this3 = this;

        var chainAccount, chainNetwork, permissions, walletType;
        return _regeneratorRuntime().wrap(function _callee9$(_context9) {
          while (1) {
            switch (_context9.prev = _context9.next) {
              case 0:
                _context9.next = 2;
                return this.getData();

              case 2:
                chainAccount = args.chainAccount, chainNetwork = args.chainNetwork, permissions = args.permissions, walletType = args.walletType;

                if (!(!this.accountName || isNullOrEmpty(permissions) || isNullOrEmpty(chainNetwork))) {
                  _context9.next = 5;
                  break;
                }

                return _context9.abrupt("return");

              case 5:
                _context9.next = 7;
                return _utils_helpers__WEBPACK_IMPORTED_MODULE_3__["default"].asyncForEach(permissions, /*#__PURE__*/function () {
                  var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8(perm) {
                    var permission, parentPermission, skipThisPermission, publicKey;
                    return _regeneratorRuntime().wrap(function _callee8$(_context8) {
                      while (1) {
                        switch (_context8.prev = _context8.next) {
                          case 0:
                            permission = perm.name;
                            parentPermission = perm.parent;

                            if (!parentPermission) {
                              // HACK: assume parent permission - its missing from the discover() results
                              parentPermission = 'active';

                              if (permission === 'owner') {
                                parentPermission = '';
                              } else if (permission === 'active') {
                                parentPermission = 'owner';
                              }
                            } // filter out permission that the user already has in his record


                            skipThisPermission = _this3._userSourceData.permissions.some(function (up) {
                              return up.chainAccount === chainAccount && up.chainNetwork === chainNetwork && up.permission === permission || permission === 'owner';
                            }); // don't add 'owner' permission and skip ones that are already stored in user's account

                            if (!(skipThisPermission !== true)) {
                              _context8.next = 8;
                              break;
                            }

                            // let publicKey = p.required_auth.keys[0].key; //TODO: Handle multiple keys and weights
                            publicKey = perm.publicKey; // if call is successful, nothing is returned in response (except processId)

                            _context8.next = 8;
                            return (0,_api_endpoints_addPermission__WEBPACK_IMPORTED_MODULE_1__.callApiAddPermission)(_this3._oreIdContext, {
                              account: _this3.accountName,
                              chainAccount: chainAccount,
                              chainNetwork: chainNetwork,
                              publicKey: publicKey,
                              parentPermission: parentPermission,
                              permission: permission,
                              provider: walletType
                            });

                          case 8:
                          case "end":
                            return _context8.stop();
                        }
                      }
                    }, _callee8);
                  }));

                  return function (_x6) {
                    return _ref4.apply(this, arguments);
                  };
                }());

              case 7:
                _context9.next = 9;
                return this.getData();

              case 9:
              case "end":
                return _context9.stop();
            }
          }
        }, _callee9, this);
      }));

      function addWalletPermissionsToOreIdAccount(_x5) {
        return _addWalletPermissionsToOreIdAccount.apply(this, arguments);
      }

      return addWalletPermissionsToOreIdAccount;
    }()
  }]);

  return User;
}(_utils_observable__WEBPACK_IMPORTED_MODULE_4__.Observable);

/***/ }),
/* 75 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Observable": () => (/* binding */ Observable)
/* harmony export */ });
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

var Observable = /*#__PURE__*/function () {
  function Observable() {
    _classCallCheck(this, Observable);

    this._subscribers = [];
  }

  _createClass(Observable, [{
    key: "subscribe",
    value: function subscribe(subscriber) {
      var hasThisSubscriber = this._subscribers.find(function (s) {
        return s === subscriber;
      });

      if (!subscriber || hasThisSubscriber) {
        return;
      }

      subscriber(this);

      this._subscribers.push(subscriber);
    }
  }, {
    key: "unsubscribe",
    value: function unsubscribe(subscriber) {
      this._subscribers = this._subscribers.filter(function (f) {
        return f !== subscriber;
      });
    }
  }, {
    key: "callSubscribers",
    value: function callSubscribers() {
      var _this = this;

      this._subscribers.forEach(function (f) {
        return f(_this);
      });
    }
  }]);

  return Observable;
}();

/***/ }),
/* 76 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "callApiUpdateDelayWalletSetup": () => (/* binding */ callApiUpdateDelayWalletSetup)
/* harmony export */ });
/* harmony import */ var _models__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(5);
/* harmony import */ var _helpers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(16);
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, $Symbol = "function" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, ""); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return generator._invoke = function (innerFn, self, context) { var state = "suspendedStart"; return function (method, arg) { if ("executing" === state) throw new Error("Generator is already running"); if ("completed" === state) { if ("throw" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) { if ("suspendedStart" === state) throw state = "completed", context.arg; context.dispatchException(context.arg); } else "return" === context.method && context.abrupt("return", context.arg); state = "executing"; var record = tryCatch(innerFn, self, context); if ("normal" === record.type) { if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg); } }; }(innerFn, self, context), generator; } function tryCatch(fn, obj, arg) { try { return { type: "normal", arg: fn.call(obj, arg) }; } catch (err) { return { type: "throw", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { ["next", "throw", "return"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if ("throw" !== record.type) { var result = record.arg, value = result.value; return value && "object" == _typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke("next", value, resolve, reject); }, function (err) { invoke("throw", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke("throw", error, resolve, reject); }); } reject(record.arg); } var previousPromise; this._invoke = function (method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); }; } function maybeInvokeDelegate(delegate, context) { var method = delegate.iterator[context.method]; if (undefined === method) { if (context.delegate = null, "throw" === context.method) { if (delegate.iterator["return"] && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method)) return ContinueSentinel; context.method = "throw", context.arg = new TypeError("The iterator does not provide a 'throw' method"); } return ContinueSentinel; } var record = tryCatch(method, delegate.iterator, context.arg); if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = "normal", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: "root" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if ("function" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, "constructor", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) { var ctor = "function" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, "toString", function () { return "[object Generator]"; }), exports.keys = function (object) { var keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if ("throw" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if ("root" === entry.tryLoc) return handle("end"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error("try statement without catch or finally"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if ("throw" === record.type) throw record.arg; return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, "catch": function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if ("throw" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, "next" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }




/** Call the account/update-delay-wallet-setup api
 * Sets the value of the wallet's delayWalletSetup flag
 * Can only be updated if the wallet is not yet setup (wallet.requiresWalletSetup = false)
 * Returns: success: true (or throws an error)
 * */
function callApiUpdateDelayWalletSetup(_x, _x2) {
  return _callApiUpdateDelayWalletSetup.apply(this, arguments);
}

function _callApiUpdateDelayWalletSetup() {
  _callApiUpdateDelayWalletSetup = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(oreIdContext, params) {
    var apiName, account, delayWalletSetup, body, results;
    return _regeneratorRuntime().wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            apiName = _models__WEBPACK_IMPORTED_MODULE_0__.ApiEndpoint.UpdateDelayWalletSetup;
            account = params.account, delayWalletSetup = params.delayWalletSetup;
            (0,_helpers__WEBPACK_IMPORTED_MODULE_1__.assertHasApiKeyOrAccessToken)(oreIdContext, apiName);
            (0,_helpers__WEBPACK_IMPORTED_MODULE_1__.assertParamsHaveRequiredValues)(params, ['account', 'delayWalletSetup'], apiName);
            body = {
              account: account,
              delay_wallet_setup: delayWalletSetup
            };
            _context.next = 7;
            return oreIdContext.callOreIdApi(_models__WEBPACK_IMPORTED_MODULE_0__.RequestType.Post, _models__WEBPACK_IMPORTED_MODULE_0__.ApiEndpoint.UpdateDelayWalletSetup, body, null);

          case 7:
            results = _context.sent;
            return _context.abrupt("return", results);

          case 9:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _callApiUpdateDelayWalletSetup.apply(this, arguments);
}

/***/ }),
/* 77 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AccessTokenHelper": () => (/* binding */ AccessTokenHelper)
/* harmony export */ });
/* harmony import */ var _utils_helpers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(17);
/* harmony import */ var _utils_observable__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(75);
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _get() { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get.bind(); } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }



var AccessTokenHelper = /*#__PURE__*/function (_Observable) {
  _inherits(AccessTokenHelper, _Observable);

  var _super = _createSuper(AccessTokenHelper);

  function AccessTokenHelper(accessToken) {
    var _this;

    var ignoreIssuer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

    _classCallCheck(this, AccessTokenHelper);

    _this = _super.call(this);
    _this._ignoreIssuer = ignoreIssuer;

    _this.setAccessToken(accessToken);

    return _this;
  }

  _createClass(AccessTokenHelper, [{
    key: "accessToken",
    get: function get() {
      return this._accessToken;
    }
  }, {
    key: "decodedAccessToken",
    get: function get() {
      if (!this.accessToken) return null;
      return this._decodedAccessToken;
    }
  }, {
    key: "idToken",
    get: function get() {
      return this._idToken;
    }
  }, {
    key: "decodedIdToken",
    get: function get() {
      return this._decodedIdToken;
    }
  }, {
    key: "accountName",
    get: function get() {
      if (!this.accessToken) return null;
      AccessTokenHelper.assertIsTokenValid(this.decodedAccessToken);
      return _utils_helpers__WEBPACK_IMPORTED_MODULE_0__["default"].getClaimFromJwtTokenBySearchString(this.decodedAccessToken, 'https://oreid.aikon.com/account');
    }
    /** clear accessToken */

  }, {
    key: "clearAccessToken",
    value: function clearAccessToken() {
      this.setAccessToken(null);
    }
    /** clear idToken */

  }, {
    key: "clearIdToken",
    value: function clearIdToken() {
      this.setIdToken(null);
    }
    /** Whether current accessToken is expired (or is missing)
     *  (optional) provide a Date() to compare expiration against - defaults to current Date()
     *  Returns: (boolean) true if hasExpired
     */

  }, {
    key: "hasExpired",
    value: function hasExpired(now) {
      if (!this._decodedAccessToken) return true;

      if (!AccessTokenHelper.isTokenDateValidNow(this._decodedAccessToken, now)) {
        return true;
      }

      return false;
    }
  }, {
    key: "setAccessToken",
    value: function setAccessToken(value) {
      var _this2 = this;

      if (!value) {
        this._accessToken = null; // allows clearing of value
      } else {
        var decodedAccessToken = _utils_helpers__WEBPACK_IMPORTED_MODULE_0__["default"].jwtDecodeSafe(value);
        if (!decodedAccessToken) throw Error("Can't set accessToken. Value provided: ".concat(value));
        AccessTokenHelper.assertIsTokenValid(decodedAccessToken, this._ignoreIssuer);
        AccessTokenHelper.assertIdTokenMatchesAccessToken(decodedAccessToken, this.decodedIdToken);
        this._decodedAccessToken = decodedAccessToken;
        this._accessToken = value; // Set a timer to clear the token when it expires (will clear if already expired)

        _utils_helpers__WEBPACK_IMPORTED_MODULE_0__["default"].runAtTime(function () {
          _this2.clearAccessToken();

          console.log('accessToken has expired and has been cleared');
        }, this._decodedAccessToken.exp * 1000);
      }

      _get(_getPrototypeOf(AccessTokenHelper.prototype), "callSubscribers", this).call(this);
    }
  }, {
    key: "setIdToken",
    value: function setIdToken(value) {
      var _this3 = this;

      if (!value) {
        this._decodedIdToken = null; // allows clearing of value
      } else {
        var decodedIdToken = _utils_helpers__WEBPACK_IMPORTED_MODULE_0__["default"].jwtDecodeSafe(value);
        if (!decodedIdToken) throw Error("Can't set IdToken. Value provided: ".concat(value));
        AccessTokenHelper.assertIsTokenValid(decodedIdToken, this._ignoreIssuer);
        AccessTokenHelper.assertIdTokenMatchesAccessToken(this.decodedAccessToken, decodedIdToken);
        this._decodedIdToken = decodedIdToken;
        this._idToken = value; // Set a timer to clear the token when it expires (will clear if already expired)

        _utils_helpers__WEBPACK_IMPORTED_MODULE_0__["default"].runAtTime(function () {
          _this3.clearIdToken();

          console.log('idToken has expired and has been cleared');
        }, this._decodedIdToken.exp * 1000);
      }

      _get(_getPrototypeOf(AccessTokenHelper.prototype), "callSubscribers", this).call(this);
    }
    /** Throws if accessToken is NOT set yet */

  }, {
    key: "assertHasAccessToken",
    value: function assertHasAccessToken() {
      if (!this.accessToken) throw Error('AccessToken not set. Login first.');
    }
    /** Whether token is a valid OREID issued token and NOT expired */

  }], [{
    key: "isTokenValid",
    value: function isTokenValid(decodedToken) {
      var ignoreIssuer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

      try {
        AccessTokenHelper.assertIsTokenValid(decodedToken, ignoreIssuer);
        return true;
      } catch (error) {
        return false;
      }
    }
    /** Throws if decodedToken is NOT a valid OREID issued token */

  }, {
    key: "assertIsTokenValid",
    value: function assertIsTokenValid(decodedToken) {
      var ignoreIssuer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      var now = new Date();
      if (!decodedToken) throw Error('JWT (access or id) token is invalid, or expired)'); // check if ORE ID issued this token

      if (!ignoreIssuer && !decodedToken.iss.includes('oreid.io')) {
        throw Error('Access token not issued by ORE ID');
      }

      if (!AccessTokenHelper.isTokenDateValidNow(decodedToken, now)) {
        throw Error('Access token has expired');
      }
    }
    /** Throws if accessToken does not match the same user and issuer as the idToken */

  }, {
    key: "assertIdTokenMatchesAccessToken",
    value: function assertIdTokenMatchesAccessToken(decodedAccessToken, decodedIdToken) {
      if (!decodedAccessToken || !decodedIdToken) return; // check if ORE ID issued this token

      if (decodedAccessToken.iss !== decodedIdToken.iss) {
        throw Error('AccessToken and IdToken mismatch - not issued by the same issuer');
      }

      if (decodedAccessToken.sub !== decodedIdToken.sub) {
        throw Error('AccessToken and IdToken mismatch - not for the same user');
      }
    }
    /** Whether a JWT token is valid for use right now - not expired and not being used before first usable date (nbf) */

  }, {
    key: "isTokenDateValidNow",
    value: function isTokenDateValidNow(decodedToken, now) {
      var nowDate = now || new Date();
      var nowInMs = nowDate.getTime() / 1000;

      if (typeof decodedToken.exp !== 'undefined' && (decodedToken === null || decodedToken === void 0 ? void 0 : decodedToken.exp) < nowInMs) {
        return false;
      }

      if (typeof (decodedToken === null || decodedToken === void 0 ? void 0 : decodedToken.nbf) !== 'undefined' && (decodedToken === null || decodedToken === void 0 ? void 0 : decodedToken.nbf) > nowInMs) {
        return false;
      }

      return true;
    }
  }]);

  return AccessTokenHelper;
}(_utils_observable__WEBPACK_IMPORTED_MODULE_1__.Observable);

/***/ }),
/* 78 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ OreId)
/* harmony export */ });
/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(79);
/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(axios__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _api__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(2);
/* harmony import */ var _auth_auth__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(1);
/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(109);
/* harmony import */ var _models__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(5);
/* harmony import */ var _transaction_transaction__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(111);
/* harmony import */ var _transit_TransitHelper__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(41);
/* harmony import */ var _ual_UalHelper__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(72);
/* harmony import */ var _utils_helpers__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(17);
/* harmony import */ var _utils_hmac__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(112);
/* harmony import */ var _utils_localState__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(118);
/* harmony import */ var _utils_storage__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(119);
/* harmony import */ var _Settings__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(121);
/* harmony import */ var _wallets_WalletHelper__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(122);
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, $Symbol = "function" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, ""); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return generator._invoke = function (innerFn, self, context) { var state = "suspendedStart"; return function (method, arg) { if ("executing" === state) throw new Error("Generator is already running"); if ("completed" === state) { if ("throw" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) { if ("suspendedStart" === state) throw state = "completed", context.arg; context.dispatchException(context.arg); } else "return" === context.method && context.abrupt("return", context.arg); state = "executing"; var record = tryCatch(innerFn, self, context); if ("normal" === record.type) { if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg); } }; }(innerFn, self, context), generator; } function tryCatch(fn, obj, arg) { try { return { type: "normal", arg: fn.call(obj, arg) }; } catch (err) { return { type: "throw", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { ["next", "throw", "return"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if ("throw" !== record.type) { var result = record.arg, value = result.value; return value && "object" == _typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke("next", value, resolve, reject); }, function (err) { invoke("throw", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke("throw", error, resolve, reject); }); } reject(record.arg); } var previousPromise; this._invoke = function (method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); }; } function maybeInvokeDelegate(delegate, context) { var method = delegate.iterator[context.method]; if (undefined === method) { if (context.delegate = null, "throw" === context.method) { if (delegate.iterator["return"] && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method)) return ContinueSentinel; context.method = "throw", context.arg = new TypeError("The iterator does not provide a 'throw' method"); } return ContinueSentinel; } var record = tryCatch(method, delegate.iterator, context.arg); if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = "normal", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: "root" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if ("function" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, "constructor", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) { var ctor = "function" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, "toString", function () { return "[object Generator]"; }), exports.keys = function (object) { var keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if ("throw" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if ("root" === entry.tryLoc) return handle("end"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error("try statement without catch or finally"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if ("throw" === record.type) throw record.arg; return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, "catch": function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if ("throw" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, "next" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/* eslint-disable no-param-reassign */

/* eslint-disable @typescript-eslint/no-unused-vars */

/* eslint-disable no-console */














var isNullOrEmpty = _utils_helpers__WEBPACK_IMPORTED_MODULE_8__["default"].isNullOrEmpty;

var OreId = /*#__PURE__*/function () {
  function OreId(options) {
    var _this$options, _this$options2, _this$options3, _this$options4;

    _classCallCheck(this, OreId);

    _defineProperty(this, "transitProvidersInstalled", []);

    _defineProperty(this, "ualProvidersInstalled", []);

    this._options = null;
    this.validateAndSetOptions(options);
    var storageHandler = ((_this$options = this.options) === null || _this$options === void 0 ? void 0 : _this$options.storageHandler) || new _utils_storage__WEBPACK_IMPORTED_MODULE_11__["default"]();
    this._localState = new _utils_localState__WEBPACK_IMPORTED_MODULE_10__["default"]((_this$options2 = this.options) === null || _this$options2 === void 0 ? void 0 : _this$options2.appId, storageHandler);
    this._settings = new _Settings__WEBPACK_IMPORTED_MODULE_12__["default"]({
      oreIdContext: this
    });
    this._auth = new _auth_auth__WEBPACK_IMPORTED_MODULE_2__.Auth({
      oreIdContext: this
    });
    this._transitHelper = new _transit_TransitHelper__WEBPACK_IMPORTED_MODULE_6__["default"]({
      oreIdContext: this,
      user: this._auth.user
    });

    this._transitHelper.installTransitProviders((_this$options3 = this.options) === null || _this$options3 === void 0 ? void 0 : _this$options3.eosTransitWalletProviders);

    this._ualHelper = new _ual_UalHelper__WEBPACK_IMPORTED_MODULE_7__["default"]({
      oreIdContext: this,
      user: this._auth.user
    });

    this._ualHelper.installUalProviders((_this$options4 = this.options) === null || _this$options4 === void 0 ? void 0 : _this$options4.ualAuthenticators);

    this._walletHelper = new _wallets_WalletHelper__WEBPACK_IMPORTED_MODULE_13__["default"]({
      oreIdContext: this,
      transitHelper: this._transitHelper,
      ualHelper: this._ualHelper
    });
    this._initializerPlugins = options.plugins || {};
    this._isInitialized = false;
  }

  _createClass(OreId, [{
    key: "accessToken",
    get:
    /** accessToken (stored in localState) */
    function get() {
      return this.auth.accessToken;
    }
    /** accessToken helper functions and current state */

  }, {
    key: "accessTokenHelper",
    get: function get() {
      return this.auth.accessTokenHelper;
    }
    /** authentication flows and login state */

  }, {
    key: "auth",
    get: function get() {
      return this._auth;
    }
    /** whether the current appId is a demo app */

  }, {
    key: "isDemoApp",
    get: function get() {
      var _this$options5, _this$options5$appId;

      return ((_this$options5 = this.options) === null || _this$options5 === void 0 ? void 0 : (_this$options5$appId = _this$options5.appId) === null || _this$options5$appId === void 0 ? void 0 : _this$options5$appId.toLowerCase().startsWith('demo')) || false;
    }
    /** whether init() has been called */

  }, {
    key: "isInitialized",
    get: function get() {
      return this._isInitialized;
    }
    /** helper to persist data (e.g. accessToken) */

  }, {
    key: "localState",
    get: function get() {
      return this._localState;
    }
    /** oreid options used in constructor */

  }, {
    key: "options",
    get: function get() {
      return this._options;
    }
    /** installed popup plugin */

  }, {
    key: "popup",
    get: function get() {
      this.assertIsInitialized();
      return this._popup;
    }
    /** If we're running in the browser, we must use a proxy server to talk to OREID api
    Unless, we are running the demo app, in which case CORS is disabled by OREID server */

  }, {
    key: "requiresProxyServer",
    get: function get() {
      var _this$options6, _this$options7;

      // if we aren't using an apiKey, we dont ever need a proxy server
      if (this !== null && this !== void 0 && (_this$options6 = this.options) !== null && _this$options6 !== void 0 && _this$options6.isUsingProxyServer) return true;
      if (!(this !== null && this !== void 0 && (_this$options7 = this.options) !== null && _this$options7 !== void 0 && _this$options7.apiKey)) return false;
      return _utils_helpers__WEBPACK_IMPORTED_MODULE_8__["default"].isInBrowser && !this.isDemoApp;
    }
    /** oreid settings helper */

  }, {
    key: "settings",
    get: function get() {
      return this._settings;
    }
    /** External wallet helper functions and connections */

  }, {
    key: "walletHelper",
    get: function get() {
      return this._walletHelper;
    }
    /** perform asynchronous setup tasks */

  }, {
    key: "init",
    value: function () {
      var _init = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
        var _this$_initializerPlu;

        var _this$_initializerPlu2, _this$_initializerPlu3;

        return _regeneratorRuntime().wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                if (!this.isInitialized) {
                  _context.next = 2;
                  break;
                }

                return _context.abrupt("return");

              case 2:
                if (!((_this$_initializerPlu = this._initializerPlugins) !== null && _this$_initializerPlu !== void 0 && _this$_initializerPlu.popup)) {
                  _context.next = 6;
                  break;
                }

                _context.next = 5;
                return (_this$_initializerPlu2 = this._initializerPlugins) === null || _this$_initializerPlu2 === void 0 ? void 0 : (_this$_initializerPlu3 = _this$_initializerPlu2.popup) === null || _this$_initializerPlu3 === void 0 ? void 0 : _this$_initializerPlu3.init(this);

              case 5:
                this._popup = _context.sent;

              case 6:
                this._isInitialized = true;

              case 7:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function init() {
        return _init.apply(this, arguments);
      }

      return init;
    }()
    /** throw and error if oreId is not initialized yet */

  }, {
    key: "assertIsInitialized",
    value: function assertIsInitialized() {
      if (!this.isInitialized) {
        throw new Error('OreId is not initialized - call init() first');
      }
    }
    /** Clears user's accessToken and user profile data */

  }, {
    key: "logout",
    value: function logout() {
      this.auth.logout();
    }
    /** Sign an arbitrary string (instead of a transaction)
     * This only supports Transit and Ual wallets
     */

  }, {
    key: "signStringWithWallet",
    value: function () {
      var _signStringWithWallet = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(params) {
        return _regeneratorRuntime().wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                return _context2.abrupt("return", this.walletHelper.signStringWithWallet(params));

              case 1:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function signStringWithWallet(_x) {
        return _signStringWithWallet.apply(this, arguments);
      }

      return signStringWithWallet;
    }()
    /** Sign an arbitrary string (instead of a transaction) using ORE ID
     */

  }, {
    key: "custodialSignString",
    value: function () {
      var _custodialSignString = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(params) {
        var response;
        return _regeneratorRuntime().wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                _context3.next = 2;
                return (0,_api__WEBPACK_IMPORTED_MODULE_1__.callApiCustodialSignString)(this, params);

              case 2:
                response = _context3.sent;

                if (!(response !== null && response !== void 0 && response.errorCode || response !== null && response !== void 0 && response.errorMessage)) {
                  _context3.next = 5;
                  break;
                }

                throw new Error(response.errorMessage);

              case 5:
                return _context3.abrupt("return", response);

              case 6:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function custodialSignString(_x2) {
        return _custodialSignString.apply(this, arguments);
      }

      return custodialSignString;
    }()
    /** Create a new user account that is managed by your app
     * Requires a wallet password (userPassword) on behalf of the user
     * Requires an apiKey with the createUser right
     * Returns: accountName of newly created account
     *       OR errorCode, errorMessage, and message if any problems */

  }, {
    key: "custodialNewAccount",
    value: function () {
      var _custodialNewAccount = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(accountOptions) {
        var response;
        return _regeneratorRuntime().wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                _context4.next = 2;
                return (0,_api__WEBPACK_IMPORTED_MODULE_1__.callApiCustodialNewAccount)(this, accountOptions);

              case 2:
                response = _context4.sent;

                if (!(response !== null && response !== void 0 && response.errorCode || response !== null && response !== void 0 && response.errorMessage)) {
                  _context4.next = 5;
                  break;
                }

                throw new Error(response.errorMessage);

              case 5:
                return _context4.abrupt("return", response);

              case 6:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      function custodialNewAccount(_x3) {
        return _custodialNewAccount.apply(this, arguments);
      }

      return custodialNewAccount;
    }()
    /** Call the custodial/migrate-user api
     * Converts a user account to a new account type
     * Usually used to convert a virtal account to a native account (on-chain)
     * .. and expects the account to be a managed (custodial) account
     * Requires a wallet password (userPassword) on behalf of the user
     * Requires an apiKey with the accountMigration right
     * Returns: account name of migrated account
     *       OR errorCode, errorMessage, and message if any problems */

  }, {
    key: "custodialMigrateAccount",
    value: function () {
      var _custodialMigrateAccount = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(migrateOptions) {
        var response;
        return _regeneratorRuntime().wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                _context5.next = 2;
                return (0,_api__WEBPACK_IMPORTED_MODULE_1__.callApiCustodialMigrateAccount)(this, migrateOptions);

              case 2:
                response = _context5.sent;

                if (!(response !== null && response !== void 0 && response.errorCode || response !== null && response !== void 0 && response.errorMessage)) {
                  _context5.next = 5;
                  break;
                }

                throw new Error(response.errorMessage);

              case 5:
                return _context5.abrupt("return", response);

              case 6:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      function custodialMigrateAccount(_x4) {
        return _custodialMigrateAccount.apply(this, arguments);
      }

      return custodialMigrateAccount;
    }()
    /** Returns metadata about the installed external wallet type (e.g. name, logo) and which features it supports
     *  Returns different data depending on the wallet interface type (Transit or Ual)
     */

  }, {
    key: "getExternalWalletInfo",
    value: function getExternalWalletInfo(walletType) {
      return this.walletHelper.getExternalWalletInfo(walletType);
    }
    /** Create a new Transaction object - used for composing and signing transactions */

  }, {
    key: "createTransaction",
    value: function () {
      var _createTransaction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(data) {
        return _regeneratorRuntime().wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                if (this._auth.user.hasData) {
                  _context6.next = 3;
                  break;
                }

                _context6.next = 3;
                return this._auth.user.getData();

              case 3:
                return _context6.abrupt("return", new _transaction_transaction__WEBPACK_IMPORTED_MODULE_5__["default"]({
                  oreIdContext: this,
                  user: this.auth.user,
                  data: data
                }));

              case 4:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6, this);
      }));

      function createTransaction(_x5) {
        return _createTransaction.apply(this, arguments);
      }

      return createTransaction;
    }()
    /** Call the setBusyCallback() callback provided in optiont
     *  Use true or false to set the current busy state
     */

  }, {
    key: "setIsBusy",
    value: function setIsBusy(value) {
      if (this.isBusy !== value) {
        this.isBusy = value;

        if (this.options.setBusyCallback) {
          this.options.setBusyCallback(value);
        }
      }
    } // TODO add validation of newer options

    /**  Validates startup options */

  }, {
    key: "validateAndSetOptions",
    value: function validateAndSetOptions(options) {
      var _ref = options || {},
          appId = _ref.appId,
          apiKey = _ref.apiKey,
          oreIdUrl = _ref.oreIdUrl;

      var errorMessage = ''; // set options now since this.requiresProxyServer needs it set

      this._options = options; // Apply default options

      if (options) this.options.oreIdUrl = oreIdUrl || _constants__WEBPACK_IMPORTED_MODULE_3__.defaultOreIdServiceUrl;

      if (!appId) {
        errorMessage += '\n --> Missing required parameter - appId. You can get an appId when you register your app with ORE ID.';
      } // api-key and service-key not allowed if this is being instantiated in the browser


      if (this.requiresProxyServer && apiKey) {
        errorMessage += '\n --> You cant include the apiKey when creating an instance of OreId that runs in the browser. This is to prevent your key from being visible in the browser. If this app runs solely in the browser (like a Create React App), you need to set-up a proxy server to protect your keys. Refer to https://github.com/TeamAikon/ore-id-docs. Note: You wont get this error when using the appId and apiKey for a demo app (appId starts with demo_).';
      }

      if (errorMessage !== '') {
        throw new Error("Options are missing or invalid. ".concat(errorMessage));
      }
    }
    /** Gets a single-use token to access the service */

  }, {
    key: "getAppAccessToken",
    value: function () {
      var _getAppAccessToken = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7(params) {
        return _regeneratorRuntime().wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                return _context7.abrupt("return", (0,_api__WEBPACK_IMPORTED_MODULE_1__.callApiGetAppToken)(this, params));

              case 1:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee7, this);
      }));

      function getAppAccessToken(_x6) {
        return _getAppAccessToken.apply(this, arguments);
      }

      return getAppAccessToken;
    }()
    /** Extracts the response parameters on the /new-account callback URL string */

  }, {
    key: "handleNewAccountResponse",
    value: function handleNewAccountResponse(callbackUrlString) {
      var _Helpers$extractDataF = _utils_helpers__WEBPACK_IMPORTED_MODULE_8__["default"].extractDataFromCallbackUrl(callbackUrlString),
          chainAccount = _Helpers$extractDataF.chain_account,
          processId = _Helpers$extractDataF.process_id,
          state = _Helpers$extractDataF.state,
          errors = _Helpers$extractDataF.errors;

      this.setIsBusy(false);
      return {
        chainAccount: chainAccount,
        processId: processId,
        state: state,
        errors: errors
      };
    }
    /** Extracts and returns the response parameters from the /sign callback URL string */

  }, {
    key: "handleSignCallback",
    value: function handleSignCallback(callbackUrlString) {
      var signedTransaction;

      var _Helpers$extractDataF2 = _utils_helpers__WEBPACK_IMPORTED_MODULE_8__["default"].extractDataFromCallbackUrl(callbackUrlString),
          encodedTransaction = _Helpers$extractDataF2.signed_transaction,
          processId = _Helpers$extractDataF2.process_id,
          state = _Helpers$extractDataF2.state,
          transactionId = _Helpers$extractDataF2.transaction_id,
          errors = _Helpers$extractDataF2.errors;

      if (!errors) {
        // Decode base64 parameters
        signedTransaction = _utils_helpers__WEBPACK_IMPORTED_MODULE_8__["default"].base64DecodeSafe(encodedTransaction);
      }

      this.setIsBusy(false);
      return {
        signedTransaction: signedTransaction,
        processId: processId,
        state: state,
        transactionId: transactionId,
        errors: errors
      };
    }
    /** Updates and returns a WebWidgetProps object to include two new fields: timestamp, signature
     *  timestamp: current server time
     *  signature: HMAC signature of the object including the timestamp - calculated using the apiKey
     *  IF incoming props already has a value for timestamp - it is kept
     *  If both incoming and timestamp and signature are already present, this returns incoming data unmodified
     *  If an apiKey is not provided in options, this function expects a proxy server endpoint at /oreid/hmac to generate the siganture with the secured apiKey
     *  Returns the updated object that includes the timestamp and the signature fields
     */

  }, {
    key: "appendTimestampAndSignatureToWidgetProps",
    value: function () {
      var _appendTimestampAndSignatureToWidgetProps = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8(data) {
        var _window;

        var signedProps, nowTimestamp;
        return _regeneratorRuntime().wrap(function _callee8$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                if (!(data !== null && data !== void 0 && data.timestamp && data !== null && data !== void 0 && data.signature)) {
                  _context8.next = 2;
                  break;
                }

                return _context8.abrupt("return", data);

              case 2:
                signedProps = _objectSpread({}, data); // keep existing timestamp if there is one

                nowTimestamp = (data === null || data === void 0 ? void 0 : data.timestamp) || new Date().getTime();
                signedProps.origin = (data === null || data === void 0 ? void 0 : data.origin) || ((_window = window) === null || _window === void 0 ? void 0 : _window.location.origin);
                signedProps.timestamp = nowTimestamp; // if we have an apiKey, add a signature

                _context8.prev = 6;
                _context8.next = 9;
                return (0,_utils_hmac__WEBPACK_IMPORTED_MODULE_9__.generateHmacWithApiKeyOrProxyServer)(this.requiresProxyServer, this.options.apiKey, JSON.stringify(_utils_helpers__WEBPACK_IMPORTED_MODULE_8__["default"].sortJson(data)) // props including timestamp - sortJson ensures json members are always in the same order
                );

              case 9:
                signedProps.signature = _context8.sent;
                _context8.next = 14;
                break;

              case 12:
                _context8.prev = 12;
                _context8.t0 = _context8["catch"](6);

              case 14:
                return _context8.abrupt("return", signedProps);

              case 15:
              case "end":
                return _context8.stop();
            }
          }
        }, _callee8, this, [[6, 12]]);
      }));

      function appendTimestampAndSignatureToWidgetProps(_x7) {
        return _appendTimestampAndSignatureToWidgetProps.apply(this, arguments);
      }

      return appendTimestampAndSignatureToWidgetProps;
    }()
    /** Helper function to call api endpoint and inject api-key
      here params can be query params in case of a GET request or body params in case of POST request
      processId (optional) - can be used to associate multiple calls together into a single process flow
    */

  }, {
    key: "callOreIdApi",
    value: function () {
      var _callOreIdApi = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee9(requestMethod, endpoint) {
        var _response;

        var params,
            overrideAccessToken,
            processId,
            urlString,
            response,
            headers,
            _this$options8,
            apiKey,
            oreIdUrl,
            oreIdUrlBase,
            url,
            accessToken,
            urlWithParams,
            body,
            error,
            data,
            _args9 = arguments;

        return _regeneratorRuntime().wrap(function _callee9$(_context9) {
          while (1) {
            switch (_context9.prev = _context9.next) {
              case 0:
                params = _args9.length > 2 && _args9[2] !== undefined ? _args9[2] : {};

                /** Required if apiKey is not provider (optional otherwise) */
                overrideAccessToken = _args9.length > 3 ? _args9[3] : undefined;
                processId = _args9.length > 4 && _args9[4] !== undefined ? _args9[4] : null;
                headers = {};
                _this$options8 = this.options, apiKey = _this$options8.apiKey, oreIdUrl = _this$options8.oreIdUrl; // if running in browser, we dont call the api directly, we use a proxy server (unless we're running a demo app)
                // calls to the proxy server must start with '/' (not an host like http://server) and we'll prepend 'oreid' to it e.g. /oreid/api/xxx to make it easier to do proxy server routing

                oreIdUrlBase = this.requiresProxyServer ? '/oreid' : oreIdUrl;
                url = "".concat(oreIdUrlBase, "/api/").concat(endpoint);
                accessToken = overrideAccessToken || this.accessToken;

                if (!(!apiKey && !accessToken && !_constants__WEBPACK_IMPORTED_MODULE_3__.publicApiEndpoints.includes(endpoint))) {
                  _context9.next = 10;
                  break;
                }

                throw new Error('OreId API request requires either apiKey or accessToken');

              case 10:
                // apiKey is optional (accessToken is required if apiKey not provided)
                if (apiKey) {
                  headers['api-key'] = apiKey;
                }

                if (accessToken) {
                  headers.Authorization = "Bearer ".concat(accessToken);
                }

                if (!isNullOrEmpty(processId)) {
                  headers['process-id'] = processId;
                } // add sdk version to request header


                headers['sdk-version'] = "oreidjs/".concat(_constants__WEBPACK_IMPORTED_MODULE_3__.version);
                _context9.prev = 14;

                if (!(requestMethod === _models__WEBPACK_IMPORTED_MODULE_4__.RequestType.Get)) {
                  _context9.next = 21;
                  break;
                }

                if (!isNullOrEmpty(params)) {
                  urlString = Object.keys(params).map(function (key) {
                    return "".concat(key, "=").concat(params[key]);
                  }).join('&');
                }

                urlWithParams = urlString ? "".concat(url, "?").concat(urlString) : url;
                _context9.next = 20;
                return axios__WEBPACK_IMPORTED_MODULE_0___default().get(urlWithParams, {
                  headers: headers
                });

              case 20:
                response = _context9.sent;

              case 21:
                if (!(requestMethod === _models__WEBPACK_IMPORTED_MODULE_4__.RequestType.Post)) {
                  _context9.next = 26;
                  break;
                }

                body = !isNullOrEmpty(params) ? JSON.stringify(params) : null;
                _context9.next = 25;
                return axios__WEBPACK_IMPORTED_MODULE_0___default().post(url, body, {
                  headers: _objectSpread({
                    'Content-Type': 'application/json'
                  }, headers)
                });

              case 25:
                response = _context9.sent;

              case 26:
                _context9.next = 32;
                break;

              case 28:
                _context9.prev = 28;
                _context9.t0 = _context9["catch"](14);
                error = _utils_helpers__WEBPACK_IMPORTED_MODULE_8__["default"].getErrorFromAxiosError(_context9.t0);
                throw error;

              case 32:
                data = (_response = response) === null || _response === void 0 ? void 0 : _response.data;
                return _context9.abrupt("return", data);

              case 34:
              case "end":
                return _context9.stop();
            }
          }
        }, _callee9, this, [[14, 28]]);
      }));

      function callOreIdApi(_x8, _x9) {
        return _callOreIdApi.apply(this, arguments);
      }

      return callOreIdApi;
    }()
    /** Add an app access token and hmac signature to the url
     *  If running in browser, calls proxy server at /oreid/prepare-url to do both (since they require teh apiKey secret) */

  }, {
    key: "addAccessTokenAndHmacToUrl",
    value: function () {
      var _addAccessTokenAndHmacToUrl = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee10(urlString, appAccessTokenMetadata, overrideAppAccessToken) {
        var _this$options9;

        var appId, _response$data, response, completeUrl, appAccessToken, _this$options10;

        return _regeneratorRuntime().wrap(function _callee10$(_context10) {
          while (1) {
            switch (_context10.prev = _context10.next) {
              case 0:
                appId = this.options.appId; // running in browser

                if (!this.requiresProxyServer) {
                  _context10.next = 6;
                  break;
                }

                _context10.next = 4;
                return axios__WEBPACK_IMPORTED_MODULE_0___default().post('/oreid/prepare-url', {
                  appAccessTokenMetadata: appAccessTokenMetadata,
                  urlString: urlString
                });

              case 4:
                response = _context10.sent;
                return _context10.abrupt("return", response === null || response === void 0 ? void 0 : (_response$data = response.data) === null || _response$data === void 0 ? void 0 : _response$data.urlString);

              case 6:
                completeUrl = "".concat(urlString, "&app_id=").concat(appId); // if we need app token metadata, then we generate and add an appAccessToken

                if (isNullOrEmpty(appAccessTokenMetadata)) {
                  _context10.next = 15;
                  break;
                }

                _context10.t0 = overrideAppAccessToken;

                if (_context10.t0) {
                  _context10.next = 13;
                  break;
                }

                _context10.next = 12;
                return this.getAppAccessToken({
                  appAccessTokenMetadata: appAccessTokenMetadata
                });

              case 12:
                _context10.t0 = _context10.sent;

              case 13:
                appAccessToken = _context10.t0;
                completeUrl = "".concat(completeUrl, "&app_access_token=").concat(appAccessToken);

              case 15:
                if (!((_this$options9 = this.options) !== null && _this$options9 !== void 0 && _this$options9.apiKey)) {
                  _context10.next = 19;
                  break;
                }

                _context10.next = 18;
                return (0,_utils_hmac__WEBPACK_IMPORTED_MODULE_9__.appendHmacToUrl)(false, (_this$options10 = this.options) === null || _this$options10 === void 0 ? void 0 : _this$options10.apiKey, completeUrl);

              case 18:
                completeUrl = _context10.sent;

              case 19:
                return _context10.abrupt("return", completeUrl);

              case 20:
              case "end":
                return _context10.stop();
            }
          }
        }, _callee10, this);
      }));

      function addAccessTokenAndHmacToUrl(_x10, _x11, _x12) {
        return _addAccessTokenAndHmacToUrl.apply(this, arguments);
      }

      return addAccessTokenAndHmacToUrl;
    }()
  }]);

  return OreId;
}();



/***/ }),
/* 79 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports = __webpack_require__(80);

/***/ }),
/* 80 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var utils = __webpack_require__(81);
var bind = __webpack_require__(82);
var Axios = __webpack_require__(83);
var mergeConfig = __webpack_require__(103);
var defaults = __webpack_require__(88);

/**
 * Create an instance of Axios
 *
 * @param {Object} defaultConfig The default config for the instance
 * @return {Axios} A new instance of Axios
 */
function createInstance(defaultConfig) {
  var context = new Axios(defaultConfig);
  var instance = bind(Axios.prototype.request, context);

  // Copy axios.prototype to instance
  utils.extend(instance, Axios.prototype, context);

  // Copy context to instance
  utils.extend(instance, context);

  // Factory for creating new instances
  instance.create = function create(instanceConfig) {
    return createInstance(mergeConfig(defaultConfig, instanceConfig));
  };

  return instance;
}

// Create the default instance to be exported
var axios = createInstance(defaults);

// Expose Axios class to allow class inheritance
axios.Axios = Axios;

// Expose Cancel & CancelToken
axios.Cancel = __webpack_require__(101);
axios.CancelToken = __webpack_require__(106);
axios.isCancel = __webpack_require__(102);
axios.VERSION = (__webpack_require__(105).version);

// Expose all/spread
axios.all = function all(promises) {
  return Promise.all(promises);
};
axios.spread = __webpack_require__(107);

// Expose isAxiosError
axios.isAxiosError = __webpack_require__(108);

module.exports = axios;

// Allow use of default import syntax in TypeScript
module.exports["default"] = axios;


/***/ }),
/* 81 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var bind = __webpack_require__(82);

// utils is a library of generic helper functions non-specific to axios

var toString = Object.prototype.toString;

/**
 * Determine if a value is an Array
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an Array, otherwise false
 */
function isArray(val) {
  return Array.isArray(val);
}

/**
 * Determine if a value is undefined
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if the value is undefined, otherwise false
 */
function isUndefined(val) {
  return typeof val === 'undefined';
}

/**
 * Determine if a value is a Buffer
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Buffer, otherwise false
 */
function isBuffer(val) {
  return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor)
    && typeof val.constructor.isBuffer === 'function' && val.constructor.isBuffer(val);
}

/**
 * Determine if a value is an ArrayBuffer
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an ArrayBuffer, otherwise false
 */
function isArrayBuffer(val) {
  return toString.call(val) === '[object ArrayBuffer]';
}

/**
 * Determine if a value is a FormData
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an FormData, otherwise false
 */
function isFormData(val) {
  return toString.call(val) === '[object FormData]';
}

/**
 * Determine if a value is a view on an ArrayBuffer
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false
 */
function isArrayBufferView(val) {
  var result;
  if ((typeof ArrayBuffer !== 'undefined') && (ArrayBuffer.isView)) {
    result = ArrayBuffer.isView(val);
  } else {
    result = (val) && (val.buffer) && (isArrayBuffer(val.buffer));
  }
  return result;
}

/**
 * Determine if a value is a String
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a String, otherwise false
 */
function isString(val) {
  return typeof val === 'string';
}

/**
 * Determine if a value is a Number
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Number, otherwise false
 */
function isNumber(val) {
  return typeof val === 'number';
}

/**
 * Determine if a value is an Object
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an Object, otherwise false
 */
function isObject(val) {
  return val !== null && typeof val === 'object';
}

/**
 * Determine if a value is a plain Object
 *
 * @param {Object} val The value to test
 * @return {boolean} True if value is a plain Object, otherwise false
 */
function isPlainObject(val) {
  if (toString.call(val) !== '[object Object]') {
    return false;
  }

  var prototype = Object.getPrototypeOf(val);
  return prototype === null || prototype === Object.prototype;
}

/**
 * Determine if a value is a Date
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Date, otherwise false
 */
function isDate(val) {
  return toString.call(val) === '[object Date]';
}

/**
 * Determine if a value is a File
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a File, otherwise false
 */
function isFile(val) {
  return toString.call(val) === '[object File]';
}

/**
 * Determine if a value is a Blob
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Blob, otherwise false
 */
function isBlob(val) {
  return toString.call(val) === '[object Blob]';
}

/**
 * Determine if a value is a Function
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Function, otherwise false
 */
function isFunction(val) {
  return toString.call(val) === '[object Function]';
}

/**
 * Determine if a value is a Stream
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Stream, otherwise false
 */
function isStream(val) {
  return isObject(val) && isFunction(val.pipe);
}

/**
 * Determine if a value is a URLSearchParams object
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a URLSearchParams object, otherwise false
 */
function isURLSearchParams(val) {
  return toString.call(val) === '[object URLSearchParams]';
}

/**
 * Trim excess whitespace off the beginning and end of a string
 *
 * @param {String} str The String to trim
 * @returns {String} The String freed of excess whitespace
 */
function trim(str) {
  return str.trim ? str.trim() : str.replace(/^\s+|\s+$/g, '');
}

/**
 * Determine if we're running in a standard browser environment
 *
 * This allows axios to run in a web worker, and react-native.
 * Both environments support XMLHttpRequest, but not fully standard globals.
 *
 * web workers:
 *  typeof window -> undefined
 *  typeof document -> undefined
 *
 * react-native:
 *  navigator.product -> 'ReactNative'
 * nativescript
 *  navigator.product -> 'NativeScript' or 'NS'
 */
function isStandardBrowserEnv() {
  if (typeof navigator !== 'undefined' && (navigator.product === 'ReactNative' ||
                                           navigator.product === 'NativeScript' ||
                                           navigator.product === 'NS')) {
    return false;
  }
  return (
    typeof window !== 'undefined' &&
    typeof document !== 'undefined'
  );
}

/**
 * Iterate over an Array or an Object invoking a function for each item.
 *
 * If `obj` is an Array callback will be called passing
 * the value, index, and complete array for each item.
 *
 * If 'obj' is an Object callback will be called passing
 * the value, key, and complete object for each property.
 *
 * @param {Object|Array} obj The object to iterate
 * @param {Function} fn The callback to invoke for each item
 */
function forEach(obj, fn) {
  // Don't bother if no value provided
  if (obj === null || typeof obj === 'undefined') {
    return;
  }

  // Force an array if not already something iterable
  if (typeof obj !== 'object') {
    /*eslint no-param-reassign:0*/
    obj = [obj];
  }

  if (isArray(obj)) {
    // Iterate over array values
    for (var i = 0, l = obj.length; i < l; i++) {
      fn.call(null, obj[i], i, obj);
    }
  } else {
    // Iterate over object keys
    for (var key in obj) {
      if (Object.prototype.hasOwnProperty.call(obj, key)) {
        fn.call(null, obj[key], key, obj);
      }
    }
  }
}

/**
 * Accepts varargs expecting each argument to be an object, then
 * immutably merges the properties of each object and returns result.
 *
 * When multiple objects contain the same key the later object in
 * the arguments list will take precedence.
 *
 * Example:
 *
 * ```js
 * var result = merge({foo: 123}, {foo: 456});
 * console.log(result.foo); // outputs 456
 * ```
 *
 * @param {Object} obj1 Object to merge
 * @returns {Object} Result of all merge properties
 */
function merge(/* obj1, obj2, obj3, ... */) {
  var result = {};
  function assignValue(val, key) {
    if (isPlainObject(result[key]) && isPlainObject(val)) {
      result[key] = merge(result[key], val);
    } else if (isPlainObject(val)) {
      result[key] = merge({}, val);
    } else if (isArray(val)) {
      result[key] = val.slice();
    } else {
      result[key] = val;
    }
  }

  for (var i = 0, l = arguments.length; i < l; i++) {
    forEach(arguments[i], assignValue);
  }
  return result;
}

/**
 * Extends object a by mutably adding to it the properties of object b.
 *
 * @param {Object} a The object to be extended
 * @param {Object} b The object to copy properties from
 * @param {Object} thisArg The object to bind function to
 * @return {Object} The resulting value of object a
 */
function extend(a, b, thisArg) {
  forEach(b, function assignValue(val, key) {
    if (thisArg && typeof val === 'function') {
      a[key] = bind(val, thisArg);
    } else {
      a[key] = val;
    }
  });
  return a;
}

/**
 * Remove byte order marker. This catches EF BB BF (the UTF-8 BOM)
 *
 * @param {string} content with BOM
 * @return {string} content value without BOM
 */
function stripBOM(content) {
  if (content.charCodeAt(0) === 0xFEFF) {
    content = content.slice(1);
  }
  return content;
}

module.exports = {
  isArray: isArray,
  isArrayBuffer: isArrayBuffer,
  isBuffer: isBuffer,
  isFormData: isFormData,
  isArrayBufferView: isArrayBufferView,
  isString: isString,
  isNumber: isNumber,
  isObject: isObject,
  isPlainObject: isPlainObject,
  isUndefined: isUndefined,
  isDate: isDate,
  isFile: isFile,
  isBlob: isBlob,
  isFunction: isFunction,
  isStream: isStream,
  isURLSearchParams: isURLSearchParams,
  isStandardBrowserEnv: isStandardBrowserEnv,
  forEach: forEach,
  merge: merge,
  extend: extend,
  trim: trim,
  stripBOM: stripBOM
};


/***/ }),
/* 82 */
/***/ ((module) => {

"use strict";


module.exports = function bind(fn, thisArg) {
  return function wrap() {
    var args = new Array(arguments.length);
    for (var i = 0; i < args.length; i++) {
      args[i] = arguments[i];
    }
    return fn.apply(thisArg, args);
  };
};


/***/ }),
/* 83 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var utils = __webpack_require__(81);
var buildURL = __webpack_require__(84);
var InterceptorManager = __webpack_require__(85);
var dispatchRequest = __webpack_require__(86);
var mergeConfig = __webpack_require__(103);
var validator = __webpack_require__(104);

var validators = validator.validators;
/**
 * Create a new instance of Axios
 *
 * @param {Object} instanceConfig The default config for the instance
 */
function Axios(instanceConfig) {
  this.defaults = instanceConfig;
  this.interceptors = {
    request: new InterceptorManager(),
    response: new InterceptorManager()
  };
}

/**
 * Dispatch a request
 *
 * @param {Object} config The config specific for this request (merged with this.defaults)
 */
Axios.prototype.request = function request(configOrUrl, config) {
  /*eslint no-param-reassign:0*/
  // Allow for axios('example/url'[, config]) a la fetch API
  if (typeof configOrUrl === 'string') {
    config = config || {};
    config.url = configOrUrl;
  } else {
    config = configOrUrl || {};
  }

  config = mergeConfig(this.defaults, config);

  // Set config.method
  if (config.method) {
    config.method = config.method.toLowerCase();
  } else if (this.defaults.method) {
    config.method = this.defaults.method.toLowerCase();
  } else {
    config.method = 'get';
  }

  var transitional = config.transitional;

  if (transitional !== undefined) {
    validator.assertOptions(transitional, {
      silentJSONParsing: validators.transitional(validators.boolean),
      forcedJSONParsing: validators.transitional(validators.boolean),
      clarifyTimeoutError: validators.transitional(validators.boolean)
    }, false);
  }

  // filter out skipped interceptors
  var requestInterceptorChain = [];
  var synchronousRequestInterceptors = true;
  this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
    if (typeof interceptor.runWhen === 'function' && interceptor.runWhen(config) === false) {
      return;
    }

    synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;

    requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);
  });

  var responseInterceptorChain = [];
  this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
    responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);
  });

  var promise;

  if (!synchronousRequestInterceptors) {
    var chain = [dispatchRequest, undefined];

    Array.prototype.unshift.apply(chain, requestInterceptorChain);
    chain = chain.concat(responseInterceptorChain);

    promise = Promise.resolve(config);
    while (chain.length) {
      promise = promise.then(chain.shift(), chain.shift());
    }

    return promise;
  }


  var newConfig = config;
  while (requestInterceptorChain.length) {
    var onFulfilled = requestInterceptorChain.shift();
    var onRejected = requestInterceptorChain.shift();
    try {
      newConfig = onFulfilled(newConfig);
    } catch (error) {
      onRejected(error);
      break;
    }
  }

  try {
    promise = dispatchRequest(newConfig);
  } catch (error) {
    return Promise.reject(error);
  }

  while (responseInterceptorChain.length) {
    promise = promise.then(responseInterceptorChain.shift(), responseInterceptorChain.shift());
  }

  return promise;
};

Axios.prototype.getUri = function getUri(config) {
  config = mergeConfig(this.defaults, config);
  return buildURL(config.url, config.params, config.paramsSerializer).replace(/^\?/, '');
};

// Provide aliases for supported request methods
utils.forEach(['delete', 'get', 'head', 'options'], function forEachMethodNoData(method) {
  /*eslint func-names:0*/
  Axios.prototype[method] = function(url, config) {
    return this.request(mergeConfig(config || {}, {
      method: method,
      url: url,
      data: (config || {}).data
    }));
  };
});

utils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
  /*eslint func-names:0*/
  Axios.prototype[method] = function(url, data, config) {
    return this.request(mergeConfig(config || {}, {
      method: method,
      url: url,
      data: data
    }));
  };
});

module.exports = Axios;


/***/ }),
/* 84 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var utils = __webpack_require__(81);

function encode(val) {
  return encodeURIComponent(val).
    replace(/%3A/gi, ':').
    replace(/%24/g, '$').
    replace(/%2C/gi, ',').
    replace(/%20/g, '+').
    replace(/%5B/gi, '[').
    replace(/%5D/gi, ']');
}

/**
 * Build a URL by appending params to the end
 *
 * @param {string} url The base of the url (e.g., http://www.google.com)
 * @param {object} [params] The params to be appended
 * @returns {string} The formatted url
 */
module.exports = function buildURL(url, params, paramsSerializer) {
  /*eslint no-param-reassign:0*/
  if (!params) {
    return url;
  }

  var serializedParams;
  if (paramsSerializer) {
    serializedParams = paramsSerializer(params);
  } else if (utils.isURLSearchParams(params)) {
    serializedParams = params.toString();
  } else {
    var parts = [];

    utils.forEach(params, function serialize(val, key) {
      if (val === null || typeof val === 'undefined') {
        return;
      }

      if (utils.isArray(val)) {
        key = key + '[]';
      } else {
        val = [val];
      }

      utils.forEach(val, function parseValue(v) {
        if (utils.isDate(v)) {
          v = v.toISOString();
        } else if (utils.isObject(v)) {
          v = JSON.stringify(v);
        }
        parts.push(encode(key) + '=' + encode(v));
      });
    });

    serializedParams = parts.join('&');
  }

  if (serializedParams) {
    var hashmarkIndex = url.indexOf('#');
    if (hashmarkIndex !== -1) {
      url = url.slice(0, hashmarkIndex);
    }

    url += (url.indexOf('?') === -1 ? '?' : '&') + serializedParams;
  }

  return url;
};


/***/ }),
/* 85 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var utils = __webpack_require__(81);

function InterceptorManager() {
  this.handlers = [];
}

/**
 * Add a new interceptor to the stack
 *
 * @param {Function} fulfilled The function to handle `then` for a `Promise`
 * @param {Function} rejected The function to handle `reject` for a `Promise`
 *
 * @return {Number} An ID used to remove interceptor later
 */
InterceptorManager.prototype.use = function use(fulfilled, rejected, options) {
  this.handlers.push({
    fulfilled: fulfilled,
    rejected: rejected,
    synchronous: options ? options.synchronous : false,
    runWhen: options ? options.runWhen : null
  });
  return this.handlers.length - 1;
};

/**
 * Remove an interceptor from the stack
 *
 * @param {Number} id The ID that was returned by `use`
 */
InterceptorManager.prototype.eject = function eject(id) {
  if (this.handlers[id]) {
    this.handlers[id] = null;
  }
};

/**
 * Iterate over all the registered interceptors
 *
 * This method is particularly useful for skipping over any
 * interceptors that may have become `null` calling `eject`.
 *
 * @param {Function} fn The function to call for each interceptor
 */
InterceptorManager.prototype.forEach = function forEach(fn) {
  utils.forEach(this.handlers, function forEachHandler(h) {
    if (h !== null) {
      fn(h);
    }
  });
};

module.exports = InterceptorManager;


/***/ }),
/* 86 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var utils = __webpack_require__(81);
var transformData = __webpack_require__(87);
var isCancel = __webpack_require__(102);
var defaults = __webpack_require__(88);
var Cancel = __webpack_require__(101);

/**
 * Throws a `Cancel` if cancellation has been requested.
 */
function throwIfCancellationRequested(config) {
  if (config.cancelToken) {
    config.cancelToken.throwIfRequested();
  }

  if (config.signal && config.signal.aborted) {
    throw new Cancel('canceled');
  }
}

/**
 * Dispatch a request to the server using the configured adapter.
 *
 * @param {object} config The config that is to be used for the request
 * @returns {Promise} The Promise to be fulfilled
 */
module.exports = function dispatchRequest(config) {
  throwIfCancellationRequested(config);

  // Ensure headers exist
  config.headers = config.headers || {};

  // Transform request data
  config.data = transformData.call(
    config,
    config.data,
    config.headers,
    config.transformRequest
  );

  // Flatten headers
  config.headers = utils.merge(
    config.headers.common || {},
    config.headers[config.method] || {},
    config.headers
  );

  utils.forEach(
    ['delete', 'get', 'head', 'post', 'put', 'patch', 'common'],
    function cleanHeaderConfig(method) {
      delete config.headers[method];
    }
  );

  var adapter = config.adapter || defaults.adapter;

  return adapter(config).then(function onAdapterResolution(response) {
    throwIfCancellationRequested(config);

    // Transform response data
    response.data = transformData.call(
      config,
      response.data,
      response.headers,
      config.transformResponse
    );

    return response;
  }, function onAdapterRejection(reason) {
    if (!isCancel(reason)) {
      throwIfCancellationRequested(config);

      // Transform response data
      if (reason && reason.response) {
        reason.response.data = transformData.call(
          config,
          reason.response.data,
          reason.response.headers,
          config.transformResponse
        );
      }
    }

    return Promise.reject(reason);
  });
};


/***/ }),
/* 87 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var utils = __webpack_require__(81);
var defaults = __webpack_require__(88);

/**
 * Transform the data for a request or a response
 *
 * @param {Object|String} data The data to be transformed
 * @param {Array} headers The headers for the request or response
 * @param {Array|Function} fns A single function or Array of functions
 * @returns {*} The resulting transformed data
 */
module.exports = function transformData(data, headers, fns) {
  var context = this || defaults;
  /*eslint no-param-reassign:0*/
  utils.forEach(fns, function transform(fn) {
    data = fn.call(context, data, headers);
  });

  return data;
};


/***/ }),
/* 88 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var utils = __webpack_require__(81);
var normalizeHeaderName = __webpack_require__(89);
var enhanceError = __webpack_require__(90);
var transitionalDefaults = __webpack_require__(91);

var DEFAULT_CONTENT_TYPE = {
  'Content-Type': 'application/x-www-form-urlencoded'
};

function setContentTypeIfUnset(headers, value) {
  if (!utils.isUndefined(headers) && utils.isUndefined(headers['Content-Type'])) {
    headers['Content-Type'] = value;
  }
}

function getDefaultAdapter() {
  var adapter;
  if (typeof XMLHttpRequest !== 'undefined') {
    // For browsers use XHR adapter
    adapter = __webpack_require__(92);
  } else if (typeof process !== 'undefined' && Object.prototype.toString.call(process) === '[object process]') {
    // For node use HTTP adapter
    adapter = __webpack_require__(92);
  }
  return adapter;
}

function stringifySafely(rawValue, parser, encoder) {
  if (utils.isString(rawValue)) {
    try {
      (parser || JSON.parse)(rawValue);
      return utils.trim(rawValue);
    } catch (e) {
      if (e.name !== 'SyntaxError') {
        throw e;
      }
    }
  }

  return (encoder || JSON.stringify)(rawValue);
}

var defaults = {

  transitional: transitionalDefaults,

  adapter: getDefaultAdapter(),

  transformRequest: [function transformRequest(data, headers) {
    normalizeHeaderName(headers, 'Accept');
    normalizeHeaderName(headers, 'Content-Type');

    if (utils.isFormData(data) ||
      utils.isArrayBuffer(data) ||
      utils.isBuffer(data) ||
      utils.isStream(data) ||
      utils.isFile(data) ||
      utils.isBlob(data)
    ) {
      return data;
    }
    if (utils.isArrayBufferView(data)) {
      return data.buffer;
    }
    if (utils.isURLSearchParams(data)) {
      setContentTypeIfUnset(headers, 'application/x-www-form-urlencoded;charset=utf-8');
      return data.toString();
    }
    if (utils.isObject(data) || (headers && headers['Content-Type'] === 'application/json')) {
      setContentTypeIfUnset(headers, 'application/json');
      return stringifySafely(data);
    }
    return data;
  }],

  transformResponse: [function transformResponse(data) {
    var transitional = this.transitional || defaults.transitional;
    var silentJSONParsing = transitional && transitional.silentJSONParsing;
    var forcedJSONParsing = transitional && transitional.forcedJSONParsing;
    var strictJSONParsing = !silentJSONParsing && this.responseType === 'json';

    if (strictJSONParsing || (forcedJSONParsing && utils.isString(data) && data.length)) {
      try {
        return JSON.parse(data);
      } catch (e) {
        if (strictJSONParsing) {
          if (e.name === 'SyntaxError') {
            throw enhanceError(e, this, 'E_JSON_PARSE');
          }
          throw e;
        }
      }
    }

    return data;
  }],

  /**
   * A timeout in milliseconds to abort a request. If set to 0 (default) a
   * timeout is not created.
   */
  timeout: 0,

  xsrfCookieName: 'XSRF-TOKEN',
  xsrfHeaderName: 'X-XSRF-TOKEN',

  maxContentLength: -1,
  maxBodyLength: -1,

  validateStatus: function validateStatus(status) {
    return status >= 200 && status < 300;
  },

  headers: {
    common: {
      'Accept': 'application/json, text/plain, */*'
    }
  }
};

utils.forEach(['delete', 'get', 'head'], function forEachMethodNoData(method) {
  defaults.headers[method] = {};
});

utils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
  defaults.headers[method] = utils.merge(DEFAULT_CONTENT_TYPE);
});

module.exports = defaults;


/***/ }),
/* 89 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var utils = __webpack_require__(81);

module.exports = function normalizeHeaderName(headers, normalizedName) {
  utils.forEach(headers, function processHeader(value, name) {
    if (name !== normalizedName && name.toUpperCase() === normalizedName.toUpperCase()) {
      headers[normalizedName] = value;
      delete headers[name];
    }
  });
};


/***/ }),
/* 90 */
/***/ ((module) => {

"use strict";


/**
 * Update an Error with the specified config, error code, and response.
 *
 * @param {Error} error The error to update.
 * @param {Object} config The config.
 * @param {string} [code] The error code (for example, 'ECONNABORTED').
 * @param {Object} [request] The request.
 * @param {Object} [response] The response.
 * @returns {Error} The error.
 */
module.exports = function enhanceError(error, config, code, request, response) {
  error.config = config;
  if (code) {
    error.code = code;
  }

  error.request = request;
  error.response = response;
  error.isAxiosError = true;

  error.toJSON = function toJSON() {
    return {
      // Standard
      message: this.message,
      name: this.name,
      // Microsoft
      description: this.description,
      number: this.number,
      // Mozilla
      fileName: this.fileName,
      lineNumber: this.lineNumber,
      columnNumber: this.columnNumber,
      stack: this.stack,
      // Axios
      config: this.config,
      code: this.code,
      status: this.response && this.response.status ? this.response.status : null
    };
  };
  return error;
};


/***/ }),
/* 91 */
/***/ ((module) => {

"use strict";


module.exports = {
  silentJSONParsing: true,
  forcedJSONParsing: true,
  clarifyTimeoutError: false
};


/***/ }),
/* 92 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var utils = __webpack_require__(81);
var settle = __webpack_require__(93);
var cookies = __webpack_require__(95);
var buildURL = __webpack_require__(84);
var buildFullPath = __webpack_require__(96);
var parseHeaders = __webpack_require__(99);
var isURLSameOrigin = __webpack_require__(100);
var createError = __webpack_require__(94);
var transitionalDefaults = __webpack_require__(91);
var Cancel = __webpack_require__(101);

module.exports = function xhrAdapter(config) {
  return new Promise(function dispatchXhrRequest(resolve, reject) {
    var requestData = config.data;
    var requestHeaders = config.headers;
    var responseType = config.responseType;
    var onCanceled;
    function done() {
      if (config.cancelToken) {
        config.cancelToken.unsubscribe(onCanceled);
      }

      if (config.signal) {
        config.signal.removeEventListener('abort', onCanceled);
      }
    }

    if (utils.isFormData(requestData)) {
      delete requestHeaders['Content-Type']; // Let the browser set it
    }

    var request = new XMLHttpRequest();

    // HTTP basic authentication
    if (config.auth) {
      var username = config.auth.username || '';
      var password = config.auth.password ? unescape(encodeURIComponent(config.auth.password)) : '';
      requestHeaders.Authorization = 'Basic ' + btoa(username + ':' + password);
    }

    var fullPath = buildFullPath(config.baseURL, config.url);
    request.open(config.method.toUpperCase(), buildURL(fullPath, config.params, config.paramsSerializer), true);

    // Set the request timeout in MS
    request.timeout = config.timeout;

    function onloadend() {
      if (!request) {
        return;
      }
      // Prepare the response
      var responseHeaders = 'getAllResponseHeaders' in request ? parseHeaders(request.getAllResponseHeaders()) : null;
      var responseData = !responseType || responseType === 'text' ||  responseType === 'json' ?
        request.responseText : request.response;
      var response = {
        data: responseData,
        status: request.status,
        statusText: request.statusText,
        headers: responseHeaders,
        config: config,
        request: request
      };

      settle(function _resolve(value) {
        resolve(value);
        done();
      }, function _reject(err) {
        reject(err);
        done();
      }, response);

      // Clean up request
      request = null;
    }

    if ('onloadend' in request) {
      // Use onloadend if available
      request.onloadend = onloadend;
    } else {
      // Listen for ready state to emulate onloadend
      request.onreadystatechange = function handleLoad() {
        if (!request || request.readyState !== 4) {
          return;
        }

        // The request errored out and we didn't get a response, this will be
        // handled by onerror instead
        // With one exception: request that using file: protocol, most browsers
        // will return status as 0 even though it's a successful request
        if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf('file:') === 0)) {
          return;
        }
        // readystate handler is calling before onerror or ontimeout handlers,
        // so we should call onloadend on the next 'tick'
        setTimeout(onloadend);
      };
    }

    // Handle browser request cancellation (as opposed to a manual cancellation)
    request.onabort = function handleAbort() {
      if (!request) {
        return;
      }

      reject(createError('Request aborted', config, 'ECONNABORTED', request));

      // Clean up request
      request = null;
    };

    // Handle low level network errors
    request.onerror = function handleError() {
      // Real errors are hidden from us by the browser
      // onerror should only fire if it's a network error
      reject(createError('Network Error', config, null, request));

      // Clean up request
      request = null;
    };

    // Handle timeout
    request.ontimeout = function handleTimeout() {
      var timeoutErrorMessage = config.timeout ? 'timeout of ' + config.timeout + 'ms exceeded' : 'timeout exceeded';
      var transitional = config.transitional || transitionalDefaults;
      if (config.timeoutErrorMessage) {
        timeoutErrorMessage = config.timeoutErrorMessage;
      }
      reject(createError(
        timeoutErrorMessage,
        config,
        transitional.clarifyTimeoutError ? 'ETIMEDOUT' : 'ECONNABORTED',
        request));

      // Clean up request
      request = null;
    };

    // Add xsrf header
    // This is only done if running in a standard browser environment.
    // Specifically not if we're in a web worker, or react-native.
    if (utils.isStandardBrowserEnv()) {
      // Add xsrf header
      var xsrfValue = (config.withCredentials || isURLSameOrigin(fullPath)) && config.xsrfCookieName ?
        cookies.read(config.xsrfCookieName) :
        undefined;

      if (xsrfValue) {
        requestHeaders[config.xsrfHeaderName] = xsrfValue;
      }
    }

    // Add headers to the request
    if ('setRequestHeader' in request) {
      utils.forEach(requestHeaders, function setRequestHeader(val, key) {
        if (typeof requestData === 'undefined' && key.toLowerCase() === 'content-type') {
          // Remove Content-Type if data is undefined
          delete requestHeaders[key];
        } else {
          // Otherwise add header to the request
          request.setRequestHeader(key, val);
        }
      });
    }

    // Add withCredentials to request if needed
    if (!utils.isUndefined(config.withCredentials)) {
      request.withCredentials = !!config.withCredentials;
    }

    // Add responseType to request if needed
    if (responseType && responseType !== 'json') {
      request.responseType = config.responseType;
    }

    // Handle progress if needed
    if (typeof config.onDownloadProgress === 'function') {
      request.addEventListener('progress', config.onDownloadProgress);
    }

    // Not all browsers support upload events
    if (typeof config.onUploadProgress === 'function' && request.upload) {
      request.upload.addEventListener('progress', config.onUploadProgress);
    }

    if (config.cancelToken || config.signal) {
      // Handle cancellation
      // eslint-disable-next-line func-names
      onCanceled = function(cancel) {
        if (!request) {
          return;
        }
        reject(!cancel || (cancel && cancel.type) ? new Cancel('canceled') : cancel);
        request.abort();
        request = null;
      };

      config.cancelToken && config.cancelToken.subscribe(onCanceled);
      if (config.signal) {
        config.signal.aborted ? onCanceled() : config.signal.addEventListener('abort', onCanceled);
      }
    }

    if (!requestData) {
      requestData = null;
    }

    // Send the request
    request.send(requestData);
  });
};


/***/ }),
/* 93 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var createError = __webpack_require__(94);

/**
 * Resolve or reject a Promise based on response status.
 *
 * @param {Function} resolve A function that resolves the promise.
 * @param {Function} reject A function that rejects the promise.
 * @param {object} response The response.
 */
module.exports = function settle(resolve, reject, response) {
  var validateStatus = response.config.validateStatus;
  if (!response.status || !validateStatus || validateStatus(response.status)) {
    resolve(response);
  } else {
    reject(createError(
      'Request failed with status code ' + response.status,
      response.config,
      null,
      response.request,
      response
    ));
  }
};


/***/ }),
/* 94 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var enhanceError = __webpack_require__(90);

/**
 * Create an Error with the specified message, config, error code, request and response.
 *
 * @param {string} message The error message.
 * @param {Object} config The config.
 * @param {string} [code] The error code (for example, 'ECONNABORTED').
 * @param {Object} [request] The request.
 * @param {Object} [response] The response.
 * @returns {Error} The created error.
 */
module.exports = function createError(message, config, code, request, response) {
  var error = new Error(message);
  return enhanceError(error, config, code, request, response);
};


/***/ }),
/* 95 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var utils = __webpack_require__(81);

module.exports = (
  utils.isStandardBrowserEnv() ?

  // Standard browser envs support document.cookie
    (function standardBrowserEnv() {
      return {
        write: function write(name, value, expires, path, domain, secure) {
          var cookie = [];
          cookie.push(name + '=' + encodeURIComponent(value));

          if (utils.isNumber(expires)) {
            cookie.push('expires=' + new Date(expires).toGMTString());
          }

          if (utils.isString(path)) {
            cookie.push('path=' + path);
          }

          if (utils.isString(domain)) {
            cookie.push('domain=' + domain);
          }

          if (secure === true) {
            cookie.push('secure');
          }

          document.cookie = cookie.join('; ');
        },

        read: function read(name) {
          var match = document.cookie.match(new RegExp('(^|;\\s*)(' + name + ')=([^;]*)'));
          return (match ? decodeURIComponent(match[3]) : null);
        },

        remove: function remove(name) {
          this.write(name, '', Date.now() - 86400000);
        }
      };
    })() :

  // Non standard browser env (web workers, react-native) lack needed support.
    (function nonStandardBrowserEnv() {
      return {
        write: function write() {},
        read: function read() { return null; },
        remove: function remove() {}
      };
    })()
);


/***/ }),
/* 96 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var isAbsoluteURL = __webpack_require__(97);
var combineURLs = __webpack_require__(98);

/**
 * Creates a new URL by combining the baseURL with the requestedURL,
 * only when the requestedURL is not already an absolute URL.
 * If the requestURL is absolute, this function returns the requestedURL untouched.
 *
 * @param {string} baseURL The base URL
 * @param {string} requestedURL Absolute or relative URL to combine
 * @returns {string} The combined full path
 */
module.exports = function buildFullPath(baseURL, requestedURL) {
  if (baseURL && !isAbsoluteURL(requestedURL)) {
    return combineURLs(baseURL, requestedURL);
  }
  return requestedURL;
};


/***/ }),
/* 97 */
/***/ ((module) => {

"use strict";


/**
 * Determines whether the specified URL is absolute
 *
 * @param {string} url The URL to test
 * @returns {boolean} True if the specified URL is absolute, otherwise false
 */
module.exports = function isAbsoluteURL(url) {
  // A URL is considered absolute if it begins with "<scheme>://" or "//" (protocol-relative URL).
  // RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed
  // by any combination of letters, digits, plus, period, or hyphen.
  return /^([a-z][a-z\d+\-.]*:)?\/\//i.test(url);
};


/***/ }),
/* 98 */
/***/ ((module) => {

"use strict";


/**
 * Creates a new URL by combining the specified URLs
 *
 * @param {string} baseURL The base URL
 * @param {string} relativeURL The relative URL
 * @returns {string} The combined URL
 */
module.exports = function combineURLs(baseURL, relativeURL) {
  return relativeURL
    ? baseURL.replace(/\/+$/, '') + '/' + relativeURL.replace(/^\/+/, '')
    : baseURL;
};


/***/ }),
/* 99 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var utils = __webpack_require__(81);

// Headers whose duplicates are ignored by node
// c.f. https://nodejs.org/api/http.html#http_message_headers
var ignoreDuplicateOf = [
  'age', 'authorization', 'content-length', 'content-type', 'etag',
  'expires', 'from', 'host', 'if-modified-since', 'if-unmodified-since',
  'last-modified', 'location', 'max-forwards', 'proxy-authorization',
  'referer', 'retry-after', 'user-agent'
];

/**
 * Parse headers into an object
 *
 * ```
 * Date: Wed, 27 Aug 2014 08:58:49 GMT
 * Content-Type: application/json
 * Connection: keep-alive
 * Transfer-Encoding: chunked
 * ```
 *
 * @param {String} headers Headers needing to be parsed
 * @returns {Object} Headers parsed into an object
 */
module.exports = function parseHeaders(headers) {
  var parsed = {};
  var key;
  var val;
  var i;

  if (!headers) { return parsed; }

  utils.forEach(headers.split('\n'), function parser(line) {
    i = line.indexOf(':');
    key = utils.trim(line.substr(0, i)).toLowerCase();
    val = utils.trim(line.substr(i + 1));

    if (key) {
      if (parsed[key] && ignoreDuplicateOf.indexOf(key) >= 0) {
        return;
      }
      if (key === 'set-cookie') {
        parsed[key] = (parsed[key] ? parsed[key] : []).concat([val]);
      } else {
        parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;
      }
    }
  });

  return parsed;
};


/***/ }),
/* 100 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var utils = __webpack_require__(81);

module.exports = (
  utils.isStandardBrowserEnv() ?

  // Standard browser envs have full support of the APIs needed to test
  // whether the request URL is of the same origin as current location.
    (function standardBrowserEnv() {
      var msie = /(msie|trident)/i.test(navigator.userAgent);
      var urlParsingNode = document.createElement('a');
      var originURL;

      /**
    * Parse a URL to discover it's components
    *
    * @param {String} url The URL to be parsed
    * @returns {Object}
    */
      function resolveURL(url) {
        var href = url;

        if (msie) {
        // IE needs attribute set twice to normalize properties
          urlParsingNode.setAttribute('href', href);
          href = urlParsingNode.href;
        }

        urlParsingNode.setAttribute('href', href);

        // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils
        return {
          href: urlParsingNode.href,
          protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',
          host: urlParsingNode.host,
          search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, '') : '',
          hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',
          hostname: urlParsingNode.hostname,
          port: urlParsingNode.port,
          pathname: (urlParsingNode.pathname.charAt(0) === '/') ?
            urlParsingNode.pathname :
            '/' + urlParsingNode.pathname
        };
      }

      originURL = resolveURL(window.location.href);

      /**
    * Determine if a URL shares the same origin as the current location
    *
    * @param {String} requestURL The URL to test
    * @returns {boolean} True if URL shares the same origin, otherwise false
    */
      return function isURLSameOrigin(requestURL) {
        var parsed = (utils.isString(requestURL)) ? resolveURL(requestURL) : requestURL;
        return (parsed.protocol === originURL.protocol &&
            parsed.host === originURL.host);
      };
    })() :

  // Non standard browser envs (web workers, react-native) lack needed support.
    (function nonStandardBrowserEnv() {
      return function isURLSameOrigin() {
        return true;
      };
    })()
);


/***/ }),
/* 101 */
/***/ ((module) => {

"use strict";


/**
 * A `Cancel` is an object that is thrown when an operation is canceled.
 *
 * @class
 * @param {string=} message The message.
 */
function Cancel(message) {
  this.message = message;
}

Cancel.prototype.toString = function toString() {
  return 'Cancel' + (this.message ? ': ' + this.message : '');
};

Cancel.prototype.__CANCEL__ = true;

module.exports = Cancel;


/***/ }),
/* 102 */
/***/ ((module) => {

"use strict";


module.exports = function isCancel(value) {
  return !!(value && value.__CANCEL__);
};


/***/ }),
/* 103 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var utils = __webpack_require__(81);

/**
 * Config-specific merge-function which creates a new config-object
 * by merging two configuration objects together.
 *
 * @param {Object} config1
 * @param {Object} config2
 * @returns {Object} New object resulting from merging config2 to config1
 */
module.exports = function mergeConfig(config1, config2) {
  // eslint-disable-next-line no-param-reassign
  config2 = config2 || {};
  var config = {};

  function getMergedValue(target, source) {
    if (utils.isPlainObject(target) && utils.isPlainObject(source)) {
      return utils.merge(target, source);
    } else if (utils.isPlainObject(source)) {
      return utils.merge({}, source);
    } else if (utils.isArray(source)) {
      return source.slice();
    }
    return source;
  }

  // eslint-disable-next-line consistent-return
  function mergeDeepProperties(prop) {
    if (!utils.isUndefined(config2[prop])) {
      return getMergedValue(config1[prop], config2[prop]);
    } else if (!utils.isUndefined(config1[prop])) {
      return getMergedValue(undefined, config1[prop]);
    }
  }

  // eslint-disable-next-line consistent-return
  function valueFromConfig2(prop) {
    if (!utils.isUndefined(config2[prop])) {
      return getMergedValue(undefined, config2[prop]);
    }
  }

  // eslint-disable-next-line consistent-return
  function defaultToConfig2(prop) {
    if (!utils.isUndefined(config2[prop])) {
      return getMergedValue(undefined, config2[prop]);
    } else if (!utils.isUndefined(config1[prop])) {
      return getMergedValue(undefined, config1[prop]);
    }
  }

  // eslint-disable-next-line consistent-return
  function mergeDirectKeys(prop) {
    if (prop in config2) {
      return getMergedValue(config1[prop], config2[prop]);
    } else if (prop in config1) {
      return getMergedValue(undefined, config1[prop]);
    }
  }

  var mergeMap = {
    'url': valueFromConfig2,
    'method': valueFromConfig2,
    'data': valueFromConfig2,
    'baseURL': defaultToConfig2,
    'transformRequest': defaultToConfig2,
    'transformResponse': defaultToConfig2,
    'paramsSerializer': defaultToConfig2,
    'timeout': defaultToConfig2,
    'timeoutMessage': defaultToConfig2,
    'withCredentials': defaultToConfig2,
    'adapter': defaultToConfig2,
    'responseType': defaultToConfig2,
    'xsrfCookieName': defaultToConfig2,
    'xsrfHeaderName': defaultToConfig2,
    'onUploadProgress': defaultToConfig2,
    'onDownloadProgress': defaultToConfig2,
    'decompress': defaultToConfig2,
    'maxContentLength': defaultToConfig2,
    'maxBodyLength': defaultToConfig2,
    'transport': defaultToConfig2,
    'httpAgent': defaultToConfig2,
    'httpsAgent': defaultToConfig2,
    'cancelToken': defaultToConfig2,
    'socketPath': defaultToConfig2,
    'responseEncoding': defaultToConfig2,
    'validateStatus': mergeDirectKeys
  };

  utils.forEach(Object.keys(config1).concat(Object.keys(config2)), function computeConfigValue(prop) {
    var merge = mergeMap[prop] || mergeDeepProperties;
    var configValue = merge(prop);
    (utils.isUndefined(configValue) && merge !== mergeDirectKeys) || (config[prop] = configValue);
  });

  return config;
};


/***/ }),
/* 104 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var VERSION = (__webpack_require__(105).version);

var validators = {};

// eslint-disable-next-line func-names
['object', 'boolean', 'number', 'function', 'string', 'symbol'].forEach(function(type, i) {
  validators[type] = function validator(thing) {
    return typeof thing === type || 'a' + (i < 1 ? 'n ' : ' ') + type;
  };
});

var deprecatedWarnings = {};

/**
 * Transitional option validator
 * @param {function|boolean?} validator - set to false if the transitional option has been removed
 * @param {string?} version - deprecated version / removed since version
 * @param {string?} message - some message with additional info
 * @returns {function}
 */
validators.transitional = function transitional(validator, version, message) {
  function formatMessage(opt, desc) {
    return '[Axios v' + VERSION + '] Transitional option \'' + opt + '\'' + desc + (message ? '. ' + message : '');
  }

  // eslint-disable-next-line func-names
  return function(value, opt, opts) {
    if (validator === false) {
      throw new Error(formatMessage(opt, ' has been removed' + (version ? ' in ' + version : '')));
    }

    if (version && !deprecatedWarnings[opt]) {
      deprecatedWarnings[opt] = true;
      // eslint-disable-next-line no-console
      console.warn(
        formatMessage(
          opt,
          ' has been deprecated since v' + version + ' and will be removed in the near future'
        )
      );
    }

    return validator ? validator(value, opt, opts) : true;
  };
};

/**
 * Assert object's properties type
 * @param {object} options
 * @param {object} schema
 * @param {boolean?} allowUnknown
 */

function assertOptions(options, schema, allowUnknown) {
  if (typeof options !== 'object') {
    throw new TypeError('options must be an object');
  }
  var keys = Object.keys(options);
  var i = keys.length;
  while (i-- > 0) {
    var opt = keys[i];
    var validator = schema[opt];
    if (validator) {
      var value = options[opt];
      var result = value === undefined || validator(value, opt, options);
      if (result !== true) {
        throw new TypeError('option ' + opt + ' must be ' + result);
      }
      continue;
    }
    if (allowUnknown !== true) {
      throw Error('Unknown option ' + opt);
    }
  }
}

module.exports = {
  assertOptions: assertOptions,
  validators: validators
};


/***/ }),
/* 105 */
/***/ ((module) => {

module.exports = {
  "version": "0.26.1"
};

/***/ }),
/* 106 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var Cancel = __webpack_require__(101);

/**
 * A `CancelToken` is an object that can be used to request cancellation of an operation.
 *
 * @class
 * @param {Function} executor The executor function.
 */
function CancelToken(executor) {
  if (typeof executor !== 'function') {
    throw new TypeError('executor must be a function.');
  }

  var resolvePromise;

  this.promise = new Promise(function promiseExecutor(resolve) {
    resolvePromise = resolve;
  });

  var token = this;

  // eslint-disable-next-line func-names
  this.promise.then(function(cancel) {
    if (!token._listeners) return;

    var i;
    var l = token._listeners.length;

    for (i = 0; i < l; i++) {
      token._listeners[i](cancel);
    }
    token._listeners = null;
  });

  // eslint-disable-next-line func-names
  this.promise.then = function(onfulfilled) {
    var _resolve;
    // eslint-disable-next-line func-names
    var promise = new Promise(function(resolve) {
      token.subscribe(resolve);
      _resolve = resolve;
    }).then(onfulfilled);

    promise.cancel = function reject() {
      token.unsubscribe(_resolve);
    };

    return promise;
  };

  executor(function cancel(message) {
    if (token.reason) {
      // Cancellation has already been requested
      return;
    }

    token.reason = new Cancel(message);
    resolvePromise(token.reason);
  });
}

/**
 * Throws a `Cancel` if cancellation has been requested.
 */
CancelToken.prototype.throwIfRequested = function throwIfRequested() {
  if (this.reason) {
    throw this.reason;
  }
};

/**
 * Subscribe to the cancel signal
 */

CancelToken.prototype.subscribe = function subscribe(listener) {
  if (this.reason) {
    listener(this.reason);
    return;
  }

  if (this._listeners) {
    this._listeners.push(listener);
  } else {
    this._listeners = [listener];
  }
};

/**
 * Unsubscribe from the cancel signal
 */

CancelToken.prototype.unsubscribe = function unsubscribe(listener) {
  if (!this._listeners) {
    return;
  }
  var index = this._listeners.indexOf(listener);
  if (index !== -1) {
    this._listeners.splice(index, 1);
  }
};

/**
 * Returns an object that contains a new `CancelToken` and a function that, when called,
 * cancels the `CancelToken`.
 */
CancelToken.source = function source() {
  var cancel;
  var token = new CancelToken(function executor(c) {
    cancel = c;
  });
  return {
    token: token,
    cancel: cancel
  };
};

module.exports = CancelToken;


/***/ }),
/* 107 */
/***/ ((module) => {

"use strict";


/**
 * Syntactic sugar for invoking a function and expanding an array for arguments.
 *
 * Common use case would be to use `Function.prototype.apply`.
 *
 *  ```js
 *  function f(x, y, z) {}
 *  var args = [1, 2, 3];
 *  f.apply(null, args);
 *  ```
 *
 * With `spread` this example can be re-written.
 *
 *  ```js
 *  spread(function(x, y, z) {})([1, 2, 3]);
 *  ```
 *
 * @param {Function} callback
 * @returns {Function}
 */
module.exports = function spread(callback) {
  return function wrap(arr) {
    return callback.apply(null, arr);
  };
};


/***/ }),
/* 108 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var utils = __webpack_require__(81);

/**
 * Determines whether the payload is an error thrown by Axios
 *
 * @param {*} payload The value to test
 * @returns {boolean} True if the payload is an error thrown by Axios, otherwise false
 */
module.exports = function isAxiosError(payload) {
  return utils.isObject(payload) && (payload.isAxiosError === true);
};


/***/ }),
/* 109 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "defaultOreIdServiceUrl": () => (/* binding */ defaultOreIdServiceUrl),
/* harmony export */   "externalWalletsNotImplemented": () => (/* binding */ externalWalletsNotImplemented),
/* harmony export */   "publicApiEndpoints": () => (/* binding */ publicApiEndpoints),
/* harmony export */   "version": () => (/* binding */ version)
/* harmony export */ });
/* harmony import */ var _models__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(5);
/* harmony import */ var _version_json__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(110);


var externalWalletsNotImplemented = ['metro'];
var defaultOreIdServiceUrl = 'https://service.oreid.io';
var version = _version_json__WEBPACK_IMPORTED_MODULE_1__.version;

var publicApiEndpoints = [_models__WEBPACK_IMPORTED_MODULE_0__.ApiEndpoint.LoginUserWithToken, _models__WEBPACK_IMPORTED_MODULE_0__.ApiEndpoint.NewUserWithToken]; // api endpoints that dont require authorization

/***/ }),
/* 110 */
/***/ ((module) => {

"use strict";
module.exports = {"version":"4.7.2"};

/***/ }),
/* 111 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Transaction)
/* harmony export */ });
/* harmony import */ var _models__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(5);
/* harmony import */ var _transit_TransitHelper__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(41);
/* harmony import */ var _api__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(2);
/* harmony import */ var _core_urlGenerators__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(40);
/* harmony import */ var _utils_helpers__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(17);
/* harmony import */ var _ual_UalHelper__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(72);
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, $Symbol = "function" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, ""); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return generator._invoke = function (innerFn, self, context) { var state = "suspendedStart"; return function (method, arg) { if ("executing" === state) throw new Error("Generator is already running"); if ("completed" === state) { if ("throw" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) { if ("suspendedStart" === state) throw state = "completed", context.arg; context.dispatchException(context.arg); } else "return" === context.method && context.abrupt("return", context.arg); state = "executing"; var record = tryCatch(innerFn, self, context); if ("normal" === record.type) { if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg); } }; }(innerFn, self, context), generator; } function tryCatch(fn, obj, arg) { try { return { type: "normal", arg: fn.call(obj, arg) }; } catch (err) { return { type: "throw", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { ["next", "throw", "return"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if ("throw" !== record.type) { var result = record.arg, value = result.value; return value && "object" == _typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke("next", value, resolve, reject); }, function (err) { invoke("throw", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke("throw", error, resolve, reject); }); } reject(record.arg); } var previousPromise; this._invoke = function (method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); }; } function maybeInvokeDelegate(delegate, context) { var method = delegate.iterator[context.method]; if (undefined === method) { if (context.delegate = null, "throw" === context.method) { if (delegate.iterator["return"] && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method)) return ContinueSentinel; context.method = "throw", context.arg = new TypeError("The iterator does not provide a 'throw' method"); } return ContinueSentinel; } var record = tryCatch(method, delegate.iterator, context.arg); if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = "normal", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: "root" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if ("function" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, "constructor", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) { var ctor = "function" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, "toString", function () { return "[object Generator]"; }), exports.keys = function (object) { var keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if ("throw" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if ("root" === entry.tryLoc) return handle("end"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error("try statement without catch or finally"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if ("throw" === record.type) throw record.arg; return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, "catch": function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if ("throw" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, "next" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }








var Transaction = /*#__PURE__*/function () {
  function Transaction(args) {
    _classCallCheck(this, Transaction);

    this._oreIdContext = args.oreIdContext;
    this._user = args.user;
    this.assertValidTransactionAndSetData(args.data);
    this._transitHelper = new _transit_TransitHelper__WEBPACK_IMPORTED_MODULE_1__["default"]({
      oreIdContext: this._oreIdContext,
      user: this._user
    });
    this._ualHelper = new _ual_UalHelper__WEBPACK_IMPORTED_MODULE_5__["default"]({
      oreIdContext: this._oreIdContext,
      user: this._user
    });
  }

  _createClass(Transaction, [{
    key: "data",
    get: function get() {
      return this._data;
    }
    /** ensure all required parameters are provided */

  }, {
    key: "assertValidTransactionAndSetData",
    value: function assertValidTransactionAndSetData(createTransactionData) {
      var _ref = createTransactionData || {},
          chainNetwork = _ref.chainNetwork,
          transaction = _ref.transaction,
          signedTransaction = _ref.signedTransaction;

      var missingFields = [];
      var validationIssues = [];

      if (!this._user || !this._user.hasData) {
        throw new Error('Make sure that a user has been authenticated and that youve called user.getData()');
      } // required fields


      if (!chainNetwork) missingFields.push('chainNetwork');
      if (!transaction && !signedTransaction) missingFields.push('transaction OR signedTransaction'); // validaton rules

      if (!this._user.accountName) validationIssues.push('Transaction Data error - Expecting a user.accountName - is the user logged-in in?');
      if (transaction && signedTransaction) validationIssues.push('Only provide one: transaction OR signedTransaction'); // TODO: call this.validate()
      // transaction OR signedTransaction - check for valid JSON object

      if (!_utils_helpers__WEBPACK_IMPORTED_MODULE_4__["default"].isNullOrEmpty(missingFields)) {
        throw new Error("Transaction parameter(s) missing: ".concat(missingFields.join(', ')));
      }

      if (!_utils_helpers__WEBPACK_IMPORTED_MODULE_4__["default"].isNullOrEmpty(validationIssues)) {
        throw new Error("Transaction parameter error: ".concat(validationIssues.join(', ')));
      }

      this.setTransactionData(createTransactionData);
    }
  }, {
    key: "setTransactionData",
    value: function setTransactionData(createTransactionData) {
      // account param is set to logged-in user
      this._data = _objectSpread({
        account: this._user.accountName
      }, createTransactionData); // set encoded transaction properties

      if (createTransactionData !== null && createTransactionData !== void 0 && createTransactionData.transaction) this._data.encodedTransaction = _utils_helpers__WEBPACK_IMPORTED_MODULE_4__["default"].base64Encode(JSON.stringify(createTransactionData.transaction));
      if (createTransactionData !== null && createTransactionData !== void 0 && createTransactionData.signedTransaction) this._data.encodedSignedTransaction = _utils_helpers__WEBPACK_IMPORTED_MODULE_4__["default"].base64Encode(JSON.stringify(createTransactionData.signedTransaction));
    } // TODO: Consider providing property to explain that account/permission is in external wallet so developer can easily check
    // TODO: Consider web-widget automatically handling pop-up of wallet when sign is called

    /** ensure that the chainNetwork and chainAccount for the transaction are in the user's wallet
     *  NOTE: This check is not required for a user signing with a wallet app - Since the account may be in the wallet and not yet added to OreId
     */

  }, {
    key: "assertTransactionAccountValidForUser",
    value: function assertTransactionAccountValidForUser() {
      var _this$_user, _this$_user$data, _this$_user$data$chai, _chainAccountsInWalle, _chainAccountsInWalle2, _chainAccountsInWalle3;

      var _this$_data = this._data,
          chainAccount = _this$_data.chainAccount,
          chainNetwork = _this$_data.chainNetwork;
      var accountName = this._user.accountName;
      var chainAccountsInWallet = (_this$_user = this._user) === null || _this$_user === void 0 ? void 0 : (_this$_user$data = _this$_user.data) === null || _this$_user$data === void 0 ? void 0 : (_this$_user$data$chai = _this$_user$data.chainAccounts) === null || _this$_user$data$chai === void 0 ? void 0 : _this$_user$data$chai.find(function (perm) {
        return perm.chainNetwork === chainNetwork && perm.chainAccount === chainAccount;
      });
      var allPermissionsExternal = chainAccountsInWallet === null || chainAccountsInWallet === void 0 ? void 0 : (_chainAccountsInWalle = chainAccountsInWallet.permissions) === null || _chainAccountsInWalle === void 0 ? void 0 : _chainAccountsInWalle.every(function (p) {
        return p.privateKeyStoredExterally === true;
      });
      var externalWalletType = chainAccountsInWallet === null || chainAccountsInWallet === void 0 ? void 0 : (_chainAccountsInWalle2 = chainAccountsInWallet.permissions) === null || _chainAccountsInWalle2 === void 0 ? void 0 : (_chainAccountsInWalle3 = _chainAccountsInWalle2.find(function (p) {
        return p.privateKeyStoredExterally === true;
      })) === null || _chainAccountsInWalle3 === void 0 ? void 0 : _chainAccountsInWalle3.externalWalletType;

      if (!chainAccountsInWallet) {
        throw new Error("Can't find a chainAccount: ".concat(chainAccount, " for chainNetwork: ").concat(chainNetwork, " in user's oreId account: ").concat(accountName));
      }

      if (allPermissionsExternal) {
        throw new Error("ChainAccount: ".concat(chainAccount, " for chainNetwork: ").concat(chainNetwork, " appears to be in a wallet app (type: ").concat(externalWalletType, ") - use signWithWallet() to sign"));
      }
    } // TODO: check user.chainAccounts that

    /** validates that transaction is well-formed for the blockcahin
     * Returns array of errors
     */

  }, {
    key: "validate",
    value: function () {
      var _validate = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
        return _regeneratorRuntime().wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                throw new Error('Not Implemented');

              case 1:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));

      function validate() {
        return _validate.apply(this, arguments);
      }

      return validate;
    }() // TODO: add depricated

    /**
     * Returns a url to redirect the user's browser to - to sign transaction using OREID web interface
     */

  }, {
    key: "getSignUrl",
    value: function () {
      var _getSignUrl = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {
        var transactionData, signCallbackUrl, signUrl;
        return _regeneratorRuntime().wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                this.assertTransactionAccountValidForUser();
                transactionData = this.data;
                signCallbackUrl = this._oreIdContext.options.signCallbackUrl; // eslint-disable-next-line no-param-reassign

                if (!(transactionData !== null && transactionData !== void 0 && transactionData.signOptions)) transactionData.signOptions = {}; // eslint-disable-next-line no-param-reassign

                transactionData.signOptions.callbackUrl = signCallbackUrl;
                _context2.next = 7;
                return (0,_core_urlGenerators__WEBPACK_IMPORTED_MODULE_3__.getOreIdSignUrl)(this._oreIdContext, transactionData);

              case 7:
                signUrl = _context2.sent;
                return _context2.abrupt("return", {
                  signUrl: signUrl,
                  errors: null
                });

              case 9:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function getSignUrl() {
        return _getSignUrl.apply(this, arguments);
      }

      return getSignUrl;
    }()
    /**
     * Whether the provided transaction (or signedTransaction) can be autoSigned via api (without user interaction)
     * Requires an apiKey with the autoSign right
     * Returns: true if transaction can be signed using tansaction.sign()
     * */

  }, {
    key: "checkCanAutoSign",
    value: function () {
      var _checkCanAutoSign = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {
        var autoSignCredentialsExist, _yield$callApiCanAuto;

        return _regeneratorRuntime().wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                _context3.prev = 0;
                (0,_api__WEBPACK_IMPORTED_MODULE_2__.assertHasApiKey)(this._oreIdContext, _models__WEBPACK_IMPORTED_MODULE_0__.ApiKeyUsedFor.AutoSigning, '') // this will throw if we don't have an api key with the right rights
                ;
                _context3.next = 4;
                return (0,_api__WEBPACK_IMPORTED_MODULE_2__.callApiCanAutosignTransaction)(this._oreIdContext, this._data);

              case 4:
                _yield$callApiCanAuto = _context3.sent;
                autoSignCredentialsExist = _yield$callApiCanAuto.autoSignCredentialsExist;
                _context3.next = 11;
                break;

              case 8:
                _context3.prev = 8;
                _context3.t0 = _context3["catch"](0);
                return _context3.abrupt("return", false);

              case 11:
                return _context3.abrupt("return", autoSignCredentialsExist);

              case 12:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this, [[0, 8]]);
      }));

      function checkCanAutoSign() {
        return _checkCanAutoSign.apply(this, arguments);
      }

      return checkCanAutoSign;
    }()
    /** Attempt to sign a transaction without user interaction
     *  Expects user to have previously approved autoSign for transaction type and it hasn't expired
     *  Call callApiCanAutosignTransaction() first to confirm that this transaction can be autoSigned before attempting this call
     */

  }, {
    key: "autoSign",
    value: function () {
      var _autoSign = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {
        var transactionData, _yield$callApiSignTra, processId, signedTransaction, transactionId, errorCode, errorMessage;

        return _regeneratorRuntime().wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                this.assertTransactionAccountValidForUser();
                transactionData = this.data;
                _context4.next = 4;
                return (0,_api__WEBPACK_IMPORTED_MODULE_2__.callApiSignTransaction)(this._oreIdContext, {
                  transactionData: transactionData,
                  autoSign: true
                });

              case 4:
                _yield$callApiSignTra = _context4.sent;
                processId = _yield$callApiSignTra.processId;
                signedTransaction = _yield$callApiSignTra.signedTransaction;
                transactionId = _yield$callApiSignTra.transactionId;
                errorCode = _yield$callApiSignTra.errorCode;
                errorMessage = _yield$callApiSignTra.errorMessage;

                if (!(errorCode || errorMessage)) {
                  _context4.next = 12;
                  break;
                }

                throw new Error(errorMessage);

              case 12:
                return _context4.abrupt("return", {
                  processId: processId,
                  signedTransaction: signedTransaction,
                  transactionId: transactionId
                });

              case 13:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      function autoSign() {
        return _autoSign.apply(this, arguments);
      }

      return autoSign;
    }()
    /** Sign a transaction without user interaction
     *  Requires a user's wallet password or encrypted password (a 'custodial' account managed by you)
     *  Requires an apiKey with the proxySign right
     */

  }, {
    key: "signWithPassword",
    value: function () {
      var _signWithPassword = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(userPassword, userPasswordEncrypted) {
        var transactionData, _yield$callApiCustodi, processId, signedTransaction, transactionId, errorCode, errorMessage;

        return _regeneratorRuntime().wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                this.assertTransactionAccountValidForUser();
                transactionData = this.data;
                if (!(transactionData !== null && transactionData !== void 0 && transactionData.signOptions)) transactionData.signOptions = {};
                if (userPassword) transactionData.signOptions.userPassword = userPassword;
                if (userPasswordEncrypted) transactionData.signOptions.userPasswordEncrypted = userPasswordEncrypted;

                if (!(transactionData.signOptions.userPassword && transactionData.signOptions.userPasswordEncrypted)) {
                  _context5.next = 7;
                  break;
                }

                throw new Error('Provide either a userPassword OR userPasswordEncrypted param. Both were provided.');

              case 7:
                _context5.next = 9;
                return (0,_api__WEBPACK_IMPORTED_MODULE_2__.callApiCustodialSignTransaction)(this._oreIdContext, {
                  transactionData: transactionData,
                  autoSign: false
                });

              case 9:
                _yield$callApiCustodi = _context5.sent;
                processId = _yield$callApiCustodi.processId;
                signedTransaction = _yield$callApiCustodi.signedTransaction;
                transactionId = _yield$callApiCustodi.transactionId;
                errorCode = _yield$callApiCustodi.errorCode;
                errorMessage = _yield$callApiCustodi.errorMessage;

                if (!(errorCode || errorMessage)) {
                  _context5.next = 17;
                  break;
                }

                throw new Error(errorMessage);

              case 17:
                return _context5.abrupt("return", {
                  processId: processId,
                  signedTransaction: signedTransaction,
                  transactionId: transactionId
                });

              case 18:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      function signWithPassword(_x, _x2) {
        return _signWithPassword.apply(this, arguments);
      }

      return signWithPassword;
    }()
    /** Sign with a supported blockchain wallet via Transit provider */

  }, {
    key: "signWithWallet",
    value: function () {
      var _signWithWallet = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(walletType) {
        var transactionData, signResult;
        return _regeneratorRuntime().wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                transactionData = this.data;
                _context6.next = 3;
                return this._oreIdContext.walletHelper.signWithWallet(walletType, transactionData);

              case 3:
                signResult = _context6.sent;
                return _context6.abrupt("return", signResult);

              case 5:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6, this);
      }));

      function signWithWallet(_x3) {
        return _signWithWallet.apply(this, arguments);
      }

      return signWithWallet;
    }()
  }]);

  return Transaction;
}();



/***/ }),
/* 112 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "appendHmacToUrl": () => (/* binding */ appendHmacToUrl),
/* harmony export */   "generateHmac": () => (/* binding */ generateHmac),
/* harmony export */   "generateHmacWithApiKeyOrProxyServer": () => (/* binding */ generateHmacWithApiKeyOrProxyServer)
/* harmony export */ });
/* harmony import */ var crypto_js_hmac_sha256__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(113);
/* harmony import */ var crypto_js_hmac_sha256__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(crypto_js_hmac_sha256__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(79);
/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(axios__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(17);
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, $Symbol = "function" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, ""); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return generator._invoke = function (innerFn, self, context) { var state = "suspendedStart"; return function (method, arg) { if ("executing" === state) throw new Error("Generator is already running"); if ("completed" === state) { if ("throw" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) { if ("suspendedStart" === state) throw state = "completed", context.arg; context.dispatchException(context.arg); } else "return" === context.method && context.abrupt("return", context.arg); state = "executing"; var record = tryCatch(innerFn, self, context); if ("normal" === record.type) { if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg); } }; }(innerFn, self, context), generator; } function tryCatch(fn, obj, arg) { try { return { type: "normal", arg: fn.call(obj, arg) }; } catch (err) { return { type: "throw", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { ["next", "throw", "return"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if ("throw" !== record.type) { var result = record.arg, value = result.value; return value && "object" == _typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke("next", value, resolve, reject); }, function (err) { invoke("throw", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke("throw", error, resolve, reject); }); } reject(record.arg); } var previousPromise; this._invoke = function (method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); }; } function maybeInvokeDelegate(delegate, context) { var method = delegate.iterator[context.method]; if (undefined === method) { if (context.delegate = null, "throw" === context.method) { if (delegate.iterator["return"] && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method)) return ContinueSentinel; context.method = "throw", context.arg = new TypeError("The iterator does not provide a 'throw' method"); } return ContinueSentinel; } var record = tryCatch(method, delegate.iterator, context.arg); if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = "normal", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: "root" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if ("function" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, "constructor", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) { var ctor = "function" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, "toString", function () { return "[object Generator]"; }), exports.keys = function (object) { var keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if ("throw" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if ("root" === entry.tryLoc) return handle("end"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error("try statement without catch or finally"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if ("throw" === record.type) throw record.arg; return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, "catch": function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if ("throw" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, "next" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }




function generateHmac(secret, data) {
  var hmac = crypto_js_hmac_sha256__WEBPACK_IMPORTED_MODULE_0___default()(data, secret);
  return hmac.toString();
}
/** Generate HMAC for data string
 *  data param can be stringified object
 *  If apiKey is not provided, expects useProxyServer:true and a proxy server to be available to generate the hmac
 *  Expects proxyserver /oreid/hmac to host an endpoint to sign with the apiKey and return the hmac
 */

function generateHmacWithApiKeyOrProxyServer(_x, _x2, _x3) {
  return _generateHmacWithApiKeyOrProxyServer.apply(this, arguments);
}
/** Generate HMAC for url string and append it to end or url e.g. http:/nnnnnn&hmac=xxx */

function _generateHmacWithApiKeyOrProxyServer() {
  _generateHmacWithApiKeyOrProxyServer = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(useProxyServer, apiKey, data) {
    var hmac, _response$data, response, error;

    return _regeneratorRuntime().wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            if (!(!useProxyServer && _helpers__WEBPACK_IMPORTED_MODULE_2__["default"].isNullOrEmpty(apiKey))) {
              _context.next = 2;
              break;
            }

            throw new Error('Cant generate hmac. apiKey missing or empty - its required if not using a proxy server');

          case 2:
            if (!useProxyServer) {
              _context.next = 16;
              break;
            }

            _context.prev = 3;
            _context.next = 6;
            return axios__WEBPACK_IMPORTED_MODULE_1___default().post('/oreid/hmac', JSON.stringify({
              data: data
            }), {
              headers: {
                'Content-Type': 'application/json'
              }
            });

          case 6:
            response = _context.sent;
            hmac = response === null || response === void 0 ? void 0 : (_response$data = response.data) === null || _response$data === void 0 ? void 0 : _response$data.hmac;
            _context.next = 14;
            break;

          case 10:
            _context.prev = 10;
            _context.t0 = _context["catch"](3);
            error = this.getErrorFromAxiosError(_context.t0);
            throw error;

          case 14:
            _context.next = 17;
            break;

          case 16:
            hmac = generateHmac(apiKey, data);

          case 17:
            return _context.abrupt("return", hmac);

          case 18:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, this, [[3, 10]]);
  }));
  return _generateHmacWithApiKeyOrProxyServer.apply(this, arguments);
}

function appendHmacToUrl(_x4, _x5, _x6) {
  return _appendHmacToUrl.apply(this, arguments);
}

function _appendHmacToUrl() {
  _appendHmacToUrl = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(useProxyServer, apiKey, url) {
    var hmac, urlEncodedHmac;
    return _regeneratorRuntime().wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            if (!_helpers__WEBPACK_IMPORTED_MODULE_2__["default"].isNullOrEmpty(url)) {
              _context2.next = 2;
              break;
            }

            throw new Error('Cant generate hmac. url missing or empty');

          case 2:
            _context2.next = 4;
            return generateHmacWithApiKeyOrProxyServer(useProxyServer, apiKey, url);

          case 4:
            hmac = _context2.sent;
            urlEncodedHmac = encodeURIComponent(hmac); // correct hmac already in place

            if (!url.includes("&hmac=".concat(urlEncodedHmac))) {
              _context2.next = 8;
              break;
            }

            return _context2.abrupt("return", url);

          case 8:
            return _context2.abrupt("return", "".concat(url, "&hmac=").concat(urlEncodedHmac));

          case 9:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));
  return _appendHmacToUrl.apply(this, arguments);
}

/***/ }),
/* 113 */
/***/ (function(module, exports, __webpack_require__) {

;(function (root, factory, undef) {
	if (true) {
		// CommonJS
		module.exports = exports = factory(__webpack_require__(114), __webpack_require__(116), __webpack_require__(117));
	}
	else {}
}(this, function (CryptoJS) {

	return CryptoJS.HmacSHA256;

}));

/***/ }),
/* 114 */
/***/ (function(module, exports, __webpack_require__) {

;(function (root, factory) {
	if (true) {
		// CommonJS
		module.exports = exports = factory();
	}
	else {}
}(this, function () {

	/*globals window, global, require*/

	/**
	 * CryptoJS core components.
	 */
	var CryptoJS = CryptoJS || (function (Math, undefined) {

	    var crypto;

	    // Native crypto from window (Browser)
	    if (typeof window !== 'undefined' && window.crypto) {
	        crypto = window.crypto;
	    }

	    // Native crypto in web worker (Browser)
	    if (typeof self !== 'undefined' && self.crypto) {
	        crypto = self.crypto;
	    }

	    // Native crypto from worker
	    if (typeof globalThis !== 'undefined' && globalThis.crypto) {
	        crypto = globalThis.crypto;
	    }

	    // Native (experimental IE 11) crypto from window (Browser)
	    if (!crypto && typeof window !== 'undefined' && window.msCrypto) {
	        crypto = window.msCrypto;
	    }

	    // Native crypto from global (NodeJS)
	    if (!crypto && typeof __webpack_require__.g !== 'undefined' && __webpack_require__.g.crypto) {
	        crypto = __webpack_require__.g.crypto;
	    }

	    // Native crypto import via require (NodeJS)
	    if (!crypto && "function" === 'function') {
	        try {
	            crypto = __webpack_require__(115);
	        } catch (err) {}
	    }

	    /*
	     * Cryptographically secure pseudorandom number generator
	     *
	     * As Math.random() is cryptographically not safe to use
	     */
	    var cryptoSecureRandomInt = function () {
	        if (crypto) {
	            // Use getRandomValues method (Browser)
	            if (typeof crypto.getRandomValues === 'function') {
	                try {
	                    return crypto.getRandomValues(new Uint32Array(1))[0];
	                } catch (err) {}
	            }

	            // Use randomBytes method (NodeJS)
	            if (typeof crypto.randomBytes === 'function') {
	                try {
	                    return crypto.randomBytes(4).readInt32LE();
	                } catch (err) {}
	            }
	        }

	        throw new Error('Native crypto module could not be used to get secure random number.');
	    };

	    /*
	     * Local polyfill of Object.create

	     */
	    var create = Object.create || (function () {
	        function F() {}

	        return function (obj) {
	            var subtype;

	            F.prototype = obj;

	            subtype = new F();

	            F.prototype = null;

	            return subtype;
	        };
	    }());

	    /**
	     * CryptoJS namespace.
	     */
	    var C = {};

	    /**
	     * Library namespace.
	     */
	    var C_lib = C.lib = {};

	    /**
	     * Base object for prototypal inheritance.
	     */
	    var Base = C_lib.Base = (function () {


	        return {
	            /**
	             * Creates a new object that inherits from this object.
	             *
	             * @param {Object} overrides Properties to copy into the new object.
	             *
	             * @return {Object} The new object.
	             *
	             * @static
	             *
	             * @example
	             *
	             *     var MyType = CryptoJS.lib.Base.extend({
	             *         field: 'value',
	             *
	             *         method: function () {
	             *         }
	             *     });
	             */
	            extend: function (overrides) {
	                // Spawn
	                var subtype = create(this);

	                // Augment
	                if (overrides) {
	                    subtype.mixIn(overrides);
	                }

	                // Create default initializer
	                if (!subtype.hasOwnProperty('init') || this.init === subtype.init) {
	                    subtype.init = function () {
	                        subtype.$super.init.apply(this, arguments);
	                    };
	                }

	                // Initializer's prototype is the subtype object
	                subtype.init.prototype = subtype;

	                // Reference supertype
	                subtype.$super = this;

	                return subtype;
	            },

	            /**
	             * Extends this object and runs the init method.
	             * Arguments to create() will be passed to init().
	             *
	             * @return {Object} The new object.
	             *
	             * @static
	             *
	             * @example
	             *
	             *     var instance = MyType.create();
	             */
	            create: function () {
	                var instance = this.extend();
	                instance.init.apply(instance, arguments);

	                return instance;
	            },

	            /**
	             * Initializes a newly created object.
	             * Override this method to add some logic when your objects are created.
	             *
	             * @example
	             *
	             *     var MyType = CryptoJS.lib.Base.extend({
	             *         init: function () {
	             *             // ...
	             *         }
	             *     });
	             */
	            init: function () {
	            },

	            /**
	             * Copies properties into this object.
	             *
	             * @param {Object} properties The properties to mix in.
	             *
	             * @example
	             *
	             *     MyType.mixIn({
	             *         field: 'value'
	             *     });
	             */
	            mixIn: function (properties) {
	                for (var propertyName in properties) {
	                    if (properties.hasOwnProperty(propertyName)) {
	                        this[propertyName] = properties[propertyName];
	                    }
	                }

	                // IE won't copy toString using the loop above
	                if (properties.hasOwnProperty('toString')) {
	                    this.toString = properties.toString;
	                }
	            },

	            /**
	             * Creates a copy of this object.
	             *
	             * @return {Object} The clone.
	             *
	             * @example
	             *
	             *     var clone = instance.clone();
	             */
	            clone: function () {
	                return this.init.prototype.extend(this);
	            }
	        };
	    }());

	    /**
	     * An array of 32-bit words.
	     *
	     * @property {Array} words The array of 32-bit words.
	     * @property {number} sigBytes The number of significant bytes in this word array.
	     */
	    var WordArray = C_lib.WordArray = Base.extend({
	        /**
	         * Initializes a newly created word array.
	         *
	         * @param {Array} words (Optional) An array of 32-bit words.
	         * @param {number} sigBytes (Optional) The number of significant bytes in the words.
	         *
	         * @example
	         *
	         *     var wordArray = CryptoJS.lib.WordArray.create();
	         *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607]);
	         *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607], 6);
	         */
	        init: function (words, sigBytes) {
	            words = this.words = words || [];

	            if (sigBytes != undefined) {
	                this.sigBytes = sigBytes;
	            } else {
	                this.sigBytes = words.length * 4;
	            }
	        },

	        /**
	         * Converts this word array to a string.
	         *
	         * @param {Encoder} encoder (Optional) The encoding strategy to use. Default: CryptoJS.enc.Hex
	         *
	         * @return {string} The stringified word array.
	         *
	         * @example
	         *
	         *     var string = wordArray + '';
	         *     var string = wordArray.toString();
	         *     var string = wordArray.toString(CryptoJS.enc.Utf8);
	         */
	        toString: function (encoder) {
	            return (encoder || Hex).stringify(this);
	        },

	        /**
	         * Concatenates a word array to this word array.
	         *
	         * @param {WordArray} wordArray The word array to append.
	         *
	         * @return {WordArray} This word array.
	         *
	         * @example
	         *
	         *     wordArray1.concat(wordArray2);
	         */
	        concat: function (wordArray) {
	            // Shortcuts
	            var thisWords = this.words;
	            var thatWords = wordArray.words;
	            var thisSigBytes = this.sigBytes;
	            var thatSigBytes = wordArray.sigBytes;

	            // Clamp excess bits
	            this.clamp();

	            // Concat
	            if (thisSigBytes % 4) {
	                // Copy one byte at a time
	                for (var i = 0; i < thatSigBytes; i++) {
	                    var thatByte = (thatWords[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;
	                    thisWords[(thisSigBytes + i) >>> 2] |= thatByte << (24 - ((thisSigBytes + i) % 4) * 8);
	                }
	            } else {
	                // Copy one word at a time
	                for (var j = 0; j < thatSigBytes; j += 4) {
	                    thisWords[(thisSigBytes + j) >>> 2] = thatWords[j >>> 2];
	                }
	            }
	            this.sigBytes += thatSigBytes;

	            // Chainable
	            return this;
	        },

	        /**
	         * Removes insignificant bits.
	         *
	         * @example
	         *
	         *     wordArray.clamp();
	         */
	        clamp: function () {
	            // Shortcuts
	            var words = this.words;
	            var sigBytes = this.sigBytes;

	            // Clamp
	            words[sigBytes >>> 2] &= 0xffffffff << (32 - (sigBytes % 4) * 8);
	            words.length = Math.ceil(sigBytes / 4);
	        },

	        /**
	         * Creates a copy of this word array.
	         *
	         * @return {WordArray} The clone.
	         *
	         * @example
	         *
	         *     var clone = wordArray.clone();
	         */
	        clone: function () {
	            var clone = Base.clone.call(this);
	            clone.words = this.words.slice(0);

	            return clone;
	        },

	        /**
	         * Creates a word array filled with random bytes.
	         *
	         * @param {number} nBytes The number of random bytes to generate.
	         *
	         * @return {WordArray} The random word array.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var wordArray = CryptoJS.lib.WordArray.random(16);
	         */
	        random: function (nBytes) {
	            var words = [];

	            for (var i = 0; i < nBytes; i += 4) {
	                words.push(cryptoSecureRandomInt());
	            }

	            return new WordArray.init(words, nBytes);
	        }
	    });

	    /**
	     * Encoder namespace.
	     */
	    var C_enc = C.enc = {};

	    /**
	     * Hex encoding strategy.
	     */
	    var Hex = C_enc.Hex = {
	        /**
	         * Converts a word array to a hex string.
	         *
	         * @param {WordArray} wordArray The word array.
	         *
	         * @return {string} The hex string.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var hexString = CryptoJS.enc.Hex.stringify(wordArray);
	         */
	        stringify: function (wordArray) {
	            // Shortcuts
	            var words = wordArray.words;
	            var sigBytes = wordArray.sigBytes;

	            // Convert
	            var hexChars = [];
	            for (var i = 0; i < sigBytes; i++) {
	                var bite = (words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;
	                hexChars.push((bite >>> 4).toString(16));
	                hexChars.push((bite & 0x0f).toString(16));
	            }

	            return hexChars.join('');
	        },

	        /**
	         * Converts a hex string to a word array.
	         *
	         * @param {string} hexStr The hex string.
	         *
	         * @return {WordArray} The word array.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var wordArray = CryptoJS.enc.Hex.parse(hexString);
	         */
	        parse: function (hexStr) {
	            // Shortcut
	            var hexStrLength = hexStr.length;

	            // Convert
	            var words = [];
	            for (var i = 0; i < hexStrLength; i += 2) {
	                words[i >>> 3] |= parseInt(hexStr.substr(i, 2), 16) << (24 - (i % 8) * 4);
	            }

	            return new WordArray.init(words, hexStrLength / 2);
	        }
	    };

	    /**
	     * Latin1 encoding strategy.
	     */
	    var Latin1 = C_enc.Latin1 = {
	        /**
	         * Converts a word array to a Latin1 string.
	         *
	         * @param {WordArray} wordArray The word array.
	         *
	         * @return {string} The Latin1 string.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var latin1String = CryptoJS.enc.Latin1.stringify(wordArray);
	         */
	        stringify: function (wordArray) {
	            // Shortcuts
	            var words = wordArray.words;
	            var sigBytes = wordArray.sigBytes;

	            // Convert
	            var latin1Chars = [];
	            for (var i = 0; i < sigBytes; i++) {
	                var bite = (words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;
	                latin1Chars.push(String.fromCharCode(bite));
	            }

	            return latin1Chars.join('');
	        },

	        /**
	         * Converts a Latin1 string to a word array.
	         *
	         * @param {string} latin1Str The Latin1 string.
	         *
	         * @return {WordArray} The word array.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var wordArray = CryptoJS.enc.Latin1.parse(latin1String);
	         */
	        parse: function (latin1Str) {
	            // Shortcut
	            var latin1StrLength = latin1Str.length;

	            // Convert
	            var words = [];
	            for (var i = 0; i < latin1StrLength; i++) {
	                words[i >>> 2] |= (latin1Str.charCodeAt(i) & 0xff) << (24 - (i % 4) * 8);
	            }

	            return new WordArray.init(words, latin1StrLength);
	        }
	    };

	    /**
	     * UTF-8 encoding strategy.
	     */
	    var Utf8 = C_enc.Utf8 = {
	        /**
	         * Converts a word array to a UTF-8 string.
	         *
	         * @param {WordArray} wordArray The word array.
	         *
	         * @return {string} The UTF-8 string.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var utf8String = CryptoJS.enc.Utf8.stringify(wordArray);
	         */
	        stringify: function (wordArray) {
	            try {
	                return decodeURIComponent(escape(Latin1.stringify(wordArray)));
	            } catch (e) {
	                throw new Error('Malformed UTF-8 data');
	            }
	        },

	        /**
	         * Converts a UTF-8 string to a word array.
	         *
	         * @param {string} utf8Str The UTF-8 string.
	         *
	         * @return {WordArray} The word array.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var wordArray = CryptoJS.enc.Utf8.parse(utf8String);
	         */
	        parse: function (utf8Str) {
	            return Latin1.parse(unescape(encodeURIComponent(utf8Str)));
	        }
	    };

	    /**
	     * Abstract buffered block algorithm template.
	     *
	     * The property blockSize must be implemented in a concrete subtype.
	     *
	     * @property {number} _minBufferSize The number of blocks that should be kept unprocessed in the buffer. Default: 0
	     */
	    var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm = Base.extend({
	        /**
	         * Resets this block algorithm's data buffer to its initial state.
	         *
	         * @example
	         *
	         *     bufferedBlockAlgorithm.reset();
	         */
	        reset: function () {
	            // Initial values
	            this._data = new WordArray.init();
	            this._nDataBytes = 0;
	        },

	        /**
	         * Adds new data to this block algorithm's buffer.
	         *
	         * @param {WordArray|string} data The data to append. Strings are converted to a WordArray using UTF-8.
	         *
	         * @example
	         *
	         *     bufferedBlockAlgorithm._append('data');
	         *     bufferedBlockAlgorithm._append(wordArray);
	         */
	        _append: function (data) {
	            // Convert string to WordArray, else assume WordArray already
	            if (typeof data == 'string') {
	                data = Utf8.parse(data);
	            }

	            // Append
	            this._data.concat(data);
	            this._nDataBytes += data.sigBytes;
	        },

	        /**
	         * Processes available data blocks.
	         *
	         * This method invokes _doProcessBlock(offset), which must be implemented by a concrete subtype.
	         *
	         * @param {boolean} doFlush Whether all blocks and partial blocks should be processed.
	         *
	         * @return {WordArray} The processed data.
	         *
	         * @example
	         *
	         *     var processedData = bufferedBlockAlgorithm._process();
	         *     var processedData = bufferedBlockAlgorithm._process(!!'flush');
	         */
	        _process: function (doFlush) {
	            var processedWords;

	            // Shortcuts
	            var data = this._data;
	            var dataWords = data.words;
	            var dataSigBytes = data.sigBytes;
	            var blockSize = this.blockSize;
	            var blockSizeBytes = blockSize * 4;

	            // Count blocks ready
	            var nBlocksReady = dataSigBytes / blockSizeBytes;
	            if (doFlush) {
	                // Round up to include partial blocks
	                nBlocksReady = Math.ceil(nBlocksReady);
	            } else {
	                // Round down to include only full blocks,
	                // less the number of blocks that must remain in the buffer
	                nBlocksReady = Math.max((nBlocksReady | 0) - this._minBufferSize, 0);
	            }

	            // Count words ready
	            var nWordsReady = nBlocksReady * blockSize;

	            // Count bytes ready
	            var nBytesReady = Math.min(nWordsReady * 4, dataSigBytes);

	            // Process blocks
	            if (nWordsReady) {
	                for (var offset = 0; offset < nWordsReady; offset += blockSize) {
	                    // Perform concrete-algorithm logic
	                    this._doProcessBlock(dataWords, offset);
	                }

	                // Remove processed words
	                processedWords = dataWords.splice(0, nWordsReady);
	                data.sigBytes -= nBytesReady;
	            }

	            // Return processed words
	            return new WordArray.init(processedWords, nBytesReady);
	        },

	        /**
	         * Creates a copy of this object.
	         *
	         * @return {Object} The clone.
	         *
	         * @example
	         *
	         *     var clone = bufferedBlockAlgorithm.clone();
	         */
	        clone: function () {
	            var clone = Base.clone.call(this);
	            clone._data = this._data.clone();

	            return clone;
	        },

	        _minBufferSize: 0
	    });

	    /**
	     * Abstract hasher template.
	     *
	     * @property {number} blockSize The number of 32-bit words this hasher operates on. Default: 16 (512 bits)
	     */
	    var Hasher = C_lib.Hasher = BufferedBlockAlgorithm.extend({
	        /**
	         * Configuration options.
	         */
	        cfg: Base.extend(),

	        /**
	         * Initializes a newly created hasher.
	         *
	         * @param {Object} cfg (Optional) The configuration options to use for this hash computation.
	         *
	         * @example
	         *
	         *     var hasher = CryptoJS.algo.SHA256.create();
	         */
	        init: function (cfg) {
	            // Apply config defaults
	            this.cfg = this.cfg.extend(cfg);

	            // Set initial values
	            this.reset();
	        },

	        /**
	         * Resets this hasher to its initial state.
	         *
	         * @example
	         *
	         *     hasher.reset();
	         */
	        reset: function () {
	            // Reset data buffer
	            BufferedBlockAlgorithm.reset.call(this);

	            // Perform concrete-hasher logic
	            this._doReset();
	        },

	        /**
	         * Updates this hasher with a message.
	         *
	         * @param {WordArray|string} messageUpdate The message to append.
	         *
	         * @return {Hasher} This hasher.
	         *
	         * @example
	         *
	         *     hasher.update('message');
	         *     hasher.update(wordArray);
	         */
	        update: function (messageUpdate) {
	            // Append
	            this._append(messageUpdate);

	            // Update the hash
	            this._process();

	            // Chainable
	            return this;
	        },

	        /**
	         * Finalizes the hash computation.
	         * Note that the finalize operation is effectively a destructive, read-once operation.
	         *
	         * @param {WordArray|string} messageUpdate (Optional) A final message update.
	         *
	         * @return {WordArray} The hash.
	         *
	         * @example
	         *
	         *     var hash = hasher.finalize();
	         *     var hash = hasher.finalize('message');
	         *     var hash = hasher.finalize(wordArray);
	         */
	        finalize: function (messageUpdate) {
	            // Final message update
	            if (messageUpdate) {
	                this._append(messageUpdate);
	            }

	            // Perform concrete-hasher logic
	            var hash = this._doFinalize();

	            return hash;
	        },

	        blockSize: 512/32,

	        /**
	         * Creates a shortcut function to a hasher's object interface.
	         *
	         * @param {Hasher} hasher The hasher to create a helper for.
	         *
	         * @return {Function} The shortcut function.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var SHA256 = CryptoJS.lib.Hasher._createHelper(CryptoJS.algo.SHA256);
	         */
	        _createHelper: function (hasher) {
	            return function (message, cfg) {
	                return new hasher.init(cfg).finalize(message);
	            };
	        },

	        /**
	         * Creates a shortcut function to the HMAC's object interface.
	         *
	         * @param {Hasher} hasher The hasher to use in this HMAC helper.
	         *
	         * @return {Function} The shortcut function.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var HmacSHA256 = CryptoJS.lib.Hasher._createHmacHelper(CryptoJS.algo.SHA256);
	         */
	        _createHmacHelper: function (hasher) {
	            return function (message, key) {
	                return new C_algo.HMAC.init(hasher, key).finalize(message);
	            };
	        }
	    });

	    /**
	     * Algorithm namespace.
	     */
	    var C_algo = C.algo = {};

	    return C;
	}(Math));


	return CryptoJS;

}));

/***/ }),
/* 115 */
/***/ (() => {

/* (ignored) */

/***/ }),
/* 116 */
/***/ (function(module, exports, __webpack_require__) {

;(function (root, factory) {
	if (true) {
		// CommonJS
		module.exports = exports = factory(__webpack_require__(114));
	}
	else {}
}(this, function (CryptoJS) {

	(function (Math) {
	    // Shortcuts
	    var C = CryptoJS;
	    var C_lib = C.lib;
	    var WordArray = C_lib.WordArray;
	    var Hasher = C_lib.Hasher;
	    var C_algo = C.algo;

	    // Initialization and round constants tables
	    var H = [];
	    var K = [];

	    // Compute constants
	    (function () {
	        function isPrime(n) {
	            var sqrtN = Math.sqrt(n);
	            for (var factor = 2; factor <= sqrtN; factor++) {
	                if (!(n % factor)) {
	                    return false;
	                }
	            }

	            return true;
	        }

	        function getFractionalBits(n) {
	            return ((n - (n | 0)) * 0x100000000) | 0;
	        }

	        var n = 2;
	        var nPrime = 0;
	        while (nPrime < 64) {
	            if (isPrime(n)) {
	                if (nPrime < 8) {
	                    H[nPrime] = getFractionalBits(Math.pow(n, 1 / 2));
	                }
	                K[nPrime] = getFractionalBits(Math.pow(n, 1 / 3));

	                nPrime++;
	            }

	            n++;
	        }
	    }());

	    // Reusable object
	    var W = [];

	    /**
	     * SHA-256 hash algorithm.
	     */
	    var SHA256 = C_algo.SHA256 = Hasher.extend({
	        _doReset: function () {
	            this._hash = new WordArray.init(H.slice(0));
	        },

	        _doProcessBlock: function (M, offset) {
	            // Shortcut
	            var H = this._hash.words;

	            // Working variables
	            var a = H[0];
	            var b = H[1];
	            var c = H[2];
	            var d = H[3];
	            var e = H[4];
	            var f = H[5];
	            var g = H[6];
	            var h = H[7];

	            // Computation
	            for (var i = 0; i < 64; i++) {
	                if (i < 16) {
	                    W[i] = M[offset + i] | 0;
	                } else {
	                    var gamma0x = W[i - 15];
	                    var gamma0  = ((gamma0x << 25) | (gamma0x >>> 7))  ^
	                                  ((gamma0x << 14) | (gamma0x >>> 18)) ^
	                                   (gamma0x >>> 3);

	                    var gamma1x = W[i - 2];
	                    var gamma1  = ((gamma1x << 15) | (gamma1x >>> 17)) ^
	                                  ((gamma1x << 13) | (gamma1x >>> 19)) ^
	                                   (gamma1x >>> 10);

	                    W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16];
	                }

	                var ch  = (e & f) ^ (~e & g);
	                var maj = (a & b) ^ (a & c) ^ (b & c);

	                var sigma0 = ((a << 30) | (a >>> 2)) ^ ((a << 19) | (a >>> 13)) ^ ((a << 10) | (a >>> 22));
	                var sigma1 = ((e << 26) | (e >>> 6)) ^ ((e << 21) | (e >>> 11)) ^ ((e << 7)  | (e >>> 25));

	                var t1 = h + sigma1 + ch + K[i] + W[i];
	                var t2 = sigma0 + maj;

	                h = g;
	                g = f;
	                f = e;
	                e = (d + t1) | 0;
	                d = c;
	                c = b;
	                b = a;
	                a = (t1 + t2) | 0;
	            }

	            // Intermediate hash value
	            H[0] = (H[0] + a) | 0;
	            H[1] = (H[1] + b) | 0;
	            H[2] = (H[2] + c) | 0;
	            H[3] = (H[3] + d) | 0;
	            H[4] = (H[4] + e) | 0;
	            H[5] = (H[5] + f) | 0;
	            H[6] = (H[6] + g) | 0;
	            H[7] = (H[7] + h) | 0;
	        },

	        _doFinalize: function () {
	            // Shortcuts
	            var data = this._data;
	            var dataWords = data.words;

	            var nBitsTotal = this._nDataBytes * 8;
	            var nBitsLeft = data.sigBytes * 8;

	            // Add padding
	            dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);
	            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 14] = Math.floor(nBitsTotal / 0x100000000);
	            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 15] = nBitsTotal;
	            data.sigBytes = dataWords.length * 4;

	            // Hash final blocks
	            this._process();

	            // Return final computed hash
	            return this._hash;
	        },

	        clone: function () {
	            var clone = Hasher.clone.call(this);
	            clone._hash = this._hash.clone();

	            return clone;
	        }
	    });

	    /**
	     * Shortcut function to the hasher's object interface.
	     *
	     * @param {WordArray|string} message The message to hash.
	     *
	     * @return {WordArray} The hash.
	     *
	     * @static
	     *
	     * @example
	     *
	     *     var hash = CryptoJS.SHA256('message');
	     *     var hash = CryptoJS.SHA256(wordArray);
	     */
	    C.SHA256 = Hasher._createHelper(SHA256);

	    /**
	     * Shortcut function to the HMAC's object interface.
	     *
	     * @param {WordArray|string} message The message to hash.
	     * @param {WordArray|string} key The secret key.
	     *
	     * @return {WordArray} The HMAC.
	     *
	     * @static
	     *
	     * @example
	     *
	     *     var hmac = CryptoJS.HmacSHA256(message, key);
	     */
	    C.HmacSHA256 = Hasher._createHmacHelper(SHA256);
	}(Math));


	return CryptoJS.SHA256;

}));

/***/ }),
/* 117 */
/***/ (function(module, exports, __webpack_require__) {

;(function (root, factory) {
	if (true) {
		// CommonJS
		module.exports = exports = factory(__webpack_require__(114));
	}
	else {}
}(this, function (CryptoJS) {

	(function () {
	    // Shortcuts
	    var C = CryptoJS;
	    var C_lib = C.lib;
	    var Base = C_lib.Base;
	    var C_enc = C.enc;
	    var Utf8 = C_enc.Utf8;
	    var C_algo = C.algo;

	    /**
	     * HMAC algorithm.
	     */
	    var HMAC = C_algo.HMAC = Base.extend({
	        /**
	         * Initializes a newly created HMAC.
	         *
	         * @param {Hasher} hasher The hash algorithm to use.
	         * @param {WordArray|string} key The secret key.
	         *
	         * @example
	         *
	         *     var hmacHasher = CryptoJS.algo.HMAC.create(CryptoJS.algo.SHA256, key);
	         */
	        init: function (hasher, key) {
	            // Init hasher
	            hasher = this._hasher = new hasher.init();

	            // Convert string to WordArray, else assume WordArray already
	            if (typeof key == 'string') {
	                key = Utf8.parse(key);
	            }

	            // Shortcuts
	            var hasherBlockSize = hasher.blockSize;
	            var hasherBlockSizeBytes = hasherBlockSize * 4;

	            // Allow arbitrary length keys
	            if (key.sigBytes > hasherBlockSizeBytes) {
	                key = hasher.finalize(key);
	            }

	            // Clamp excess bits
	            key.clamp();

	            // Clone key for inner and outer pads
	            var oKey = this._oKey = key.clone();
	            var iKey = this._iKey = key.clone();

	            // Shortcuts
	            var oKeyWords = oKey.words;
	            var iKeyWords = iKey.words;

	            // XOR keys with pad constants
	            for (var i = 0; i < hasherBlockSize; i++) {
	                oKeyWords[i] ^= 0x5c5c5c5c;
	                iKeyWords[i] ^= 0x36363636;
	            }
	            oKey.sigBytes = iKey.sigBytes = hasherBlockSizeBytes;

	            // Set initial values
	            this.reset();
	        },

	        /**
	         * Resets this HMAC to its initial state.
	         *
	         * @example
	         *
	         *     hmacHasher.reset();
	         */
	        reset: function () {
	            // Shortcut
	            var hasher = this._hasher;

	            // Reset
	            hasher.reset();
	            hasher.update(this._iKey);
	        },

	        /**
	         * Updates this HMAC with a message.
	         *
	         * @param {WordArray|string} messageUpdate The message to append.
	         *
	         * @return {HMAC} This HMAC instance.
	         *
	         * @example
	         *
	         *     hmacHasher.update('message');
	         *     hmacHasher.update(wordArray);
	         */
	        update: function (messageUpdate) {
	            this._hasher.update(messageUpdate);

	            // Chainable
	            return this;
	        },

	        /**
	         * Finalizes the HMAC computation.
	         * Note that the finalize operation is effectively a destructive, read-once operation.
	         *
	         * @param {WordArray|string} messageUpdate (Optional) A final message update.
	         *
	         * @return {WordArray} The HMAC.
	         *
	         * @example
	         *
	         *     var hmac = hmacHasher.finalize();
	         *     var hmac = hmacHasher.finalize('message');
	         *     var hmac = hmacHasher.finalize(wordArray);
	         */
	        finalize: function (messageUpdate) {
	            // Shortcut
	            var hasher = this._hasher;

	            // Compute HMAC
	            var innerHash = hasher.finalize(messageUpdate);
	            hasher.reset();
	            var hmac = hasher.finalize(this._oKey.clone().concat(innerHash));

	            return hmac;
	        }
	    });
	}());


}));

/***/ }),
/* 118 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ LocalState)
/* harmony export */ });
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

var LocalState = /*#__PURE__*/function () {
  function LocalState(appId, storage) {
    _classCallCheck(this, LocalState);

    this.appId = appId;
    this.cachedaccessToken = null;
    this.cachedUser = null;
    this.storage = storage;
  }

  _createClass(LocalState, [{
    key: "accessTokenKey",
    value: function accessTokenKey() {
      return "oreid.".concat(this.appId, ".accessToken");
    }
  }, {
    key: "accessToken",
    get: function get() {
      if (!this.cachedaccessToken) this.loadAccessToken();
      return this.cachedaccessToken;
    }
  }, {
    key: "loadAccessToken",
    value: function loadAccessToken() {
      this.cachedaccessToken = this.storage.getItem(this.accessTokenKey());
    }
  }, {
    key: "saveAccessToken",
    value: function saveAccessToken(accessToken) {
      if (accessToken) {
        this.cachedaccessToken = accessToken;
        this.storage.setItem(this.accessTokenKey(), accessToken);
      } else {
        this.clearAccessToken();
      }
    }
  }, {
    key: "clearAccessToken",
    value: function clearAccessToken() {
      this.cachedaccessToken = null;
      this.storage.removeItem(this.accessTokenKey());
    }
  }, {
    key: "clear",
    value: function clear() {
      this.clearAccessToken();
    }
  }]);

  return LocalState;
}();



/***/ }),
/* 119 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DummyStorage": () => (/* binding */ DummyStorage),
/* harmony export */   "MemoryStorage": () => (/* binding */ MemoryStorage),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var js_cookie__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(120);
/* harmony import */ var js_cookie__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(js_cookie__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _helpers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(17);
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

/* eslint-disable @typescript-eslint/no-unused-vars */

/* eslint-disable max-classes-per-file */

/*

Handles storage to local storage, or cookies, whatever is available to the client

Mostly copied originally copied from Auth0.js but modifed to use a class
https://github.com/auth0/auth0.js/tree/master/src/helper/storage

*/



var CookieStorage = /*#__PURE__*/function () {
  function CookieStorage() {
    _classCallCheck(this, CookieStorage);
  }

  _createClass(CookieStorage, [{
    key: "getItem",
    value: function getItem(key) {
      return js_cookie__WEBPACK_IMPORTED_MODULE_0__.get(key);
    }
  }, {
    key: "removeItem",
    value: function removeItem(key) {
      js_cookie__WEBPACK_IMPORTED_MODULE_0__.remove(key);
    }
  }, {
    key: "setItem",
    value: function setItem(key, value, options) {
      var params = _objectSpread({
        expires: 1
      }, options);

      return js_cookie__WEBPACK_IMPORTED_MODULE_0__.set(key, value, params);
    }
  }]);

  return CookieStorage;
}();

var LocalStorage = /*#__PURE__*/function () {
  function LocalStorage() {
    _classCallCheck(this, LocalStorage);

    if (window) {
      // some browsers throw an error when trying to access localStorage
      // when localStorage is disabled.
      this.storage = window.localStorage;
    } else {
      _helpers__WEBPACK_IMPORTED_MODULE_1__["default"].log('Not running in Browser. Using CookieStorage instead.');
    }
  }

  _createClass(LocalStorage, [{
    key: "getItem",
    value: function getItem(key) {
      if (this.storage) {
        return this.storage.getItem(key);
      }

      return null;
    }
  }, {
    key: "removeItem",
    value: function removeItem(key) {
      if (this.storage) {
        this.storage.removeItem(key);
      }
    }
  }, {
    key: "setItem",
    value: function setItem(key, value, options) {
      if (this.storage) {
        this.storage.setItem(key, value);
      }
    }
  }]);

  return LocalStorage;
}();
/** does not store or retrieve any values - allows 'disabling' of storage */


var DummyStorage = /*#__PURE__*/function () {
  function DummyStorage() {
    _classCallCheck(this, DummyStorage);
  }

  _createClass(DummyStorage, [{
    key: "getItem",
    value: function getItem(key) {
      return null;
    }
  }, {
    key: "removeItem",
    value: function removeItem(key) {// empty
    }
  }, {
    key: "setItem",
    value: function setItem(key, value, options) {// empty
    }
  }]);

  return DummyStorage;
}();
/** stores items in memory - does not persist across instances */

var MemoryStorage = /*#__PURE__*/function () {
  function MemoryStorage() {
    _classCallCheck(this, MemoryStorage);

    _defineProperty(this, "memoryCache", {});
  }

  _createClass(MemoryStorage, [{
    key: "getItem",
    value: function getItem(key) {
      if (key in this.memoryCache) return this.memoryCache[key];
      return null;
    }
  }, {
    key: "removeItem",
    value: function removeItem(key) {
      if (!this.getItem(key)) return;
      delete this.memoryCache[key];
    }
  }, {
    key: "setItem",
    value: function setItem(key, value, options) {
      this.memoryCache[key] = value;
    }
  }]);

  return MemoryStorage;
}();

var StorageHandler = /*#__PURE__*/function () {
  function StorageHandler() {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {
      tryLocalStorageFirst: true
    };

    _classCallCheck(this, StorageHandler);

    this.triedLocalStorage = false;
    this.triedCookieStorage = false;

    if (options.tryLocalStorageFirst === true) {
      this.triedLocalStorage = true;

      try {
        // designed to work on browser or server, so window might not exist
        var localStorage = new LocalStorage();

        if (localStorage && localStorage.storage) {
          this.storage = localStorage;
        }
      } catch (e) {
        _helpers__WEBPACK_IMPORTED_MODULE_1__["default"].log('Cant use localStorage. Using CookieStorage instead.', options);
      }
    }

    if (!this.storage) {
      this.storage = new CookieStorage();
      this.triedCookieStorage = true;
    }
  }

  _createClass(StorageHandler, [{
    key: "failover",
    value: function failover() {
      if (this.storage instanceof DummyStorage) {
        return;
      }

      var didSet = false;

      if (this.storage instanceof LocalStorage) {
        if (!this.triedCookieStorage) {
          this.storage = new CookieStorage();
          this.triedCookieStorage = true;
          didSet = true;
        }
      } else if (this.storage instanceof CookieStorage) {
        if (!this.triedLocalStorage) {
          this.storage = new LocalStorage();
          this.triedLocalStorage = true;
          didSet = true;
        }
      }

      if (!didSet) {
        this.storage = new DummyStorage();
      }
    }
  }, {
    key: "getItem",
    value: function getItem(key) {
      try {
        return this.storage.getItem(key);
      } catch (e) {
        _helpers__WEBPACK_IMPORTED_MODULE_1__["default"].log('Cant getItem in storage.', e);
        this.failover();
        return this.storage.getItem(key);
      }
    }
  }, {
    key: "removeItem",
    value: function removeItem(key) {
      try {
        this.storage.removeItem(key);
        return;
      } catch (e) {
        _helpers__WEBPACK_IMPORTED_MODULE_1__["default"].log('Cant removeItem in storage.', e);
        this.failover();
        this.storage.removeItem(key);
      }
    }
  }, {
    key: "setItem",
    value: function setItem(key, value, options) {
      try {
        return this.storage.setItem(key, value, options);
      } catch (e) {
        _helpers__WEBPACK_IMPORTED_MODULE_1__["default"].log('Cant setItem in storage.', e);
        this.failover();
        return this.storage.setItem(key, value, options);
      }
    }
  }]);

  return StorageHandler;
}();

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (StorageHandler);

/***/ }),
/* 120 */
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
 * JavaScript Cookie v2.2.1
 * https://github.com/js-cookie/js-cookie
 *
 * Copyright 2006, 2015 Klaus Hartl & Fagner Brack
 * Released under the MIT license
 */
;(function (factory) {
	var registeredInModuleLoader;
	if (true) {
		!(__WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
		__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
		(__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) :
		__WEBPACK_AMD_DEFINE_FACTORY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
		registeredInModuleLoader = true;
	}
	if (true) {
		module.exports = factory();
		registeredInModuleLoader = true;
	}
	if (!registeredInModuleLoader) {
		var OldCookies = window.Cookies;
		var api = window.Cookies = factory();
		api.noConflict = function () {
			window.Cookies = OldCookies;
			return api;
		};
	}
}(function () {
	function extend () {
		var i = 0;
		var result = {};
		for (; i < arguments.length; i++) {
			var attributes = arguments[ i ];
			for (var key in attributes) {
				result[key] = attributes[key];
			}
		}
		return result;
	}

	function decode (s) {
		return s.replace(/(%[0-9A-Z]{2})+/g, decodeURIComponent);
	}

	function init (converter) {
		function api() {}

		function set (key, value, attributes) {
			if (typeof document === 'undefined') {
				return;
			}

			attributes = extend({
				path: '/'
			}, api.defaults, attributes);

			if (typeof attributes.expires === 'number') {
				attributes.expires = new Date(new Date() * 1 + attributes.expires * 864e+5);
			}

			// We're using "expires" because "max-age" is not supported by IE
			attributes.expires = attributes.expires ? attributes.expires.toUTCString() : '';

			try {
				var result = JSON.stringify(value);
				if (/^[\{\[]/.test(result)) {
					value = result;
				}
			} catch (e) {}

			value = converter.write ?
				converter.write(value, key) :
				encodeURIComponent(String(value))
					.replace(/%(23|24|26|2B|3A|3C|3E|3D|2F|3F|40|5B|5D|5E|60|7B|7D|7C)/g, decodeURIComponent);

			key = encodeURIComponent(String(key))
				.replace(/%(23|24|26|2B|5E|60|7C)/g, decodeURIComponent)
				.replace(/[\(\)]/g, escape);

			var stringifiedAttributes = '';
			for (var attributeName in attributes) {
				if (!attributes[attributeName]) {
					continue;
				}
				stringifiedAttributes += '; ' + attributeName;
				if (attributes[attributeName] === true) {
					continue;
				}

				// Considers RFC 6265 section 5.2:
				// ...
				// 3.  If the remaining unparsed-attributes contains a %x3B (";")
				//     character:
				// Consume the characters of the unparsed-attributes up to,
				// not including, the first %x3B (";") character.
				// ...
				stringifiedAttributes += '=' + attributes[attributeName].split(';')[0];
			}

			return (document.cookie = key + '=' + value + stringifiedAttributes);
		}

		function get (key, json) {
			if (typeof document === 'undefined') {
				return;
			}

			var jar = {};
			// To prevent the for loop in the first place assign an empty array
			// in case there are no cookies at all.
			var cookies = document.cookie ? document.cookie.split('; ') : [];
			var i = 0;

			for (; i < cookies.length; i++) {
				var parts = cookies[i].split('=');
				var cookie = parts.slice(1).join('=');

				if (!json && cookie.charAt(0) === '"') {
					cookie = cookie.slice(1, -1);
				}

				try {
					var name = decode(parts[0]);
					cookie = (converter.read || converter)(cookie, name) ||
						decode(cookie);

					if (json) {
						try {
							cookie = JSON.parse(cookie);
						} catch (e) {}
					}

					jar[name] = cookie;

					if (key === name) {
						break;
					}
				} catch (e) {}
			}

			return key ? jar[key] : jar;
		}

		api.set = set;
		api.get = function (key) {
			return get(key, false /* read as raw */);
		};
		api.getJSON = function (key) {
			return get(key, true /* read as json */);
		};
		api.remove = function (key, attributes) {
			set(key, '', extend(attributes, {
				expires: -1
			}));
		};

		api.defaults = {};

		api.withConverter = init;

		return api;
	}

	return init(function () {});
}));


/***/ }),
/* 121 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Settings)
/* harmony export */ });
/* harmony import */ var _api__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2);
/* harmony import */ var _models__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(5);
/* harmony import */ var _utils_helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(17);
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, $Symbol = "function" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, ""); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return generator._invoke = function (innerFn, self, context) { var state = "suspendedStart"; return function (method, arg) { if ("executing" === state) throw new Error("Generator is already running"); if ("completed" === state) { if ("throw" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) { if ("suspendedStart" === state) throw state = "completed", context.arg; context.dispatchException(context.arg); } else "return" === context.method && context.abrupt("return", context.arg); state = "executing"; var record = tryCatch(innerFn, self, context); if ("normal" === record.type) { if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg); } }; }(innerFn, self, context), generator; } function tryCatch(fn, obj, arg) { try { return { type: "normal", arg: fn.call(obj, arg) }; } catch (err) { return { type: "throw", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { ["next", "throw", "return"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if ("throw" !== record.type) { var result = record.arg, value = result.value; return value && "object" == _typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke("next", value, resolve, reject); }, function (err) { invoke("throw", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke("throw", error, resolve, reject); }); } reject(record.arg); } var previousPromise; this._invoke = function (method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); }; } function maybeInvokeDelegate(delegate, context) { var method = delegate.iterator[context.method]; if (undefined === method) { if (context.delegate = null, "throw" === context.method) { if (delegate.iterator["return"] && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method)) return ContinueSentinel; context.method = "throw", context.arg = new TypeError("The iterator does not provide a 'throw' method"); } return ContinueSentinel; } var record = tryCatch(method, delegate.iterator, context.arg); if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = "normal", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: "root" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if ("function" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, "constructor", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) { var ctor = "function" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, "toString", function () { return "[object Generator]"; }), exports.keys = function (object) { var keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if ("throw" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if ("root" === entry.tryLoc) return handle("end"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error("try statement without catch or finally"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if ("throw" === record.type) throw record.arg; return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, "catch": function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if ("throw" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, "next" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }





var Settings = /*#__PURE__*/function () {
  function Settings(args) {
    _classCallCheck(this, Settings);

    _defineProperty(this, "_cachedChainNetworks", []);

    this._oreIdContext = args.oreIdContext;
    this._cachedChainNetworks = null;
  }

  _createClass(Settings, [{
    key: "getAllChainNetworkSettings",
    value:
    /** Calls getConfigFromApi() to retrieve settings for all chain networks defined by OreID service
     * and caches the result */
    function () {
      var _getAllChainNetworkSettings = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
        var results;
        return _regeneratorRuntime().wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                if (!_utils_helpers__WEBPACK_IMPORTED_MODULE_2__["default"].isNullOrEmpty(this._cachedChainNetworks)) {
                  _context.next = 5;
                  break;
                }

                _context.next = 3;
                return this.getConfigFromApi(_models__WEBPACK_IMPORTED_MODULE_1__.ConfigType.Chains);

              case 3:
                results = _context.sent;
                this._cachedChainNetworks = results.chains; // as SettingChainNetwork[]

              case 5:
                return _context.abrupt("return", this._cachedChainNetworks);

              case 6:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function getAllChainNetworkSettings() {
        return _getAllChainNetworkSettings.apply(this, arguments);
      }

      return getAllChainNetworkSettings;
    }()
    /** Returns Chain Network Settings for a specific chain */

  }, {
    key: "getChainNetworkSettings",
    value: function () {
      var _getChainNetworkSettings = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(chainNetwork) {
        var networks;
        return _regeneratorRuntime().wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return this.getAllChainNetworkSettings();

              case 2:
                networks = _context2.sent;
                return _context2.abrupt("return", networks.find(function (n) {
                  return n.network === chainNetwork;
                }));

              case 4:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function getChainNetworkSettings(_x) {
        return _getChainNetworkSettings.apply(this, arguments);
      }

      return getChainNetworkSettings;
    }()
    /** Loads settings value from the server
      e.g. configType='chains' returns valid chain types and addresses */

  }, {
    key: "getConfig",
    value: function () {
      var _getConfig = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(configType) {
        return _regeneratorRuntime().wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                return _context3.abrupt("return", this.getConfigFromApi(configType));

              case 1:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function getConfig(_x2) {
        return _getConfig.apply(this, arguments);
      }

      return getConfig;
    }()
    /**
     *  Call api services/config to get configuration values of a specific type
     *  Returns: for configType:Config.Chains, returns array of SettingChainNetwork objects for all chains suported by the service
     * */

  }, {
    key: "getConfigFromApi",
    value: function () {
      var _getConfigFromApi = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(configType) {
        var values;
        return _regeneratorRuntime().wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                _context4.next = 2;
                return (0,_api__WEBPACK_IMPORTED_MODULE_0__.callApiGetConfig)(this._oreIdContext, {
                  configType: configType
                });

              case 2:
                values = _context4.sent;

                if (!_utils_helpers__WEBPACK_IMPORTED_MODULE_2__["default"].isNullOrEmpty(values)) {
                  _context4.next = 5;
                  break;
                }

                throw new Error("Not able to retrieve config values for ".concat(configType));

              case 5:
                return _context4.abrupt("return", values);

              case 6:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      function getConfigFromApi(_x3) {
        return _getConfigFromApi.apply(this, arguments);
      }

      return getConfigFromApi;
    }()
    /** Returns network config (url, port, etc.) for specified chainNetwork */

  }, {
    key: "getChainNetworkNextworkConfig",
    value: function () {
      var _getChainNetworkNextworkConfig = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(chainNetwork) {
        var networkSettings, _ref, chainId, host, port, protocol;

        return _regeneratorRuntime().wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                _context5.next = 2;
                return this.getChainNetworkSettings(chainNetwork);

              case 2:
                networkSettings = _context5.sent;

                if (networkSettings) {
                  _context5.next = 5;
                  break;
                }

                throw new Error("Invalid chain network: ".concat(chainNetwork, "."));

              case 5:
                _ref = (networkSettings === null || networkSettings === void 0 ? void 0 : networkSettings.hosts[0]) || {}, chainId = _ref.chainId, host = _ref.host, port = _ref.port, protocol = _ref.protocol; // using first host

                return _context5.abrupt("return", {
                  host: host,
                  port: port,
                  protocol: protocol,
                  chainId: chainId
                });

              case 7:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      function getChainNetworkNextworkConfig(_x4) {
        return _getChainNetworkNextworkConfig.apply(this, arguments);
      }

      return getChainNetworkNextworkConfig;
    }()
    /** Return ChainNetwork that matches chainId (as defined in OreId Chain Network Settings) */

  }, {
    key: "getChainNetworkByChainId",
    value: function () {
      var _getChainNetworkByChainId = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(chainId) {
        var networks, chainSettings;
        return _regeneratorRuntime().wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                _context6.next = 2;
                return this.getAllChainNetworkSettings();

              case 2:
                networks = _context6.sent;
                chainSettings = networks.find(function (n) {
                  return n.hosts.find(function (h) {
                    return h.chainId === chainId;
                  });
                });

                if (_utils_helpers__WEBPACK_IMPORTED_MODULE_2__["default"].isNullOrEmpty(chainSettings)) {
                  _context6.next = 6;
                  break;
                }

                return _context6.abrupt("return", chainSettings.network);

              case 6:
                return _context6.abrupt("return", null);

              case 7:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6, this);
      }));

      function getChainNetworkByChainId(_x5) {
        return _getChainNetworkByChainId.apply(this, arguments);
      }

      return getChainNetworkByChainId;
    }()
    /** Returns true if network is NOT an EOS sisterchain */

  }, {
    key: "isNotEosNetwork",
    value: function () {
      var _isNotEosNetwork = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7(chainNetwork) {
        var networkSetting;
        return _regeneratorRuntime().wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                _context7.next = 2;
                return this._oreIdContext.settings.getChainNetworkSettings(chainNetwork);

              case 2:
                networkSetting = _context7.sent;
                return _context7.abrupt("return", !(networkSetting.type === _models__WEBPACK_IMPORTED_MODULE_1__.ChainPlatformType.eos || networkSetting.type === _models__WEBPACK_IMPORTED_MODULE_1__.ChainPlatformType.ore));

              case 4:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee7, this);
      }));

      function isNotEosNetwork(_x6) {
        return _isNotEosNetwork.apply(this, arguments);
      }

      return isNotEosNetwork;
    }()
  }]);

  return Settings;
}();



/***/ }),
/* 122 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ WalletHelper)
/* harmony export */ });
/* harmony import */ var _ual_ualProviders__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(73);
/* harmony import */ var _transit__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(123);
/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(109);
/* harmony import */ var _utils_helpers__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(17);
/* harmony import */ var _models__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(5);
/* harmony import */ var _models__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(14);
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, $Symbol = "function" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, ""); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return generator._invoke = function (innerFn, self, context) { var state = "suspendedStart"; return function (method, arg) { if ("executing" === state) throw new Error("Generator is already running"); if ("completed" === state) { if ("throw" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) { if ("suspendedStart" === state) throw state = "completed", context.arg; context.dispatchException(context.arg); } else "return" === context.method && context.abrupt("return", context.arg); state = "executing"; var record = tryCatch(innerFn, self, context); if ("normal" === record.type) { if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg); } }; }(innerFn, self, context), generator; } function tryCatch(fn, obj, arg) { try { return { type: "normal", arg: fn.call(obj, arg) }; } catch (err) { return { type: "throw", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { ["next", "throw", "return"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if ("throw" !== record.type) { var result = record.arg, value = result.value; return value && "object" == _typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke("next", value, resolve, reject); }, function (err) { invoke("throw", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke("throw", error, resolve, reject); }); } reject(record.arg); } var previousPromise; this._invoke = function (method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); }; } function maybeInvokeDelegate(delegate, context) { var method = delegate.iterator[context.method]; if (undefined === method) { if (context.delegate = null, "throw" === context.method) { if (delegate.iterator["return"] && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method)) return ContinueSentinel; context.method = "throw", context.arg = new TypeError("The iterator does not provide a 'throw' method"); } return ContinueSentinel; } var record = tryCatch(method, delegate.iterator, context.arg); if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = "normal", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: "root" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if ("function" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, "constructor", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) { var ctor = "function" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, "toString", function () { return "[object Generator]"; }), exports.keys = function (object) { var keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if ("throw" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if ("root" === entry.tryLoc) return handle("end"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error("try statement without catch or finally"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if ("throw" === record.type) throw record.arg; return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, "catch": function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if ("throw" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, "next" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }








var WalletHelper = /*#__PURE__*/function () {
  function WalletHelper(args) {
    _classCallCheck(this, WalletHelper);

    this._oreIdContext = args.oreIdContext;
    this._transitHelper = args.transitHelper;
    this._ualHelper = args.ualHelper;
  }

  _createClass(WalletHelper, [{
    key: "transitHelper",
    get:
    /** Transit wallet plugin helper functions and connections */
    function get() {
      return this._transitHelper;
    }
    /** Ual wallet plugin helper functions and connections */

  }, {
    key: "ualHelper",
    get: function get() {
      return this._ualHelper;
    } //** Whether wallet type is a Transit or Ual wallet */

  }, {
    key: "isAValidExternalWalletType",
    value: function isAValidExternalWalletType(walletType) {
      return (this._transitHelper.isTransitProvider(walletType) || this._ualHelper.isUalProvider(walletType)) && !_constants__WEBPACK_IMPORTED_MODULE_2__.externalWalletsNotImplemented.includes(walletType);
    }
    /** Returns metadata about the installed external wallet type (e.g. name, logo) and which features it supports
     *  If optional externalWalletInterface param provided, then gets Info for the specified type (Transit or UAL) instead of seeing what's installed
     */

  }, {
    key: "getExternalWalletInfo",
    value: function getExternalWalletInfo(walletType, externalWalletInterface) {
      if (!this.isAValidExternalWalletType(walletType)) {
        throw new Error("Not a valid external wallet type: ".concat(walletType));
      }

      if (this._transitHelper.hasTransitProvider(walletType) || externalWalletInterface === _models__WEBPACK_IMPORTED_MODULE_5__.ExternalWalletInterface.Transit) {
        return (0,_transit__WEBPACK_IMPORTED_MODULE_1__.getTransitProviderAttributes)(walletType);
      }

      if (this._ualHelper.hasUalProvider(walletType) || externalWalletInterface === _models__WEBPACK_IMPORTED_MODULE_5__.ExternalWalletInterface.Ual) {
        return (0,_ual_ualProviders__WEBPACK_IMPORTED_MODULE_0__.getUalProviderAttributes)(walletType);
      }

      return null;
    }
    /** Returns wallet metadata (for installed wallet providers) for a given chain */

  }, {
    key: "getExternalWalletInfoByChain",
    value: function getExternalWalletInfoByChain(chain) {
      var _this = this;

      var transitWalletsInstalledInfo = _transit__WEBPACK_IMPORTED_MODULE_1__.transitProviderAttributesData.filter(function (info) {
        return _this._oreIdContext.transitProvidersInstalled.includes(info.providerName);
      });
      var ualWalletsInstalledInfo = _ual_ualProviders__WEBPACK_IMPORTED_MODULE_0__.ualProviderAttributesData.filter(function (info) {
        return _this._oreIdContext.ualProvidersInstalled.includes(info.providerName);
      });
      return [].concat(_toConsumableArray(transitWalletsInstalledInfo), _toConsumableArray(ualWalletsInstalledInfo)).filter(function (p) {
        return p.chainType === chain;
      });
    }
    /** Connect to the wallet provider
     *  For some wallet types, this will include an unlock and 'login' flow to select a chain account
     *  If a chainAccount is selected, it and it's associated publicKey (if available) will be saved to the user's OreId wallet as an 'external key' */

  }, {
    key: "connectToWalletProvider",
    value: function () {
      var _connectToWalletProvider = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(loginOptions) {
        var walletType;
        return _regeneratorRuntime().wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                walletType = loginOptions.walletType;

                if (this.isAValidExternalWalletType(walletType)) {
                  _context.next = 3;
                  break;
                }

                throw new Error("Not a valid external wallet type: ".concat(walletType));

              case 3:
                if (!this._transitHelper.hasTransitProvider(walletType)) {
                  _context.next = 7;
                  break;
                }

                return _context.abrupt("return", this._transitHelper.loginWithTransitProvider(loginOptions));

              case 7:
                if (!this._ualHelper.hasUalProvider(walletType)) {
                  _context.next = 9;
                  break;
                }

                return _context.abrupt("return", this._ualHelper.loginWithUalProvider(loginOptions));

              case 9:
                throw new Error("Wallet type ".concat(walletType, " invalid or not installed"));

              case 10:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function connectToWalletProvider(_x) {
        return _connectToWalletProvider.apply(this, arguments);
      }

      return connectToWalletProvider;
    }()
    /** Sign with a supported blockchain wallet via Transit provider */

  }, {
    key: "signWithWallet",
    value: function () {
      var _signWithWallet = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(walletType, transactionData) {
        var signResult, provider, account, chainNetwork;
        return _regeneratorRuntime().wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                if (this._oreIdContext.walletHelper.isAValidExternalWalletType(walletType)) {
                  _context2.next = 2;
                  break;
                }

                throw new Error("signWithWallet not supported for external wallet type: ".concat(walletType));

              case 2:
                provider = _utils_helpers__WEBPACK_IMPORTED_MODULE_3__["default"].toEnumValue(_models__WEBPACK_IMPORTED_MODULE_4__.AuthProvider, walletType);

                if (!this._transitHelper.hasTransitProvider(walletType)) {
                  _context2.next = 12;
                  break;
                }

                _context2.next = 6;
                return this._transitHelper.signWithTransitProvider(transactionData, walletType);

              case 6:
                signResult = _context2.sent;
                // If we've signed a transaction with a key in a wallet, callDiscoverAfterSign() will add it to the user's wallet
                account = transactionData.account, chainNetwork = transactionData.chainNetwork;
                _context2.next = 10;
                return this._transitHelper.callDiscoverAfterSign({
                  account: account,
                  chainNetwork: chainNetwork,
                  signOptions: {
                    provider: provider
                  }
                });

              case 10:
                _context2.next = 16;
                break;

              case 12:
                if (!this._ualHelper.hasUalProvider(walletType)) {
                  _context2.next = 16;
                  break;
                }

                _context2.next = 15;
                return this._ualHelper.signWithUalProvider(transactionData, walletType);

              case 15:
                signResult = _context2.sent;

              case 16:
                return _context2.abrupt("return", signResult);

              case 17:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function signWithWallet(_x2, _x3) {
        return _signWithWallet.apply(this, arguments);
      }

      return signWithWallet;
    }()
    /** Sign an arbitrary string (instead of a transaction)
     * This only supports Transit and Ual wallets
     */

  }, {
    key: "signStringWithWallet",
    value: function () {
      var _signStringWithWallet = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(params) {
        var account, walletType, chainNetwork, signResult, provider;
        return _regeneratorRuntime().wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                account = params.account, walletType = params.walletType, chainNetwork = params.chainNetwork;

                if (this.isAValidExternalWalletType(walletType)) {
                  _context3.next = 3;
                  break;
                }

                throw new Error("signStringWithWallet not supported for external wallet type: ".concat(walletType));

              case 3:
                provider = _utils_helpers__WEBPACK_IMPORTED_MODULE_3__["default"].toEnumValue(_models__WEBPACK_IMPORTED_MODULE_4__.AuthProvider, walletType);

                if (!this._transitHelper.hasTransitProvider(walletType)) {
                  _context3.next = 14;
                  break;
                }

                if (this._transitHelper.canSignString(walletType)) {
                  _context3.next = 7;
                  break;
                }

                throw Error("The walletType ".concat(walletType, " does not support signString"));

              case 7:
                _context3.next = 9;
                return this._transitHelper.signStringWithTransitProvider(params);

              case 9:
                signResult = _context3.sent;
                _context3.next = 12;
                return this._transitHelper.callDiscoverAfterSign({
                  account: account,
                  chainNetwork: chainNetwork,
                  signOptions: {
                    provider: provider
                  }
                });

              case 12:
                _context3.next = 20;
                break;

              case 14:
                if (!this._ualHelper.hasUalProvider(walletType)) {
                  _context3.next = 20;
                  break;
                }

                if (this._ualHelper.canSignString(walletType)) {
                  _context3.next = 17;
                  break;
                }

                throw Error("The walletType ".concat(walletType, " does not support signString"));

              case 17:
                _context3.next = 19;
                return this._ualHelper.signStringWithUalProvider(params);

              case 19:
                signResult = _context3.sent;

              case 20:
                return _context3.abrupt("return", signResult);

              case 21:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function signStringWithWallet(_x4) {
        return _signStringWithWallet.apply(this, arguments);
      }

      return signStringWithWallet;
    }()
    /** Throw if the provider doesnt support the specified chainNetwork */

  }, {
    key: "assertWalletTypeValidForChainNetwork",
    value: function () {
      var _assertWalletTypeValidForChainNetwork = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(walletType, chainNetwork, externalWalletInterface) {
        var _this$getExternalWall, chainType, networks, isValid;

        return _regeneratorRuntime().wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                _this$getExternalWall = this.getExternalWalletInfo(walletType, externalWalletInterface), chainType = _this$getExternalWall.chainType;
                _context4.next = 3;
                return this._oreIdContext.settings.getAllChainNetworkSettings();

              case 3:
                networks = _context4.sent;
                isValid = !!networks.find(function (n) {
                  return n.network === chainNetwork && n.type === chainType;
                });

                if (isValid) {
                  _context4.next = 7;
                  break;
                }

                throw Error("External Wallet Type: ".concat(walletType, " doesnt support chainNetwork ").concat(chainNetwork, ". Hint: It supports networks of type ").concat(chainType, "."));

              case 7:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      function assertWalletTypeValidForChainNetwork(_x5, _x6, _x7) {
        return _assertWalletTypeValidForChainNetwork.apply(this, arguments);
      }

      return assertWalletTypeValidForChainNetwork;
    }() // Supported features by wallet provider

    /** whether discovery is supported by the provider */

  }, {
    key: "canDiscover",
    value: function canDiscover(walletType, externalWalletInterface) {
      var _this$getExternalWall2;

      return ((_this$getExternalWall2 = this.getExternalWalletInfo(walletType, externalWalletInterface)) === null || _this$getExternalWall2 === void 0 ? void 0 : _this$getExternalWall2.supportsDiscovery) || false;
    }
    /** whether signString is supported by the provider */

  }, {
    key: "canSignString",
    value: function canSignString(walletType, externalWalletInterface) {
      var _this$getExternalWall3;

      return ((_this$getExternalWall3 = this.getExternalWalletInfo(walletType, externalWalletInterface)) === null || _this$getExternalWall3 === void 0 ? void 0 : _this$getExternalWall3.supportsSignArbitrary) || false;
    }
    /** whether call to discover is required by provider before login */

  }, {
    key: "requiresDiscoverToLogin",
    value: function requiresDiscoverToLogin(walletType, externalWalletInterface) {
      var _this$getExternalWall4;

      return ((_this$getExternalWall4 = this.getExternalWalletInfo(walletType, externalWalletInterface)) === null || _this$getExternalWall4 === void 0 ? void 0 : _this$getExternalWall4.requiresDiscoverToLogin) || false;
    }
    /** whether call to logout then login is required by provider before discover */

  }, {
    key: "requiresLogoutLoginToDiscover",
    value: function requiresLogoutLoginToDiscover(walletType, externalWalletInterface) {
      var _this$getExternalWall5;

      return ((_this$getExternalWall5 = this.getExternalWalletInfo(walletType, externalWalletInterface)) === null || _this$getExternalWall5 === void 0 ? void 0 : _this$getExternalWall5.requiresLogoutLoginToDiscover) || false;
    }
    /** default path index for provider (if any) */

  }, {
    key: "defaultDiscoveryPathIndexList",
    value: function defaultDiscoveryPathIndexList(walletType, externalWalletInterface) {
      var _this$getExternalWall6;

      return ((_this$getExternalWall6 = this.getExternalWalletInfo(walletType, externalWalletInterface)) === null || _this$getExternalWall6 === void 0 ? void 0 : _this$getExternalWall6.defaultDiscoveryPathIndexList) || null;
    }
    /** help text displayed to user for provider */

  }, {
    key: "helpTextForProvider",
    value: function helpTextForProvider(walletType, externalWalletInterface) {
      var _this$getExternalWall7;

      return ((_this$getExternalWall7 = this.getExternalWalletInfo(walletType, externalWalletInterface)) === null || _this$getExternalWall7 === void 0 ? void 0 : _this$getExternalWall7.helpText) || null;
    }
  }]);

  return WalletHelper;
}();



/***/ }),
/* 123 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getTransitProviderAttributes": () => (/* reexport safe */ _transitProviders__WEBPACK_IMPORTED_MODULE_1__.getTransitProviderAttributes),
/* harmony export */   "getTransitProviderAttributesByChain": () => (/* reexport safe */ _transitProviders__WEBPACK_IMPORTED_MODULE_1__.getTransitProviderAttributesByChain),
/* harmony export */   "getTransitProviderAttributesByProviderId": () => (/* reexport safe */ _transitProviders__WEBPACK_IMPORTED_MODULE_1__.getTransitProviderAttributesByProviderId),
/* harmony export */   "supportedTransitProviders": () => (/* reexport safe */ _transitProviders__WEBPACK_IMPORTED_MODULE_1__.supportedTransitProviders),
/* harmony export */   "transitProviderAttributesData": () => (/* reexport safe */ _transitProviders__WEBPACK_IMPORTED_MODULE_1__.transitProviderAttributesData)
/* harmony export */ });
/* harmony import */ var _models__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(12);
/* harmony import */ var _transitProviders__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(71);



/***/ }),
/* 124 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "PluginType": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_1__.PluginType)
/* harmony export */ });
/* harmony import */ var _plugin__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(125);
/* harmony import */ var _models__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(126);



/***/ }),
/* 125 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);


/***/ }),
/* 126 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "PluginType": () => (/* binding */ PluginType)
/* harmony export */ });
/* harmony import */ var _popupPlugin_models__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(127);

var PluginType;

(function (PluginType) {
  PluginType["Popup"] = "popup";
})(PluginType || (PluginType = {}));

/***/ }),
/* 127 */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);


/***/ })
/******/ 	]);
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/global */
/******/ 	(() => {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be in strict mode.
(() => {
"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AccountType": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_7__.AccountType),
/* harmony export */   "ApiEndpoint": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_7__.ApiEndpoint),
/* harmony export */   "ApiKeyUsedFor": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_7__.ApiKeyUsedFor),
/* harmony export */   "Auth": () => (/* reexport safe */ _auth_auth__WEBPACK_IMPORTED_MODULE_0__.Auth),
/* harmony export */   "AuthProvider": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_7__.AuthProvider),
/* harmony export */   "ChainNetwork": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_7__.ChainNetwork),
/* harmony export */   "ChainPlatformType": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_7__.ChainPlatformType),
/* harmony export */   "ConfigType": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_7__.ConfigType),
/* harmony export */   "DummyStorage": () => (/* reexport safe */ _utils_storage__WEBPACK_IMPORTED_MODULE_6__.DummyStorage),
/* harmony export */   "ExternalWalletInterface": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_7__.ExternalWalletInterface),
/* harmony export */   "ExternalWalletType": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_7__.ExternalWalletType),
/* harmony export */   "Helpers": () => (/* reexport safe */ _utils_helpers__WEBPACK_IMPORTED_MODULE_4__["default"]),
/* harmony export */   "LoginProvider": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_7__.LoginProvider),
/* harmony export */   "MemoryStorage": () => (/* reexport safe */ _utils_storage__WEBPACK_IMPORTED_MODULE_6__.MemoryStorage),
/* harmony export */   "OreId": () => (/* reexport safe */ _core_oreId__WEBPACK_IMPORTED_MODULE_1__["default"]),
/* harmony export */   "PluginType": () => (/* reexport safe */ _plugins__WEBPACK_IMPORTED_MODULE_8__.PluginType),
/* harmony export */   "RecoverAccountAction": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_7__.RecoverAccountAction),
/* harmony export */   "RequestType": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_7__.RequestType),
/* harmony export */   "SignStringMethod": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_7__.SignStringMethod),
/* harmony export */   "Transaction": () => (/* reexport safe */ _transaction_transaction__WEBPACK_IMPORTED_MODULE_2__["default"]),
/* harmony export */   "User": () => (/* reexport safe */ _user_user__WEBPACK_IMPORTED_MODULE_3__.User),
/* harmony export */   "WebWidgetAction": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_7__.WebWidgetAction),
/* harmony export */   "WidgetVersion": () => (/* reexport safe */ _models__WEBPACK_IMPORTED_MODULE_7__.WidgetVersion),
/* harmony export */   "appendHmacToUrl": () => (/* reexport safe */ _utils_hmac__WEBPACK_IMPORTED_MODULE_5__.appendHmacToUrl),
/* harmony export */   "generateHmac": () => (/* reexport safe */ _utils_hmac__WEBPACK_IMPORTED_MODULE_5__.generateHmac),
/* harmony export */   "generateHmacWithApiKeyOrProxyServer": () => (/* reexport safe */ _utils_hmac__WEBPACK_IMPORTED_MODULE_5__.generateHmacWithApiKeyOrProxyServer)
/* harmony export */ });
/* harmony import */ var _auth_auth__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);
/* harmony import */ var _core_oreId__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(78);
/* harmony import */ var _transaction_transaction__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(111);
/* harmony import */ var _user_user__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(74);
/* harmony import */ var _utils_helpers__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(17);
/* harmony import */ var _utils_hmac__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(112);
/* harmony import */ var _utils_storage__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(119);
/* harmony import */ var _models__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(5);
/* harmony import */ var _plugins__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(124);










})();

/******/ 	return __webpack_exports__;
/******/ })()
;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,