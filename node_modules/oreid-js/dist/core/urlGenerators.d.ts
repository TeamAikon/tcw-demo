import { GetOreIdAuthUrlParams, GetOreIdNewChainAccountUrlParams, GetOreIdRecoverAccountUrlParams, GetRecoverAccountUrlResult, TransactionData } from '../models';
import OreIdContext from './IOreidContext';
/** Returns a fully formed url to create a new chain account within a user's wallet account
 *  This function calls the /new-account web endpoint
 *  It requires an apiKey in order to add an appAccessToken with new account metadata
 *  Returns: Callback returns chainAccount - for the new account */
export declare function getOreIdNewChainAccountUrl(oreIdContext: OreIdContext, args: GetOreIdNewChainAccountUrlParams): Promise<string>;
/** Returns a fully formed url to login a user
 *  This function calls the /auth web endpoint
 *  Returns: Callback returns account, and optionally accessToken and/or idToken for user */
export declare function getOreIdAuthUrl(oreIdContext: OreIdContext, args: GetOreIdAuthUrlParams): Promise<string>;
/** Returns a fully formed url to login a user
 *  This function calls the /sign web endpoint
 *  Returns: Callback returns transactionId (if available), and optionally signedTransaction */
export declare function getOreIdSignUrl(oreIdContext: OreIdContext, transactionData: TransactionData): Promise<string>;
/** Returns a fully formed url to recover a user's account (e.g. change password)
 *  This function calls the /recover-account web endpoint
 *  Returns: Callback returns account updated */
export declare function getRecoverAccountUrl(oreIdContext: OreIdContext, args: GetOreIdRecoverAccountUrlParams): Promise<GetRecoverAccountUrlResult>;
